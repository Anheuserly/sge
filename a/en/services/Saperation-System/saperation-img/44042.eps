%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 140716_ 189888005 .eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Алексей Егоров
%%CreationDate: 7/16/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 35378 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B
%84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF
%848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B
%84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF
%848B84AF848B84AF848B84848B8484848B8484848B8484848B8484848B84
%84848B8484848B8484848B8484848B8484848B8484848B8484848B848484
%8B8484848B8484848B8484848B8484848B8484848B8484848B8484848B84
%84848B8484848B8484848B8484848B8484848B8484848B8484848B848484
%8B8484848B8484848B8484848B8484848B84848B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B848B848BFD048485
%848484858484848584848485848484858484848584848485848484858484
%848584848485848484858484848584848485848484858484848584848485
%848484858484848584848485848484858484848584848485848484858484
%848584848485848484858484848584848485848484858484848584848485
%848484858B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84
%AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF84
%8B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84
%AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF84
%8B84AF848B84AF848B84AFFD04848B8484848B8484848B8484848B848484
%8B8484848B8484848B8484848B8484848B8484848B8484848B8484848B84
%84848B8484848B8484848B8484848B8484848B8484848B8484848B848484
%8B8484848B8484848B8484848B8484848B8484848B8484848B8484848B84
%84848B8484848B8484848B8484848B8484848B8B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B848B848B848B848B
%84AF848B848B848B848B848B848B848B848B848B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B848B848B84848584
%848485848484858484848584848485848484858484848584848485848484
%858484848584848485848484858484848584848485848484858484848584
%8484858484848B843C136084848485848484858484848584848485848484
%858484848584848485848484858484848584848485848484858484848584
%8484858484AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF
%848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B
%84AF848B84AF848B848BA9FFA98B84601314136084AF848B84AF848B84AF
%848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B
%84AF848B84AF848B84AF848B84848B8484848B8484848B8484848B848484
%8B8484848B8484848B8484848B8484848B8484848B8484848B8484848B84
%84848B8484848B8484848B8484848B848484FFFFFF8436FD051335848B84
%84848B8484848B8484848B8484848B8484848B8484848B8484848B848484
%8B8484848B8484848B8484848B8484848B84848B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B84FD05FF60FD0413
%14136084AF848B848B848B848B848B848B848B848B848B848B848B848B84
%8B848B848B848B848B848B848B848B848B848B848B848BFD048485848484
%858484848584848485848484858484848584848485848484858484848584
%8484858484848584848485848484858484848584848485848484FD07FF35
%1313130D1313608485848484858484848584848485848484858484848584
%8484858484848584848485848484858484848584848485848484858B84AF
%848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B
%84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF
%FD07FF6013131314131460AF848B84AF848B84AF848B84AF848B84AF848B
%84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF
%FD04848B8484848B8484848B8484848B8484848B8484848B8484848B8484
%848B8484848B8484848B8484848B8484848B8484848B8484848B8484848B
%848484AFA8AFA8AFA8843560366035606085848B8484848B8484848B8484
%848B8484848B8484848B8484848B8484848B8484848B8484848B8484848B
%8484848B8484848B8B848B848B848B848B848B848B848B848B848B848B84
%8B848B848B848B848B848B848B848B848B848B848B848B848B848B848B84
%8B848B848B848B848B848B848B8485848B84AF84AF84AF84AF848B848B84
%8B848B848B848B848B848B848B848B848B848B848B848B848B848B848B84
%8B848B848B848B848B848B848B848B848485848484858484848584848485
%848484858484848584848485848484858484848584848485848484858484
%848584848485848484858484848584848485848484858484848584848485
%848484858484848584848485848484858484848584858485848484858484
%848584848485848484858484848584848485848484858484AF848B84AF84
%8B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B848B848B84
%8B84AF84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF84
%8B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF846036
%8B848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF84
%8B84848B8484848B8484848B8484848B8484848B8484848B8484848B8484
%848B848484AF8460133C8485848B8484848B8484848B8484848B8484848B
%8484848B8484848B8484848B8484848B8484848B8484848B8484848B8484
%84AFA9858460131335858484848B8484848B8484848B8484848B8484848B
%8484848B8484848B84848B848B848B848B848B848B848B848B848B848B84
%8B848B848B848B848B848BAFFFFF841313133C84AF848B848B848B848B84
%8B848B848B848B848B848B848B848B848B848B848B848B848B848B848B84
%8B848B848B848B84AFFFFFFF60131413131385848B848B848B848B848B84
%8B848B848B848B848B848B848B848B848BFD048485848484858484848584
%848485848484858484848584848485848484FFFFFFA81313130D3C848484
%858484848584848485848484858484848584848485848484858484848584
%84848584848485848484858484848BFD04FFA8130DFD0413858484848584
%84848584848485848484858484848584848485848484858B84AF848B84AF
%848B84AF848B84AF848B84AF84AF848B848B84AF848B84FD05FF60131314
%138B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B
%84AF848B84AF848B84AF848B84AF848B848BAFFD05FF60FD051360AF84AF
%848B84AF848B84AF848B84AF848B84AF848B84AF848B84AFFD04848B8484
%848B8484848B8484848B848484FFFFAF848B8484848B848484AF84AF8484
%60605AFD04848B8484848B8484848B8484848B8484848B8484848B848484
%8B8484848B8484848B8484848B8484848B848484AFAFFFA8FFA860133C35
%36358B8484848B845952848485848B8484848B8484848B8484848B848484
%8B8B848B848B848B848B848B848B848B848B848BA8FD05FF848B848B848B
%848B848B84AF84AF848B848B848B848B848B848B848B848B848B848B848B
%848B848B848B848B848B848B848B848B848B848B848B848B848B848B848B
%848B848B84AF84AF848B848B84AF59525253598B848B848B848B848B848B
%848B848B848B8484858484848584848485848484858484848584AFFD05FF
%AF8484848584848485848484858484848584848485848484858484848584
%848485848484858484848584848485848484858484848584848485848484
%8584848485848484858484848584848485FD048428522752598B84858484
%848584848485848484858484AF848B84AF848B84AF848B84AF848B84AF84
%8B84FD06FFAF84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B
%84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF
%848B84AF848B84AF848B84AF848B84AF848B84AF848B84AF845928525284
%84AF848B84AF848B84AF848B84AF848B84848B8484848B8484848B848484
%8B8484848B848484FD05FF8484848B8484848B8484848B8484848B848584
%8B8484848B8484848B8484848B8484848B8484848B8484848B8484848B84
%84848B8484848B848484AFA885848B8484848B8484848B8484848B848484
%8B59522E52598B848B8484848B8484848B8484848B84848B848B848B848B
%848B848B848B848B848B848B84AFFD05FFAF848B848B848B848B848B848B
%848B84A099A8848B848B848B848B848B848B848B848B848B848B848B848B
%848B848B848B848B848B848B848B848BA9FF848B848B848B848B848B848B
%848B848B848B848B848B848B858B848B848B848B848B848B848B848BFD04
%84858484848584848485848484858484848584AFA8AFA8FF848584848485
%8484848584848485848492927D8B84858484848584848485848484858485
%84AF848584AF848584AF848584AF848484858484848584AFA88584848485
%8484848584848485848484858484848B84847DA884848485848484858484
%8485848484858B84AF848B84AF848B84AF848B84AF848B84AF848B848B84
%8B84AF848B84AF848B84AF848B84AF848B85A0988B84AF848B84AF848B84
%AF848B848B84FD10FFAF84AF848B84AF84AFFFFFFF8B84AF848B84AF848B
%84AF848B84AF848B84AF848B7CC09F8B84AF848B84AF848B84AF848B84AF
%FD04848B8484848B8484848B8484848B8484848B848484FFA8AF848B8484
%848B8484848B8484848B848499987D84848B8484848B8484848B848484AF
%FFAF84AF84AF84AF84AF84AF84AF84FFA884848B8484848584AFA8FF8484
%848B8484848B8484848B84AFFFFF8484848B84352E355A85848B8484848B
%8484848B8484848B8B848B848B848B848B848B848B848B848B848B848B84
%8BAFFFFFAF848B848B848B848B848B848B84A792A076BAA08B848B848B84
%8B848B848B848BAFFF848B848B848B848B848B848B8485AFFF848B848B84
%8B84FD05AF848B848B848B848B848B848B84FFFFAF848B848B35352F8484
%8B848B848B848B848B848B848B8484858484848584848485848484858484
%8485848484AF8485FFFFA98484858484848584848485848B7C9976A075A1
%84848485848484858484848584AFA884848460858484848584848485A8FF
%A9AF84848485848484FFA8AF84858484848584848485FD0484A9AF608584
%8484A0989E84858484848584848485848484858484AF848B84AF848B84AF
%848B84AF848B84AF848B84853C8484AFAFAF84AF848B84AF848B84AF848B
%85A799A09AA07D8B84AF848B84AF84AFAFFFAFFFFFFFAFFFAFFF848B84AF
%848B848B84FFFFFFAF8584AF848B84FD05AF848B84AF848B84AF848B84AF
%AFFFFFAF848B848B9FC098AF848B84AF848B84AF848B84AF848B84848B84
%84848B8484848B8484848B8484848B84601336136084AF8485848B848484
%8B8484848B848B7D98848B92A18584848B848484AFFFFFA8FFAFFFA8FFAF
%FFFFFF8484848B848484AFFD04FFA885848B848484FFA9AF848B84FFFFAF
%AFFF848B8484A8FFA8AFFFAF8485847D5258848B8484848B8484848B8484
%848B84848B848B848B848B848B848B848B848B848B84AF13608460138BFF
%FFA98B848B848B848B8484848B85A799A099A0A1FFAFAF84845259A8FF7D
%53598B848B848B84AFFFAF848B848B84AFFD06FFA9AF848B84AFAFAFFFAF
%608460608484846084AF84AFAFFFAFFFA88B848B36141485848B848B848B
%848B848B848B848BFD0484858484848584848485848484858484843560AF
%601384FFFFFF848484858484848B7D757D8B7D9976A0757DAFFFAF848459
%277DAF852E28538B8484848584FFFD0784FD07FFA8848485A8845A843560
%59845960596059606085A8FF84AFAFAF848584350D356085848584848485
%84848485848484858B84AF848B84AF848B84AF848B84AF848B8485133C84
%8B13AFFFFFFF8B84AF84AF84AF848B75A08BA792A884997CAFFFFF85AF84
%5959FF857E527E858B84AF84AFFFAF848B84AF84AFFD07FFAF84AF84AF36
%141313353C608435143584593C84AFFFAF84FFA88B848B7B9F98A884AF84
%8B84AF848B84AF848B84AFFD04848B8484848B8484848B8484848B846013
%131336603684FFFFAF8484848B60605A8B84847C837DA075997CA18484A0
%A7848B84A0A78B84847BA78484848584FFA88584848485A8FFFFFFCFFFCF
%FFA88484AF35FD0A1360A8A8596084FFAFFFA8AF848B84C0BAC07D8B848B
%8484848B8484848B8484848B8B848B848B848B848B848B848B848B84AF36
%131314136013AFFFFFA88B8485FD0413358B84A075A199A77D997C8B7DBA
%9F8B85A898C1A9AF83BA9F8B848B84FFFFFF848B848B84AFFFCA98C098C0
%98C198C1985813845A8460845A8413FD05845984AFAF84FFA98B848B7B7B
%7583858B848B848B848B848B848B848B8484858484848584848485848484
%858484843C0D130D135A3584FFFFAF848B35133584351335A8757575997D
%8492A185A7989F848BA7BA98FF85A7989F848B84AFFD04FF8485848484FF
%98C1A0C9A0A6A0A07CA03413596059605960591360FF84351384593C84AF
%A8AF848460360D1336AF8484848584848485848484858484AF848B84AF84
%8B84AF848B84AF848B84AF36141314136013AFFFFFAFAF841335AF84AF13
%1484A075A1A09998A17D8B7DC09F8B84C998C1FFA97DC09FAF848BA8FFFF
%FFAF8B848B84AFFFC1C9FD04FFAF858B856013605A605A605A601384FFFF
%6060A8A95A84A9FFA98B848B13360D60848B84AF848B84AF848B84AF848B
%84848B8484848B8484848B8484848B848484600D130D355A3584FFFFAF84
%600D60848B84600D60757C7C997D8492A185A798C1597DA7BA9EA852A798
%9F595284FD05FFA88B7D9E98C0989898C0A0AF8485848B35135960598459
%60591360FFFFFF366084845960A8AF8485837B757B7C8B8484848B848484
%8B8484848B84848B848B848B848B848B848B848B848B848B75BA92BA9284
%13AFFFFFAFAF601360AF84AF601360A075A199A77D997C8BA0C0984B7DC9
%98C14B7DC9C09F4B52FD07FFAF9F98A7A0C9C8C99FC0848B848B84601384
%60845A8460841384FFFFA88B603613845A6084AF85A7BAC0BAC2858B848B
%848B848B848B848B848BFD04848584848485848484858484848B59582D52
%2D52593684FFFFFF60360D3C608584601360757C76A0759976A161A69874
%F87DC8BA4A2777C99875F87DFD08FF98A08BAFA9FFFFA898A8848484AF35
%1313363535353635135AFFFFAF608B5A357EA85960608535582D58346084
%858484848584848485848484858B84AF848B84AF848B84AF848B84AF847D
%131A1414135A13AFFFFF84131314131460AF601459A075A092A884997C8B
%A09827277DC9744B277DC898272776FD07FFCFC79FAF858BFFFFA6C6A78B
%848BAF8413141313131413131385FFFFA98B84FF8484A884846060141314
%131435AF848B84AF848B84AF848B84AFFD04848B8484848B8484848B8484
%848B52350C350C352F36A8FFFF36132E0C2E133584601359757C75997CA1
%99A185A04A27207DC24A21277DC82627207DFD07FFC7C0C6C8AF608BA6C6
%C6C78385A884FD0C1336AF8485A8FF606035605936135A35601336848B84
%84848B8484848B8484848B8B848B848B848B848B848B848B848B845975BA
%92BA925913FFFFAF13142E2E281413856014599F75A0A0A099A07D8B524B
%27277DA1274B269A996F6E6F75C3A1FFFFFFAFCEC7C89FC7A7AFA8C8C7C8
%9FA7AFFF5AFD0413141313131413130D60AF8B84AFAFFF603684A8351384
%A8A83C138B848B848B848B848B848B848B84848584848485848484858484
%8485848552350C350C353535A8A87D13132E062E131384600D5975757598
%838592A15A27204B20522727276EFD04926E98929299FFFF607DA87D847D
%CA84837DA87D847DFFFF600D361335133635351336351335AF8484A8FF84
%AF8484CA600D3513350D368484848584848485848484858484AF848B84AF
%848B84AF848B84AF848B847D3514131A135A13FF7D7E13142E2E2E14138B
%6014599F75A09AA099A0A159204B274B274B274B9299274B274B76CF98BA
%FFFF60A6C7C8A5C7C9AF58C7C7C8A5C8FFFF3660A8848484A8AF5A84A8FF
%3560AF8B84AFAFFFAFFF60845A148484843C35AF84AF848B84AF848B84AF
%848B84848B8484848B8484848B8484848B848552590C350C353535AFA159
%13132E272E1313522F13526F7B75A0769A75A75927274B27274A986EBA6E
%2727274A989292A1FFFF607BC6C6C6C0CD8582C0FD04C6FFAF3635CB8484
%59A9A86059A8A85A35AF848484FFA8AFA8AF60350D847E8413368484848B
%8484848B8484848B84848B848B848B848B848B848B848B84AF84596FBA92
%98925913FF7D7D13140C2E2E1413845914589F75A0928B8B99A07D204B27
%4B279892996E6F274B279298CAFD04FF60837DA8A1A7A7AF59A77DA8A1A8
%A8AF35365A605A605A8435605A843560A98B84AFFFAF84FFA8AF3C13353C
%351335AF848B848B848B848B848B848BFD04848584848485848484858484
%848B522E0C350C352F36AFA15213132E052E1313525913526F9F75997CA1
%99A753272727204B926F2127272720276E9292BBA8FFFF607CA6A0A7A0C9
%845FA0A6A0A6A084843C0D130D1313130D130D130D1335AF608484AFA8AF
%A8856060138484A8353584858484848584848485848484858B84AF848B84
%AF848B84AF848B84AF847D351A1314135A35FF7D7D13142E2E2E1413845A
%1458A07599A0A099A7A17D214B92BB92BA9299926F274B272776C992BBFF
%FF60A6C6C7C6C6C8AF7CC6C6C7C6C7AEFF3C365A845A60608436605A8435
%3684603560606084603584601335605A3635AF848B84AF848B84AF848B84
%AFFD04848B8484848B8484848B8484848B5235131413143536FFA1591413
%2E272E131352591352759F75997CA175A753276E926E6F6E6E6E92924B27
%4B2075A09299FFFFFF845F595F59AEAFFF3583355F5FFFFF6035A8848459
%CA84845AA8A86013847EFF8460598484A85984135A35601336848B848484
%8B8484848B8484848B8B848B848B848B848B848B848B848B847D52585258
%525913FF7D7D13142E2E2814137D35145275753513141335135920926E27
%274B27274BC14B27279992BBA0FD04FF85363C353C84FFAF363636133CFF
%FF363CA8A88460A8A85A84A8A9351435845A84353635846060131484A8A8
%3C358B848B848B848B848B848B848B848485848484858484848584848485
%8485527592986E982E36AFA15913132E062E13135259135875750C141313
%0D142E4B75A027272027277DA87D272792BBA1CF84606084353613351360
%6060133613131360353513363535133635351336351335AF608484AFA8AF
%848B60600D3513350D368484848584848485848484858484AF858B84AF84
%8B84AF848B84AF848B847D35131336135A35FF7D7D13142E2E2E14137D35
%145299753513141314135992C19999274B4BA8A1A8A1A8276F92BA925835
%3C1360356035603536353C5A36593C353C13141314131413141314131413
%60A88560AFAF8B84FF8485601484A8A83C35AF84AF848B84AF848B84AF84
%8B84838A8484848B8485848B8485848B8484843C131313145A36FFA15913
%132E272E13135959135975750CFD0413142E75A1A74B27207DA87D4B7DA8
%7DF87DA1926E60353559365935353C3560136013601360351335A8848435
%A8846059A8A85AFD04130D1313130DFD0413605A8413368484848B848484
%8B8485848B84858781AC828882AD838A848B848B848B85AF35FD04136035
%FF7D8413132E2E2E14137D35142E7575351314131313536FA0A075274BA1
%CA7C5276CA7D6F92BA9252133C133C133C1336133C353635363536353C13
%60A8A98460A8A98484A8FF5A1313145A845A846084FD0413353C351335AF
%848B848B858B848B848A83AD838181818881818187818281828289838483
%350D1313133636FFA15913132E052E131353591358757B0D130D1313142E
%9399994A27277DA77D527DA87D92982D35135A5936593559365936356035
%60138435603513358459843584596059847E3613130DA8A8A884FFA8360D
%1313A884A8353584848384838382828188818181878881AC818881AC8188
%81AC8188819F98BA2E1A1314135F35FFA18413142E2E2E14138A601458A0
%753513141314135252A8A776274B4BA8A8A8A7A84B9292755135133C1336
%133C1336133C353635363536133C13141336131413361314133613361336
%84FFA8AFA8FF3514131435605A3635AC828881AC818881AC818881AC8181
%82818881828188818281888198929F983413141313343CFFFF8514130C0C
%2E1314585F1358757C1314131413142D9298996E272127527D7D7D522727
%516FB46F605A365A365A365A363560358413843560351413130D14131313
%1413130D1413131384A8A884A984360D1313130D130D3581888187818881
%82818881828188AC818881AC818881AC818881AC92987A9F75525176517B
%52C3C3A12E5851524B58529F7558759998582E582E58527592C299996E6F
%75996E996E996E6F517692993435345F3459345F345934361335345F3459
%345F3459345F2E2E345F3459345F3459345F345F345F3459345F3459345F
%58828182818281AC818881AC81888181888181818281827B827B82577B92
%9292989298929892986E92929892989298929892989298929892BA929892
%B492986E9892989298929892BA92BA92BA92987B817B817B817B817B827B
%582F3558815782577C57827B82574B267B7B827B817B827B7B57827B7B57
%827B817B827B817B82577C5782577C57827B8257828182AC818281827C82
%7B827C827B8282827B827C827BA07B9F7BA092997BA07B9F7BA07B7B7BA0
%7B7B7BA092997B9F929F7BFD049F7C527C9EC19EC7C6C7C6C7C6C7C6C7C6
%C7C6C7C6C7C6C77B3635A6A4C7A5A59FA5A5A67BA6274B7B827C8258827C
%827B827C827B827C827B827C827B827C827B827C827B827C827B827C827B
%5782577C5782577C578257825782578257827B9892989292929892929298
%9292929892929298929292BA9EC7C0BA929292BA92929298929292BA92BA
%C6C7C6C6C0C7C6C6C0C7C6C6C0C7C6A50D359FC6C0C6C6C6C0C7C6C69E76
%51A59EA59FA57B827B825782577C57825782578257825782578257825782
%578257825782577C827B827C827B827C827B827C827B827C82589F929F7B
%9F7B7B7B9F7B9F7B9F9EC19EC1C0C198BABAC1C0C7C6C7C0C7C0C19EC1C0
%BA7558FD04C092C7C6C7C6C7C6C7C6C7C6C7C6C7C6C77B3535A5C6C7C6C7
%C6C7C6C7C6C87C7DC7C6C6C7C6C7C6C7C6C79FA57B827B827C8257827C82
%7B827C827B827C827B827C827B827C577C5782577C5782577C5782577C57
%825782759292926E9892926E989292929892929298FD0B9298929292BA92
%9292BA92BA92BAC0C6C0C6C6C6C0C7C6C6C0FD04C6A50D359EC6C6C6C0C6
%C6C6C0C7C04B26C6C6C6C0C7C0C6C0C6C0C6C0C6C0C69EA59FA57B82577C
%5782577C5782577C5782577C5782827B827C827B827C827B827C8258827C
%827BA69FC098C1C0C098C1C0C09FC9C2C098C1C0C198C1C0C098C1C0C0C0
%C1C0C198C1987C517C75756F76757C517C767C517C527C517C767C75A058
%35357C9FA59FC7C6C7C6C7C6C72751C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6
%C7C6C7C6C7C6C79FA67B8258827C827B827C827B827C5782578257825782
%577C57827B817BA59EC6C0C7C6C6C6C7C6C6C6C7C6CFFFCFC6C6C6C7FD06
%C69EC79F9F7B7C51525252353513532E5228522852285228522852285228
%522852285335352E5228522852527651A075274AC7FD06C6C0C7C6C6C0C7
%C6C6C0C7C6C6C0C7C6C6C0C7A4A57BA57B82578257825782827C827B827C
%8257827BA59FC7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C6CEFFC9C6C6C7C6
%C79F9F757C52522E532E5328532E522E5935352E5252522E5252522E5252
%522E5252522E5252522E3535532E5352522E532E53284C2752527C757C7B
%C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7A5A57B827C
%82575782577C57827BA59EC6C6C6C0C6C0C6C0C7C0C6C0C7C0C6C0C6C6C6
%C0FFFFC97A9F51522852282E2852285228522852285228522E352F522852
%28522852285228522852285228522852282E35352E4C27522752277D2727
%204C2852285228522852517B75A59EFD05C6C0C7C0C6C0C7C0C6C0C7C0C6
%C0C6C6C69EC79F81827BA6A5C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6
%C7C6C7C6C79ECEFFFF53522E532E53525252535252525352525253525252
%5935352E535252525352525253525252535252525352522E5A3552264B27
%4B274B7D4B27FD0452535252525352532853525251A09FC7C6C7C6C7C6C7
%C6C7C6C7C6C7C6C7C6C7C6C7C6C7C69EC7C6C6C0C7C6C6C0C7C6C6C0C7C6
%C6C0C7C6C6C0C6C0A57B7B277DAFFFA85228522E5228522E5228522E5228
%522E5228522E522E35355228522E5228522E5228522E5228522E52285228
%5335352E4C2752274C277D525228522E5228522E5228522E522852285228
%525252759F9EFD05C6C0C7C6C6C0C7C6C6C0C7C6C6C7C6C7C6C7C6C7C6C7
%C6C7C6C6C6C7C6C8A1C7C6C77B7C525353A8FFFFAF592E522E5252522E52
%52522E5252522E5252522E525235355952522E5252522E5252522E525252
%2E5252522E522E35355952522E535252525352522E5252522E5252522E52
%52522E5252522E532E532852769F9EC7C6C7C6C7C6C7C6C7C6C7C6C7C6C0
%C6C0C7C0C6C0C7C0C6C0C7C8CFCAFFA8A8A8FFA9FFA8FFA9FFFFFFA85327
%5228522852285228522852285228522852285228522E352E522852285228
%52285228522852285228522852285335352E522852285228522852285228
%5228522852285228522852285228522852285228522852517B9EFD05C6C0
%C7C0C6C0C7C7C6C7C6C7C6C7C6C7C6CDFD06FFA7FD09FF84532853525252
%535252525352525253525252535252525352593559525252535252525352
%52525352525253FD04522E35355952525253525252535252525352525253
%5252525352525253525252535252525352522E532E53527C9FC7C6C7C6C7
%C6C7C6C6C6C0C7C6C6C0C7C0C8FFFFFFA87D7D7DA87D847D7E7D7E7D7D2E
%52285228522E5228522E5228522E5228522E5228522E5228522F352F522E
%5228522E5228522E5228522E5228522E5228533535274B274B274B274B27
%4B274B274B274B274B274B274B274B274B274B27522E5228522E5228522E
%522852527B9EC7C6C6C0C7C7C6C7C6C7C6C6C0C8FFFFFF7D2E5228525352
%2852285228522E522E5252522E5252522E5252522E5252522E5252522E52
%52522E5935352E5252522E5252522E5252522E5252522E5252522E353552
%204B274B274B274B274B274B274B274B274B274B274B274B274B274B2752
%52522E5252522E5252522E532E5252A09FC7C6C0C7C0C6C6C77B5284FFFF
%532752285228522852285228522852285228522852285228522852285228
%52285228522852285228522E352F52285228522852285228522852285228
%522852282F35352727204B2027204B2027204B2027204B2027204B202720
%4B2027204B2027204B28522852285228522852285228522852519FC7C6C7
%9F7C525252FFFF8428535252525352525253525252535252525352525253
%525252535252525352525253525252535252525935352E53525252535252
%5253525252535252525352522E5A355327524C5227524C5227524C522752
%4C5227524C5227524C5227524C4C274B274B525352525253525252535252
%525352532EC09F51522852287DFFFF525228522E5228522E5228522E5228
%522E5228522E5228522E5228522E5228522E5228522E5228522E522E3535
%5228522E5228522E5228522E5228522E522852282F35352E5228522E5228
%522E5228522E5228522E5228522E5228522E5228522E52204B264C28522E
%5228522E5228522E5228522E525228535252287DA8A8A7A853522E525252
%2E5252522E5252522E5252522E5252522E5252522E5252522E5252522E52
%52522E525235355952522E5252522E5252522E5252522E5252522E522E35
%355952522E5252522E5252522E5252522E5252522E5252522E5252522E53
%5252274B27522E5252522E5252522E5252522E525228522852285228A8FF
%A85252285228522852285228522852285228522852285228522852285228
%522852285228522852285228522E352E5228522852285228522852285228
%5228522852285335352E5228522852285228522852285228522852285228
%522852285228522852284B274B2852285228522852285228522852285252
%5253FD04527DFFFF532E5252535252525352525253525252535252525352
%525253525252535252525352525253525252535259355952525253525252
%535252525352525253FD04522E3535595252525352525253525252535252
%52535252525352525253525252532E7DA7A8A7A852535252525352525253
%52525253522E5228522E52287DFFFF53522E5228522E5228522E5228522E
%5228522E5228522E5228522E5228522E5228522E5228522E5228522F352F
%522E5228522E5228522E5228522E5228522E52285935352E522E5228522E
%5228522E5228522E5228522E5228522E5228522E52285252522752525228
%522E5228522E5228522E5228FD04522E5252522EFFFFFF2E5252522E5252
%522E525252285252522E5252522E5252522E5252522E5252522E5252522E
%5252522E5935352E5252522E5252522E5252522E5252522E5252522E3535
%594C5252522E5252522E5252522E5252522E5252522E5252522E5252522E
%52274B275252522E5252522E525252285252522E285228522852282E53FF
%FFA828522852275228522752285252522852275228522852285228522852
%2852285228522852285228522E352F522852285228522852285228522852
%28522852282F35352E522852285228522852285228522852285228522852
%2852285228522E52284B202727522E522852525228522E5228522E525352
%52525352522E52A8FFFFFF7D7D527D537D527D53597DA8527D527D525228
%53525252535252525352525253525252535252525935352E535252525352
%525253525252535252525352522E5A355952535252525352525253525252
%5352525253525252535252285252522852274B27525252285252A84C524C
%52A17728522828522E5228522E5228527DFD0CFFA8A8FD05FFA87D28522E
%5228522E5228522E5228522E5228522E522E35355228522E5228522E5228
%522E5228522E522852282F35352E5228522E5228522E5228522E5228522E
%5228522E52284C2727204B2727204B2727204B272720527D4B204B27A7FD
%0427522E5252522E525252285259A8FD0AFFA8CAFD07FFA82E5252522E52
%52522E5252522E5252522E525235355952522E5252522E5252522E525252
%2E5252522E522E35355952522E5252522E5252522E5252522E5252522E53
%4C4B274B274B274B274B274B274B274B272751A8274B274BA152204B2728
%52285228522852285228522852527D537D527D537D52A87D7D527D537EA8
%FFFFA82852285228522852285228522852285228522E352E522852285228
%52285228522852285228522852285335352E522852285228522852285228
%52285228522852274B2627204B2727274B2727204B274B274B27527D4B27
%2727A84B27274B525253525252535252525352522E522E5228522E522852
%525328522E522853A8FFFFA8285252535252525352525253525252535259
%355952525253525252535252525352525253FD04522E3535594C52525352
%52525352525253525252535252524B274B27FD0452535253274B27525253
%5252527D5252525352535253522E5228522E5228522E5228522E5228522E
%5228522E522852285228522E522852A8FFA859285228522E5228522E5228
%522E5228522F352F522E5228522E5228522E5228522E5228522E52525A59
%5A59592E5228522E5228522E5228522E5228522E4C204B27522E522E5228
%522E4B204B275228522E5228522E5228522E5228FD04522E5252522E5252
%522E5252522E5252522E5252522E5252522E5252522EAFFFFFFFA82E592E
%5252522E5252522E5252522E5935352E5252522E5252522E5252522E5252
%522E5252595984598459525252285252522E5252522E5252522E53274B27
%5252522E5252522E53274B275252522E5252522E5252522E5252522E2852
%28522852285228522852285228522852285228522852285228522852287D
%FD05FF3535352E52285228522852285228522E352F522852285228522852
%28522852285228522852282E0D352E522852285228522852285228522852
%2852284B20272752285228522852284B2027275228522852285228522852
%285228525352525253525252535252525352525253525252535252525352
%525253525252FD04FFAF3535353635525253525252535252525935352E53
%5252525352525253525252535252525352522E5A35592F593559595A3559
%35593559525352525253274B27FD04525352525253274B27FD0452535252
%52535252525352525228522E5228522E5228522E5228522E5228522E5228
%522E5228522E5228522E522EA9FFA828522E3535352E5228522E5228522E
%522E352F5228522E5228522E5228522E5228522E522852282F35352F352E
%352E5935352F352E35353528522E5277A87DA77D522E5228522E52284B27
%2727522E5228522E5228522E5228522E52522E5252522E5252522E525252
%2E5252522E5252522E5252522E5252522E525252A8FF84522E5252593559
%52522E5252522E525960596059522E5252522E5252522E5252522E525252
%2E522E35355952522E5252522E525252285935594C52527D527C527D2E52
%52522E525252274B27522E5252522E5252522E5252522E52522852285228
%52285228522852285228522852285228522852285228522852285252FFFF
%7D275228522E352F522852285228522859596059592E5228522852285228
%522852285228522852285335352E52285228522852285228522E60595228
%522827202728522852285228522827202727522852285228522852285228
%5228525252535252525352525253FD0752535252525352525253FD0552FF
%FFFF52525253525335592EFD065253523535595252525352525253525252
%5352525253FD04522E353559525252535252525352525253355952535252
%274B275252535252525352534C524B525253525252535252525352525253
%522E5228522E5228522E5228522852525928522752285227522852275228
%2E2EA8FFFF7D522E5228522E35355328525259285228522F352F52285228
%522E5228522E5228522E5228522E52285935352E522E5228522E5228532E
%352E3535352E352F352E2E285228522E52285253A87DA87D5228522E5228
%522E5228522E5228FD04522E5252522E525252285252A8FD047D537D7D7D
%537D7D7D537D7EFFFFFFA852285252522E5335352E525284595252522E59
%35352E525252285252522E5252522E5252522E5252522E3535594C525252
%2E52525935592F5935592F592E592E352E5252522E5252522E5352524B52
%52522E5252522E5252522E5252522E28522852285228522852287DA8FFA8
%A8FD10FF7D52282F2E352E352E3535352E3559592E352E352E3535352E35
%2E2F2E52285228522852285228522852282F35352E522852285228523535
%285228352E522852274B2027285228522852285228272027275228522852
%285228522852285228525352525253FD0552A8FFFFFFCFA8FD0EFFA85352
%2E35353C3535353C3535353C356059363535355A3535353C353535593553
%5253525252535252525352522F5A35535253525252532E352E5252523559
%52525253274B27535252525352525253274B27FD04525352525253525252
%5352525228522E5228522E5228A8FFFFA87D7D7D52595253525352522E52
%52522E5228522E3535352E592E352E3535352E3559592E592E352E592E35
%2E592EFD04355228522E5228522E5228522E3535352E5228522E52285335
%52285228352E522E52284B272728522E5228522E52284B272727522E5228
%522E5228522E5228522E52522E5252522E52287DFFFFA852285352522852
%2E5228525252285252522852523535592E522852525235352E5228595252
%285252522E52525228525259353535522E5252522E5252522E5935352E52
%52522E525252536059522853595AFD0452274B27522E5252522E52525227
%4B27522E5252522E5252522E5252522E52522852285228522852A8FFA852
%285228522852285228522852285228522852285235352E52285228522E35
%2F52285228522852285228522E532852285228522F352E52285228522852
%28FD0435522852285228522859355928522E59355228522827204B285228
%5228522852284B204B275228522852285228522852285228525228522E52
%285253FFFF7D28525253525252535252525352525253FD04522E35355352
%525253525235592E525253525252535252287D59522E535252525935352E
%5352522E592E353559355952535252525352522E352E5252533559525352
%52274B27525253525252535252274B275252535252525352525253525252
%53527EA87DA87EA87DAFFFFF2E522E5228522E5228522E5228522E522852
%2E52525935592E522E5228522E353553285228522E5228522E3535603535
%2F3535352F3535352FFD083553285228522E52285228523553285228352E
%5228522E4B204B275228522E5228522827204B285228522E5228522E5228
%522E522852FD09FFA8522E5252522E5252522E5252522E5252522E525284
%5984607E2E5252522E593559525352522E5252593535356059FD1235534C
%5252522E5252522E5252352E525253355952522E53274B274B52522E5252
%522E52274B275352522E5252522E5252522E5252522EFD0AFF2852285228
%522852285228522852285228522852282F35352E52285228525984598453
%52285228FD053559602E352E352E352E352E352E352E352E2F2E52285228
%5228522852285228522E35355935352852285228522727204B2752525328
%4B204B2052285228522852285228522852285228527D7D7D59FD047DFFFF
%592E535252525352525253525252535252525352522E3C35525253525252
%5335352E535252525935353559525953535252525352525253FD04523559
%4C5352525253525252535252525352522E5A59592E53525252535252274B
%274B27A1524B274B27525253525252535252525352525253525252275228
%5227522752FFFF7D2E28522E5228522E5228522E5228522E522852282F35
%352E5228522E522835355228522852353535522852285228522E5228522E
%5228522E5228592E5228522E5228522E5228522E5228522E522852285228
%522E5228522E4C204B272776762027204B2E5228522E5228522E5228522E
%5228522E52522E5252522E522EA8FFFF53522E5252522E5252522E525252
%2E5252522E522E352F5252522E52525235352E522E522F35355952522E52
%52522E5252522E5252522E5252522E5952522E5252522E5252522E525252
%2E5252522E5252522E5252522E535252274B277D524B27522E5352522E52
%52522E5252522E5252522E5252285228522852285252FFFFFF5352272E27
%2E27522759522E272E27522728275935352852285228522E352F53285228
%35353528522852285228522852285228522852285228352E522852285228
%52285228522852285228522852285228522852285228522E522752765227
%522E52285228522852285228522852285228522852525253525252535252
%7DFFFFFFA8A87DA87DA87DA8A1A87DA87DA87DA87DA8AFFFAFA852525253
%525335592E52525935352EFD045253525252535252525352525259355935
%5935592F5A59353559525252535252525352525253525252535252525352
%525253525352535252525352525253525252535252525352525253522E52
%28522E5228522E2E53FD0AFFCFA7FD0CFF53285228522E35355328522E35
%355328522E5228522E5228522E5228522E3535592E352F592E352F592E35
%35352E5228522E5228522E5228522E5228522E5228522E52285228522852
%2E5228522E5228522E5228522E5228522E5228FD04522E5252522EFD0452
%7EA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FD05FF2E5252522E5335352E
%52525335352E522E5252522E5252522E525252285935534C522F594C5252
%522E525253355952522E5252522E5252522E5252522E5252522E5252522E
%5252522E5252522E5252522E5252522E5252522E5252522E285228522852
%2852285228522752285228522852287D7D52285228522852527D59602E52
%285228522E35355228522E35355928522852285228522852285228522E35
%285228352E52285228522852525A59522852285228522852285228522852
%285228522852285228522852285228522852285228522852285228522852
%28525352525253525252535252525352522E5352522E5352522E5352522E
%535252283535352E5352522E593559525253845A84845928535252525352
%52525352525259355252522F352EFD065253355952525253525252535252
%525352525253525252535252525352525253525252535252525352525253
%5252525352525228522E5228522E5228522E5228522E5228522E5228522E
%5228522E5228522E522E3535352E592F3535352E5228522E3535592E5228
%522E5228522E5228522E522E352E5228522F352E3535592E35353528522E
%5228522E5228522E5228522E5228522E5228522E5228522E5228522E5228
%522E5228522E5228522E5228522E52522E5252522E5252522E5252522E52
%52522E5252522E5252522E5252522E5252522E59FD06352E525252285335
%352E5252522E5252522E5252522E525259355352522E532F592E5959352E
%5952522E5252522E5252522E5252522E5252522E5252522E5252522E5252
%522E5252522E5252522E5252522E5252522E525228522852285228522852
%28522852285228522852285228522852285228522852285228532E352E53
%2852285228522E35352E28522852285228522852285228522E3528522852
%285228522852285228522852285228522852285228522852285228522852
%285228522852285228522852285228522852285228522852285228525252
%535252525352525253525252535252525352525253525252535252525352
%52525352525253525252535252525935352EFD0452535252525352525253
%525935535252525352525253525252535252525352525253525252535252
%525352525253525252535252525352525253525252535252525352525253
%52525253522E5228522E5228522E5228522E5228522E5228522E5228522E
%5228522E5228522E5228522E5228522E5228522E522E35355328522E5228
%522E5228522E5228522E3528522E5228522E5228522E5228522E5228522E
%5228522E5228522E5228522E5228522E5228522E5228522E5228522E5228
%522E5228522E5228522E5228FD04522E5252522E5252522E5252522E5252
%522E5252522E5252522E5252522E5252522E5252522E5252522E52525335
%352E522E5252522E5252522E5252524C5935522E5252522E5252522E5252
%522E5252522E5252522E5252522E5252522E5252522E5252522E5252522E
%5252522E5252522E5252522E5252522E5252522E28522852285228522852
%285228522852285228522852285228522852285228522852285228522852
%2852285228522E35355328522852285228522852285228522E352E522852
%285228522852285228522852285228522852285228522852285228522852
%28522852285228522852285228522852285228522852285228522852
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">РџРµС‡Р°С‚СЊ</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2014-04-16T15:31:22+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-04-16T15:31:22+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-04-16T15:31:22+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7Fmc847FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqpXN1bWsDT3Mqwwp9qRyAB9JwgE8mM5iIsmgp2Gp6fqEbSW&#xA;Vwk6KaMUNaH3HUYZRI5sceWMxcTaJyLY7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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&#xA;KuxV2KuxV2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:22E2348F49C5E3119570E6AE1743FD72</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:22E2348F49C5E3119570E6AE1743FD72</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:1EE2348F49C5E3119570E6AE1743FD72</stRef:instanceID>
            <stRef:documentID>xmp.did:1EE2348F49C5E3119570E6AE1743FD72</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AE46BCD4FA9DE311B7C0CFD489E32F75</stEvt:instanceID>
                  <stEvt:when>2014-02-25T14:05:28+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BDC1486B239EE311B7C0CFD489E32F75</stEvt:instanceID>
                  <stEvt:when>2014-02-25T18:06:34+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BFC1486B239EE311B7C0CFD489E32F75</stEvt:instanceID>
                  <stEvt:when>2014-02-25T18:19:07+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:63EF7DBC01B4E3119F02C56FBD206731</stEvt:instanceID>
                  <stEvt:when>2014-03-25T13:42:10+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6BEF7DBC01B4E3119F02C56FBD206731</stEvt:instanceID>
                  <stEvt:when>2014-03-25T16:52:50+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1EE2348F49C5E3119570E6AE1743FD72</stEvt:instanceID>
                  <stEvt:when>2014-04-16T15:23:11+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:22E2348F49C5E3119570E6AE1743FD72</stEvt:instanceID>
                  <stEvt:when>2014-04-16T15:31:22+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=158 G=38 B=37</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>158</xmpG:red>
                           <xmpG:green>38</xmpG:green>
                           <xmpG:blue>37</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=226 G=67 B=65</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>226</xmpG:red>
                           <xmpG:green>67</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=63 B=55</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>243</xmpG:red>
                           <xmpG:green>63</xmpG:green>
                           <xmpG:blue>55</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=169 G=47 B=41</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>169</xmpG:red>
                           <xmpG:green>47</xmpG:green>
                           <xmpG:blue>41</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=69 B=32</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>69</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=178 G=52 B=24</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>178</xmpG:red>
                           <xmpG:green>52</xmpG:green>
                           <xmpG:blue>24</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=245 G=224 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>245</xmpG:red>
                           <xmpG:green>224</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=150 B=45</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>150</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=250 G=171 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>250</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=188 B=121</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>188</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=187 G=113 B=34</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>187</xmpG:red>
                           <xmpG:green>113</xmpG:green>
                           <xmpG:blue>34</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=192 B=129</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>192</xmpG:green>
                           <xmpG:blue>129</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=235 B=222</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>235</xmpG:green>
                           <xmpG:blue>222</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=205 B=154</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>205</xmpG:green>
                           <xmpG:blue>154</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=219 B=194</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>219</xmpG:green>
                           <xmpG:blue>194</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=205 B=170</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>205</xmpG:green>
                           <xmpG:blue>170</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=222 B=200</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>222</xmpG:green>
                           <xmpG:blue>200</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=245 G=181 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>245</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=173 G=152 B=34</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>173</xmpG:red>
                           <xmpG:green>152</xmpG:green>
                           <xmpG:blue>34</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=231 G=203 B=45</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>231</xmpG:red>
                           <xmpG:green>203</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 G=217 B=124</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>217</xmpG:green>
                           <xmpG:blue>124</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=132 G=174 B=66</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>132</xmpG:red>
                           <xmpG:green>174</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 G=222 B=43</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>222</xmpG:green>
                           <xmpG:blue>43</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=110 G=167 B=32</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>110</xmpG:red>
                           <xmpG:green>167</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=71 G=153 B=155</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>71</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>155</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=189 G=219 B=221</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>189</xmpG:red>
                           <xmpG:green>219</xmpG:green>
                           <xmpG:blue>221</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=195 G=222 B=224</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>195</xmpG:red>
                           <xmpG:green>222</xmpG:green>
                           <xmpG:blue>224</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=175 G=211 B=214</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>175</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>214</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=62 G=143 B=150</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>62</xmpG:red>
                           <xmpG:green>143</xmpG:green>
                           <xmpG:blue>150</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=155 G=200 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>155</xmpG:red>
                           <xmpG:green>200</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=89 G=164 B=171</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>89</xmpG:red>
                           <xmpG:green>164</xmpG:green>
                           <xmpG:blue>171</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=85 G=183 B=197</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>85</xmpG:red>
                           <xmpG:green>183</xmpG:green>
                           <xmpG:blue>197</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=34 G=155 B=173</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>34</xmpG:red>
                           <xmpG:green>155</xmpG:green>
                           <xmpG:blue>173</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=45 G=206 B=231</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>45</xmpG:red>
                           <xmpG:green>206</xmpG:green>
                           <xmpG:blue>231</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=47 G=97 B=105</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>47</xmpG:red>
                           <xmpG:green>97</xmpG:green>
                           <xmpG:blue>105</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=70 G=145 B=157</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>70</xmpG:red>
                           <xmpG:green>145</xmpG:green>
                           <xmpG:blue>157</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=93 G=193 B=209</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>93</xmpG:red>
                           <xmpG:green>193</xmpG:green>
                           <xmpG:blue>209</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 G=207 B=216</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>207</xmpG:green>
                           <xmpG:blue>216</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=221 G=226 B=232</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>221</xmpG:red>
                           <xmpG:green>226</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=80 G=86 B=98</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>80</xmpG:red>
                           <xmpG:green>86</xmpG:green>
                           <xmpG:blue>98</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=99 G=104 B=108</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>99</xmpG:red>
                           <xmpG:green>104</xmpG:green>
                           <xmpG:blue>108</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=171 G=171 B=171</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>171</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>171</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=181 G=181 B=181</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>181</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>181</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=186 G=186 B=186</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>186</xmpG:red>
                           <xmpG:green>186</xmpG:green>
                           <xmpG:blue>186</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=191 G=191 B=191</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>191</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>191</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=213 G=213 B=213</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>213</xmpG:red>
                           <xmpG:green>213</xmpG:green>
                           <xmpG:blue>213</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=220 G=221 B=224</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>220</xmpG:red>
                           <xmpG:green>221</xmpG:green>
                           <xmpG:blue>224</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=225 G=225 B=225</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>225</xmpG:red>
                           <xmpG:green>225</xmpG:green>
                           <xmpG:blue>225</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=237 B=237</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>237</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=238 G=238 B=238</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>238</xmpG:red>
                           <xmpG:green>238</xmpG:green>
                           <xmpG:blue>238</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=241 B=241</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>241</xmpG:green>
                           <xmpG:blue>241</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=245 G=245 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>245</xmpG:red>
                           <xmpG:green>245</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=246 G=246 B=246</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>246</xmpG:green>
                           <xmpG:blue>246</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=250 G=250 B=250</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>250</xmpG:red>
                           <xmpG:green>250</xmpG:green>
                           <xmpG:blue>250</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.623529 .858824 .878431 rgb
f
0 239.214 mo
0 450 li
450 450 li
450 242.322 li
382.809 252.308 310.407 257.752 234.936 257.752 cv
151.967 257.752 72.7031 251.176 0 239.214 cv
cp
.576471 .870588 .168627 rgb
f
234.936 220.752 mo
151.966 220.752 72.7031 214.174 0 202.212 cv
0 239.214 li
72.7031 251.176 151.967 257.752 234.936 257.752 cv
310.407 257.752 382.809 252.308 450 242.322 cv
450 205.323 li
382.81 215.309 310.407 220.752 234.936 220.752 cv
cp
.631373 .870588 .294118 rgb
f
450 450 mo
450 225.368 li
382.809 215.382 310.407 209.938 234.936 209.938 cv
151.967 209.938 72.7031 216.515 0 228.476 cv
0 450 li
450 450 li
cp
.54902 .690196 .32549 rgb
f
450 450 mo
450 252.794 li
383.198 234.798 310.7 224.938 234.936 224.938 cv
151.594 224.938 72.2021 236.867 0 258.435 cv
0 450 li
450 450 li
cp
1 .768627 .0705882 rgb
f
450 450 mo
450 281.185 li
384.852 254.745 311.928 239.938 234.936 239.938 cv
150.017 239.938 70.0456 257.95 0 289.718 cv
0 450 li
450 450 li
cp
.341176 .364706 .419608 rgb
f
313.66 238.81 mo
313.66 246.238 307.619 252.28 300.191 252.28 cv
269.956 252.386 li
269.956 257.777 li
300.191 257.777 li
310.648 257.777 319.156 249.269 319.156 238.811 cv
319.156 216.539 li
313.616 216.539 li
313.66 238.81 li
cp
.278431 .180392 .180392 rgb
f
193.194 367.612 mo
183.427 367.612 li
183.427 222.06 li
193.194 221.947 li
193.194 367.612 li
cp
.223529 .580392 .596078 rgb
f
351.577 378.875 mo
351.441 340.273 li
351.575 340.273 li
351.575 338.773 li
351.575 329.748 358.918 322.405 367.945 322.405 cv
384.396 322.377 li
384.454 338.773 li
384.313 378.88 li
384.313 387.904 376.971 395.247 367.945 395.247 cv
358.92 395.247 351.577 387.904 351.577 378.875 cv
cp
450 312.113 mo
394.605 312.113 li
394.605 298.667 li
394.605 283.968 382.646 272.01 367.947 272.01 cv
300.04 272.01 li
274.072 272.01 li
267.748 282.436 li
300.04 282.393 li
300.04 282.435 li
367.945 282.3 li
376.971 282.3 384.313 289.643 384.313 298.672 cv
384.361 312.113 li
367.942 312.113 li
353.746 312.113 342.109 323.269 341.33 337.273 cv
341.285 337.273 li
341.285 338.771 li
341.285 340.271 li
341.285 378.88 li
341.285 393.077 352.441 404.714 366.447 405.493 cv
366.447 405.537 li
367.943 405.537 li
367.947 405.537 li
369.443 405.537 li
369.443 405.493 li
383.449 404.714 394.605 393.077 394.605 378.88 cv
394.605 340.273 li
394.605 337.273 li
394.605 322.359 li
450 322.265 li
450 312.113 li
cp
.278431 .180392 .180392 rgb
f
266.109 361.448 mo
266.109 373.461 256.338 383.232 244.326 383.232 cv
195.429 383.404 li
195.429 392.123 li
244.326 392.123 li
261.238 392.123 274.998 378.363 274.998 361.45 cv
274.998 280.489 li
265.948 280.489 li
266.109 361.448 li
cp
.223529 .580392 .596078 rgb
f
274.998 361.45 mo
274.998 378.363 261.238 392.123 244.326 392.123 cv
195.429 392.123 li
195.429 383.404 li
244.326 383.232 li
256.338 383.232 266.109 373.461 266.109 361.448 cv
265.948 219.689 li
274.998 220.053 li
274.998 361.45 li
cp
f
396.644 358.855 mo
381.522 358.855 li
381.522 355.075 li
396.644 355.075 li
396.644 358.855 li
cp
.772549 .74902 .709804 rgb
f
354.141 345.419 mo
339.019 345.419 li
339.019 341.639 li
354.141 341.639 li
354.141 345.419 li
cp
f
396.644 299.111 mo
381.522 299.111 li
381.522 295.331 li
396.644 295.331 li
396.644 299.111 li
cp
f
414.107 324.113 mo
414.107 308.992 li
417.888 308.992 li
417.888 324.113 li
414.107 324.113 li
cp
f
432.496 324.113 mo
432.496 308.992 li
436.276 308.992 li
436.276 324.113 li
432.496 324.113 li
cp
f
306.4 384.935 mo
306.342 368.261 li
306.4 368.261 li
306.4 367.613 li
306.4 363.715 309.639 360.543 313.621 360.543 cv
320.877 360.53 li
320.902 367.613 li
320.841 384.936 li
320.841 388.836 317.602 392.007 313.621 392.007 cv
309.641 392.007 306.4 388.836 306.4 384.935 cv
cp
350.486 356.097 mo
325.381 356.097 li
325.381 350.289 li
325.381 343.938 320.105 338.773 313.621 338.773 cv
283.667 338.773 li
272.213 338.773 li
269.423 343.276 li
283.667 343.258 li
283.667 343.276 li
313.621 343.218 li
317.602 343.218 320.841 346.391 320.841 350.29 cv
320.861 356.097 li
313.619 356.097 li
307.357 356.097 302.225 360.915 301.881 366.964 cv
301.861 366.964 li
301.861 367.612 li
301.861 368.261 li
301.861 384.936 li
301.861 391.071 306.781 396.096 312.96 396.434 cv
312.96 396.452 li
313.621 396.452 li
313.621 396.452 li
314.281 396.452 li
314.281 396.434 li
320.459 396.096 325.381 391.071 325.381 384.936 cv
325.381 368.261 li
325.381 366.964 li
325.381 360.521 li
350.486 360.48 li
350.486 356.097 li
cp
.223529 .580392 .596078 rgb
f
327.25 376.712 mo
319.09 376.712 li
319.09 374.714 li
327.25 374.714 li
327.25 376.712 li
cp
.533333 .74902 .756863 rgb
f
308.016 376.712 mo
299.855 376.712 li
299.855 374.714 li
308.016 374.714 li
308.016 376.712 li
cp
f
327.25 350.796 mo
319.09 350.796 li
319.09 348.798 li
327.25 348.798 li
327.25 350.796 li
cp
f
293.436 345.167 mo
293.436 337.006 li
295.435 337.006 li
295.435 345.167 li
293.436 345.167 li
cp
f
312.725 397.688 mo
312.725 390.671 li
314.518 390.671 li
314.518 397.688 li
312.725 397.688 li
cp
f
173.37 413.977 mo
173.37 401.964 183.141 392.192 195.153 392.192 cv
244.051 392.02 li
244.051 383.302 li
195.153 383.302 li
178.241 383.302 164.481 397.061 164.481 413.975 cv
164.481 449.995 li
173.442 449.995 li
173.37 413.977 li
cp
.223529 .580392 .596078 rgb
f
86.6299 114.377 mo
87.3994 114.377 88.0957 114.083 88.6318 113.611 cv
88.999 113.94 89.4756 114.16 90.0088 114.16 cv
90.5352 114.16 91.0034 113.947 91.3691 113.624 cv
91.4829 114.354 92.0845 114.921 92.8477 114.921 cv
93.6885 114.921 94.3716 114.236 94.3716 113.396 cv
94.3716 112.552 93.6885 111.87 92.8477 111.87 cv
92.7896 111.87 92.7383 111.896 92.6821 111.902 cv
93.5034 111.356 94.0454 110.421 94.0454 109.359 cv
94.0454 107.959 93.0972 106.789 91.8081 106.432 cv
91.5571 104.996 90.313 103.906 88.8135 103.906 cv
88.1514 103.906 87.5439 104.121 87.042 104.477 cv
86.4844 103.738 85.6069 103.252 84.6104 103.252 cv
84.5703 103.252 84.5322 103.264 84.4932 103.265 cv
84.4932 103.261 84.4946 103.258 84.4946 103.252 cv
84.4946 102.147 83.6001 101.254 82.499 101.254 cv
81.3926 101.254 80.4971 102.147 80.4971 103.252 cv
80.4971 104.109 81.043 104.825 81.8027 105.109 cv
81.644 105.478 81.5586 105.883 81.5586 106.307 cv
81.5586 107.899 82.7793 109.188 84.3311 109.331 cv
83.8662 109.866 83.5737 110.559 83.5737 111.324 cv
83.5737 113.01 84.9395 114.377 86.6299 114.377 cv
cp
1 1 1 rgb
f
78.7646 97.0361 mo
80.1885 97.0361 81.4761 96.4902 82.4678 95.6182 cv
83.1479 96.2275 84.0303 96.6318 85.0176 96.6318 cv
85.9907 96.6318 86.8569 96.2383 87.5332 95.6406 cv
87.7451 96.9912 88.8574 98.042 90.2686 98.042 cv
91.8252 98.042 93.0898 96.7725 93.0898 95.2188 cv
93.0898 93.6572 91.8252 92.3965 90.2686 92.3965 cv
90.1611 92.3965 90.0674 92.4424 89.9634 92.4551 cv
91.4824 91.4453 92.4854 89.7139 92.4854 87.75 cv
92.4854 85.1582 90.731 82.9951 88.3457 82.3311 cv
87.8809 79.6777 85.5801 77.6611 82.8042 77.6611 cv
81.5791 77.6611 80.4551 78.0566 79.5259 78.7139 cv
78.4946 77.3486 76.8706 76.4502 75.0273 76.4502 cv
74.9546 76.4502 74.8828 76.4707 74.8105 76.4736 cv
74.8105 76.4648 74.8135 76.46 74.8135 76.4502 cv
74.8135 74.4053 73.1577 72.7529 71.1211 72.7529 cv
69.0737 72.7529 67.417 74.4053 67.417 76.4502 cv
67.417 78.0342 68.4272 79.3613 69.8325 79.8867 cv
69.5391 80.5684 69.3813 81.3164 69.3813 82.1016 cv
69.3813 85.0479 71.6396 87.4326 74.5103 87.6973 cv
73.6504 88.6875 73.1094 89.9707 73.1094 91.3857 cv
73.1094 94.5049 75.6357 97.0361 78.7646 97.0361 cv
cp
f
377.994 91.6553 mo
379.049 91.6553 380.004 91.251 380.738 90.6045 cv
381.242 91.0566 381.896 91.3574 382.629 91.3574 cv
383.35 91.3574 383.992 91.0645 384.494 90.6221 cv
384.65 91.623 385.476 92.4023 386.521 92.4023 cv
387.676 92.4023 388.613 91.4609 388.613 90.3086 cv
388.613 89.1504 387.676 88.2158 386.521 88.2158 cv
386.441 88.2158 386.372 88.251 386.295 88.2598 cv
387.422 87.5107 388.165 86.2285 388.165 84.7715 cv
388.165 82.8506 386.865 81.248 385.096 80.7559 cv
384.752 78.7881 383.045 77.292 380.988 77.292 cv
380.08 77.292 379.247 77.5869 378.558 78.0732 cv
377.793 77.0605 376.59 76.3945 375.223 76.3945 cv
375.168 76.3945 375.116 76.4102 375.062 76.4121 cv
375.062 76.4053 375.064 76.4023 375.064 76.3945 cv
375.064 74.8789 373.837 73.6533 372.327 73.6533 cv
370.809 73.6533 369.581 74.8789 369.581 76.3945 cv
369.581 77.5703 370.33 78.5537 371.371 78.9424 cv
371.154 79.4473 371.037 80.002 371.037 80.585 cv
371.037 82.7695 372.711 84.5361 374.84 84.7324 cv
374.203 85.4668 373.801 86.418 373.801 87.4668 cv
373.801 89.7803 375.674 91.6553 377.994 91.6553 cv
cp
.341176 .364706 .419608 rgb
f
100.769 211.499 mo
100.229 201.674 li
99.7505 192.946 li
99.2656 184.088 li
98.7852 175.357 li
98.2432 165.5 li
97.7334 156.439 li
97.2227 147.379 li
96.7139 138.318 li
96.2085 129.375 li
97.8223 129.375 li
97.8223 123.726 li
95.8916 123.726 li
95.6187 118.878 li
92.0879 118.878 li
88.5581 118.878 li
88.2847 123.726 li
86.3535 123.726 li
86.3535 129.375 li
87.9678 129.375 li
87.4629 138.318 li
86.9521 147.379 li
86.4404 156.439 li
85.9321 165.5 li
85.3916 175.357 li
84.9136 184.088 li
84.4287 192.946 li
83.9492 201.674 li
83.4106 211.499 li
82.9497 219.907 li
101.23 219.907 li
100.769 211.499 li
cp
1 1 1 rgb
f
134.078 130.096 mo
134.402 130.096 134.689 129.968 134.915 129.77 cv
134.988 130.218 135.359 130.57 135.831 130.57 cv
136.352 130.57 136.774 130.15 136.774 129.626 cv
136.774 129.102 136.352 128.682 135.831 128.682 cv
135.793 128.682 135.762 128.698 135.727 128.704 cv
136.235 128.365 136.573 127.786 136.573 127.131 cv
136.573 126.266 135.984 125.543 135.191 125.323 cv
135.036 124.435 134.266 123.76 133.335 123.76 cv
132.926 123.76 132.551 123.894 132.243 124.113 cv
131.898 123.654 131.355 123.354 130.739 123.354 cv
130.714 123.354 130.691 123.361 130.666 123.364 cv
130.666 123.36 130.668 123.358 130.668 123.354 cv
130.668 122.674 130.115 122.12 129.433 122.12 cv
128.751 122.12 128.197 122.674 128.197 123.354 cv
128.197 123.886 128.533 124.329 129.003 124.504 cv
128.906 124.731 128.852 124.983 128.852 125.243 cv
128.852 126.229 129.606 127.025 130.567 127.114 cv
130.279 127.443 130.098 127.872 130.098 128.345 cv
130.098 129.39 130.944 130.231 131.985 130.231 cv
132.463 130.231 132.893 130.05 133.227 129.759 cv
133.452 129.964 133.748 130.096 134.078 130.096 cv
cp
.662745 .470588 .25098 rgb
f
142.064 167.684 mo
141.674 160.759 li
141.284 153.835 li
140.894 146.911 li
140.51 140.074 li
141.741 140.074 li
141.741 135.758 li
140.266 135.758 li
140.058 132.055 li
137.359 132.055 li
134.664 132.055 li
134.454 135.758 li
132.977 135.758 li
132.977 140.074 li
134.211 140.074 li
133.826 146.911 li
133.436 153.835 li
133.046 160.759 li
132.657 167.684 li
132.236 219.689 li
136.774 219.689 li
143.655 219.689 li
142.064 167.684 li
cp
f
368.326 127.665 mo
354.526 117.691 li
355.423 116.449 li
369.226 126.423 li
368.326 127.665 li
cp
1 1 1 rgb
f
355.42 137.639 mo
354.524 136.398 li
368.326 126.423 li
369.226 127.665 li
355.42 137.639 li
cp
f
368.325 147.616 mo
354.524 137.639 li
355.42 136.398 li
369.225 146.373 li
368.325 147.616 li
cp
f
355.423 157.596 mo
354.526 156.353 li
368.325 146.373 li
369.225 147.616 li
355.423 157.596 li
cp
f
368.326 167.566 mo
354.526 157.596 li
355.423 156.353 li
369.226 166.326 li
368.326 167.566 li
cp
f
355.423 177.544 mo
354.526 176.304 li
368.326 166.326 li
369.226 167.566 li
355.423 177.544 li
cp
f
368.326 187.514 mo
354.526 177.544 li
355.423 176.304 li
369.226 186.277 li
368.326 187.514 li
cp
f
355.27 201.487 mo
354.187 200.403 li
368.234 186.357 li
369.316 187.436 li
355.27 201.487 li
cp
f
355.299 127.667 mo
354.403 126.426 li
368.204 116.45 li
369.102 117.691 li
355.299 127.667 li
cp
f
368.204 137.642 mo
354.403 127.667 li
355.299 126.426 li
369.102 136.402 li
368.204 137.642 li
cp
f
355.304 147.616 mo
354.404 146.375 li
368.204 136.402 li
369.102 137.642 li
355.304 147.616 li
cp
f
368.204 157.596 mo
354.404 147.616 li
355.304 146.375 li
369.102 156.353 li
368.204 157.596 li
cp
f
355.299 167.566 mo
354.403 166.326 li
368.204 156.353 li
369.102 157.596 li
355.299 167.566 li
cp
f
368.204 177.544 mo
354.403 167.566 li
355.299 166.326 li
369.102 176.304 li
368.204 177.544 li
cp
f
355.299 187.518 mo
354.403 186.277 li
368.204 176.304 li
369.102 177.544 li
355.299 187.518 li
cp
f
368.357 201.487 mo
354.31 187.436 li
355.394 186.357 li
369.441 200.403 li
368.357 201.487 li
cp
f
369.655 201.052 mo
367.651 201.052 li
367.651 115.563 li
369.655 115.563 li
369.655 201.052 li
cp
f
369.655 117.068 mo
353.973 117.068 li
353.973 115.006 li
369.655 115.006 li
369.655 117.068 li
cp
f
353.973 201.052 mo
355.977 201.052 li
355.977 115.563 li
353.973 115.563 li
353.973 201.052 li
cp
f
364.137 116.372 mo
359.613 116.372 li
359.613 105.934 li
364.137 105.934 li
364.137 116.372 li
cp
f
365.754 107.865 mo
357.875 107.865 li
357.875 101.995 li
365.754 101.995 li
365.754 107.865 li
cp
f
291.957 184.32 mo
291.059 184.32 li
281.312 184.32 li
281.312 183.141 li
292.434 172.034 li
301.658 162.811 li
301.964 162.811 li
301.964 184.32 li
291.957 184.32 li
cp
252.417 190.034 mo
249.657 190.034 li
249.657 179.769 li
249.657 174.73 li
249.657 166.897 li
249.657 161.859 li
249.657 161.848 li
249.657 154.054 244.714 147.429 237.797 144.892 cv
237.797 136.125 li
234.086 136.125 li
234.086 132.626 li
233.244 132.626 li
233.244 121.749 li
233.244 117.549 229.83 114.133 225.63 114.133 cv
213.333 114.133 li
213.333 105.835 li
213.333 104.103 214.743 102.697 216.472 102.697 cv
230.54 102.697 li
230.54 102.653 li
264.754 102.653 li
264.754 109.986 li
260.951 109.986 li
260.951 117.786 li
255.334 117.786 li
255.334 144.563 li
255.334 163.814 li
252.417 163.814 li
252.417 190.034 li
cp
209.327 190.034 mo
209.327 180.042 li
209.327 175.005 li
209.327 167.176 li
209.327 162.134 li
209.327 161.848 li
209.327 154.127 204.474 147.554 197.659 144.962 cv
197.659 136.125 li
193.486 136.125 li
193.486 132.626 li
192.58 132.626 li
192.607 121.749 li
192.607 120.019 194.016 118.607 195.744 118.607 cv
225.63 118.607 li
227.358 118.607 228.768 120.019 228.768 121.749 cv
228.662 132.626 li
227.676 132.626 li
227.676 136.125 li
223.958 136.125 li
223.958 144.892 li
217.043 147.429 212.1 154.054 212.1 161.848 cv
212.1 161.859 li
212.1 166.897 li
212.1 174.73 li
212.1 179.769 li
212.1 190.034 li
209.327 190.034 li
cp
257.09 146.841 mo
266.688 159.281 li
276.289 146.838 li
276.289 163.814 li
257.09 163.814 li
257.09 146.841 li
cp
299.219 149.481 mo
302.478 152.739 li
300.111 155.107 li
299.219 155.107 li
299.219 149.481 li
cp
304.848 155.107 mo
301.788 155.107 li
301.598 155.107 li
303.222 153.483 li
304.848 155.107 li
cp
307.226 149.476 mo
307.226 155.107 li
306.332 155.107 li
303.963 152.739 li
307.226 149.476 li
cp
303.222 145.159 mo
307.189 148.027 li
303.222 151.997 li
299.254 148.027 li
303.222 145.159 li
cp
299.219 142.266 mo
302.326 144.514 li
299.219 146.759 li
299.219 142.266 li
cp
299.219 128.583 mo
302.326 130.828 li
299.219 133.072 li
299.219 128.583 li
cp
303.222 102.811 mo
299.426 100.066 li
307.018 100.066 li
303.222 102.811 li
cp
307.226 105.702 mo
304.118 103.458 li
307.226 101.213 li
307.226 105.702 li
cp
307.226 142.266 mo
307.226 146.759 li
304.118 144.514 li
307.226 142.266 li
cp
303.222 138.379 mo
307.018 141.123 li
303.222 143.866 li
299.426 141.123 li
303.222 138.379 li
cp
302.326 137.73 mo
299.219 139.977 li
299.219 135.485 li
302.326 137.73 li
cp
307.102 134.28 mo
303.222 137.084 li
299.341 134.28 li
303.222 131.477 li
307.102 134.28 li
cp
307.226 128.583 mo
307.226 133.072 li
304.118 130.828 li
307.226 128.583 li
cp
303.222 124.693 mo
307.018 127.438 li
303.222 130.181 li
299.426 127.438 li
303.222 124.693 li
cp
302.324 124.047 mo
299.219 126.293 li
299.219 121.802 li
302.324 124.047 li
cp
302.322 110.36 mo
299.219 112.604 li
299.219 108.119 li
302.322 110.36 li
cp
303.219 109.713 mo
299.341 106.909 li
303.222 104.105 li
307.102 106.909 li
303.219 109.713 li
cp
307.226 112.608 mo
304.117 110.361 li
307.226 108.114 li
307.226 112.608 li
cp
307.226 121.798 mo
307.226 126.294 li
304.118 124.047 li
307.226 121.798 li
cp
303.222 117.792 mo
307.096 120.596 li
303.222 123.397 li
299.344 120.596 li
303.222 117.792 li
cp
299.219 114.898 mo
302.326 117.143 li
299.219 119.388 li
299.219 114.898 li
cp
303.222 116.494 mo
299.426 113.751 li
303.219 111.008 li
307.018 113.753 li
303.222 116.494 li
cp
307.226 119.388 mo
304.119 117.143 li
307.226 114.898 li
307.226 119.388 li
cp
307.226 139.977 mo
304.118 137.73 li
307.226 135.485 li
307.226 139.977 li
cp
299.219 101.213 mo
302.326 103.458 li
299.219 105.703 li
299.219 101.213 li
cp
338.657 124.933 mo
338.657 120.87 li
338.657 118.391 336.652 116.379 334.172 116.379 cv
331.697 116.379 329.687 118.391 329.687 120.87 cv
329.687 124.933 li
329.049 124.933 li
328.406 124.933 li
328.406 120.87 li
328.406 118.391 326.397 116.379 323.924 116.379 cv
321.443 116.379 319.434 118.391 319.434 120.87 cv
319.434 124.933 li
315.464 124.933 li
315.464 155.107 li
308.598 155.107 li
308.598 100.066 li
308.598 99.0342 li
308.598 98.6523 li
304.815 98.6523 li
304.815 93.7549 li
305.924 93.7549 li
305.924 89.7275 li
300.519 89.7275 li
300.519 93.7549 li
301.713 93.7549 li
301.713 98.6523 li
297.844 98.6523 li
297.844 99.0342 li
297.844 100.066 li
297.844 155.107 li
295.004 155.107 li
294.711 155.425 li
285.269 164.866 li
281.312 168.822 li
281.312 163.814 li
278.045 163.814 li
278.045 145.076 li
281.738 145.076 li
281.738 147.238 li
282.963 147.238 li
282.963 120.814 li
281.738 120.814 li
281.738 123.099 li
278.045 123.099 li
278.045 124.601 li
281.738 124.601 li
281.738 126.51 li
278.045 126.51 li
278.045 128.014 li
281.738 128.014 li
281.738 129.922 li
278.045 129.922 li
278.045 131.427 li
281.738 131.427 li
281.738 133.334 li
278.045 133.334 li
278.045 134.84 li
281.738 134.84 li
281.738 136.747 li
278.045 136.747 li
278.045 138.251 li
281.738 138.251 li
281.738 140.16 li
278.045 140.16 li
278.045 141.662 li
281.738 141.662 li
281.738 143.572 li
278.045 143.572 li
278.045 144.563 li
278.043 144.563 li
278.043 129.599 li
278.043 123.153 li
278.043 117.786 li
272.326 117.786 li
272.326 109.986 li
268.623 109.986 li
268.623 102.653 li
268.623 99.1348 li
268.623 98.2227 li
230.54 98.2227 li
216.472 98.2227 li
212.273 98.2227 208.858 101.636 208.858 105.835 cv
208.858 114.133 li
195.744 114.133 li
191.545 114.133 188.131 117.549 188.131 121.749 cv
188.131 132.626 li
187.075 132.626 li
187.075 136.125 li
183.823 136.125 li
183.823 144.82 li
176.803 147.303 171.766 153.978 171.766 161.848 cv
171.766 162.134 li
171.766 167.176 li
171.766 175.005 li
171.766 180.042 li
171.766 190.034 li
147.635 190.034 li
147.635 196.271 li
171.766 196.271 li
213.821 207.805 li
281.312 196.271 li
281.312 192.831 li
291.059 192.831 li
291.957 192.831 li
301.964 192.831 li
301.964 196.271 li
315.464 196.271 li
315.548 196.271 li
328.729 196.271 li
329.049 196.271 li
342.631 204.903 li
342.631 160.602 li
342.631 124.933 li
338.657 124.933 li
cp
f
174.57 132.107 mo
171.374 132.107 li
168.18 132.107 li
165.304 190.994 li
171.374 190.994 li
177.444 190.994 li
174.57 132.107 li
cp
.870588 .490196 0 rgb
f
192.263 132.107 mo
189.067 132.107 li
185.874 132.107 li
182.996 190.994 li
189.067 190.994 li
195.141 190.994 li
192.263 132.107 li
cp
f
209.589 132.107 mo
206.393 132.107 li
203.199 132.107 li
200.32 190.994 li
206.393 190.994 li
212.464 190.994 li
209.589 132.107 li
cp
f
181.125 142.345 mo
163.489 169.192 li
163.489 219.705 li
181.125 219.705 li
181.125 142.345 li
cp
.278431 .180392 .180392 rgb
f
198.767 142.345 mo
181.125 169.192 li
181.125 219.705 li
198.767 219.705 li
198.767 142.345 li
cp
f
216.405 142.345 mo
198.767 169.192 li
198.767 219.705 li
216.405 219.705 li
216.405 142.345 li
cp
f
168.346 126.946 mo
168.346 128.373 167.189 129.526 165.765 129.526 cv
164.341 129.526 163.185 128.373 163.185 126.946 cv
163.185 125.523 164.341 124.367 165.765 124.367 cv
167.189 124.367 168.346 125.523 168.346 126.946 cv
cp
1 1 1 rgb
f
172.031 125.288 mo
172.031 126.714 170.876 127.866 169.453 127.866 cv
168.028 127.866 166.871 126.714 166.871 125.288 cv
166.871 123.864 168.028 122.71 169.453 122.71 cv
170.876 122.71 172.031 123.864 172.031 125.288 cv
cp
f
170.372 127.593 mo
170.372 128.561 169.589 129.343 168.622 129.343 cv
167.656 129.343 166.871 128.561 166.871 127.593 cv
166.871 126.628 167.656 125.842 168.622 125.842 cv
169.589 125.842 170.372 126.628 170.372 127.593 cv
cp
f
166.641 122.71 mo
166.641 124.133 165.484 125.288 164.061 125.288 cv
162.636 125.288 161.48 124.133 161.48 122.71 cv
161.48 121.281 162.636 120.13 164.061 120.13 cv
165.484 120.13 166.641 121.281 166.641 122.71 cv
cp
f
170.187 123.263 mo
170.187 124.688 169.033 125.842 167.608 125.842 cv
166.185 125.842 165.029 124.688 165.029 123.263 cv
165.029 121.836 166.185 120.681 167.608 120.681 cv
169.033 120.681 170.187 121.836 170.187 123.263 cv
cp
f
163.962 120.13 mo
163.962 121.063 163.208 121.814 162.275 121.814 cv
161.343 121.814 160.586 121.063 160.586 120.13 cv
160.586 119.197 161.343 118.44 162.275 118.44 cv
163.208 118.44 163.962 119.197 163.962 120.13 cv
cp
f
172.308 128.698 mo
172.308 129.408 171.729 129.985 171.018 129.985 cv
170.308 129.985 169.73 129.408 169.73 128.698 cv
169.73 127.986 170.308 127.409 171.018 127.409 cv
171.729 127.409 172.308 127.986 172.308 128.698 cv
cp
f
185.981 127.1 mo
185.981 128.524 184.829 129.68 183.403 129.68 cv
181.979 129.68 180.825 128.524 180.825 127.1 cv
180.825 125.677 181.979 124.52 183.403 124.52 cv
184.829 124.52 185.981 125.677 185.981 127.1 cv
cp
.341176 .364706 .419608 rgb
f
189.669 125.442 mo
189.669 126.866 188.513 128.02 187.089 128.02 cv
185.666 128.02 184.509 126.866 184.509 125.442 cv
184.509 124.017 185.666 122.863 187.089 122.863 cv
188.513 122.863 189.669 124.017 189.669 125.442 cv
cp
f
188.011 127.746 mo
188.011 128.711 187.226 129.495 186.26 129.495 cv
185.296 129.495 184.509 128.711 184.509 127.746 cv
184.509 126.78 185.296 125.996 186.26 125.996 cv
187.226 125.996 188.011 126.78 188.011 127.746 cv
cp
f
184.278 122.863 mo
184.278 124.287 183.123 125.442 181.696 125.442 cv
180.275 125.442 179.119 124.287 179.119 122.863 cv
179.119 121.437 180.275 120.282 181.696 120.282 cv
183.123 120.282 184.278 121.437 184.278 122.863 cv
cp
f
187.827 123.416 mo
187.827 124.841 186.662 125.859 185.246 125.996 cv
182.151 126.295 182.279 124.91 182.667 123.416 cv
183.025 122.035 183.819 120.835 185.246 120.835 cv
186.669 120.835 187.827 121.989 187.827 123.416 cv
cp
f
181.6 120.282 mo
181.6 121.214 180.843 121.968 179.914 121.968 cv
178.981 121.968 178.227 121.214 178.227 120.282 cv
178.227 119.348 178.981 118.594 179.914 118.594 cv
180.843 118.594 181.6 119.348 181.6 120.282 cv
cp
f
189.945 128.852 mo
189.945 129.564 189.368 130.14 188.657 130.14 cv
187.943 130.14 187.366 129.564 187.366 128.852 cv
187.366 128.139 187.943 127.562 188.657 127.562 cv
189.368 127.562 189.945 128.139 189.945 128.852 cv
cp
f
202.896 127.255 mo
202.896 128.678 201.744 129.832 200.318 129.832 cv
198.894 129.832 197.74 128.678 197.74 127.255 cv
197.74 125.831 198.894 124.675 200.318 124.675 cv
201.744 124.675 202.896 125.831 202.896 127.255 cv
cp
f
206.582 125.596 mo
206.582 127.019 205.427 128.176 204.004 128.176 cv
202.579 128.176 201.422 127.019 201.422 125.596 cv
201.422 124.171 202.579 123.015 204.004 123.015 cv
205.427 123.015 206.582 124.171 206.582 125.596 cv
cp
f
204.925 127.899 mo
204.925 128.866 204.141 129.647 203.172 129.647 cv
202.208 129.647 201.422 128.866 201.422 127.899 cv
201.422 126.935 202.208 126.148 203.172 126.148 cv
204.141 126.148 204.925 126.935 204.925 127.899 cv
cp
f
201.191 123.015 mo
201.191 124.441 200.037 125.596 198.612 125.596 cv
197.186 125.596 196.033 124.441 196.033 123.015 cv
196.033 121.591 197.186 120.436 198.612 120.436 cv
200.037 120.436 201.191 121.591 201.191 123.015 cv
cp
f
204.74 123.567 mo
204.74 124.995 203.584 126.148 202.16 126.148 cv
200.736 126.148 199.581 124.995 199.581 123.567 cv
199.581 122.144 200.736 120.99 202.16 120.99 cv
203.584 120.99 204.74 122.144 204.74 123.567 cv
cp
f
198.515 120.436 mo
198.515 121.368 197.76 122.12 196.828 122.12 cv
195.897 122.12 195.141 121.368 195.141 120.436 cv
195.141 119.501 195.897 118.747 196.828 118.747 cv
197.76 118.747 198.515 119.501 198.515 120.436 cv
cp
f
206.859 129.005 mo
206.859 129.718 206.283 130.292 205.571 130.292 cv
204.858 130.292 204.28 129.718 204.28 129.005 cv
204.28 128.291 204.858 127.714 205.571 127.714 cv
206.283 127.714 206.859 128.291 206.859 129.005 cv
cp
f
279.687 184.684 mo
282.826 184.684 li
282.826 195.29 li
279.687 195.29 li
279.687 184.684 li
cp
0 .588235 .639216 rgb
f
284.623 190.923 mo
284.623 192.488 li
266.222 192.488 li
266.222 190.923 li
284.623 190.923 li
cp
f
268.019 184.684 mo
271.154 184.684 li
271.154 195.29 li
268.019 195.29 li
268.019 184.684 li
cp
f
274.187 184.684 mo
277.322 184.684 li
277.322 195.29 li
274.187 195.29 li
274.187 184.684 li
cp
f
264.219 187.027 mo
263.217 187.027 li
263.217 165.329 li
264.219 165.329 li
264.219 187.027 li
cp
f
267.254 168.44 mo
263.719 168.44 li
263.719 167.205 li
267.254 167.205 li
267.254 168.44 li
cp
f
267.254 171.241 mo
263.719 171.241 li
263.719 170.008 li
267.254 170.008 li
267.254 171.241 li
cp
f
267.254 174.042 mo
263.719 174.042 li
263.719 172.81 li
267.254 172.81 li
267.254 174.042 li
cp
f
267.254 176.847 mo
263.719 176.847 li
263.719 175.612 li
267.254 175.612 li
267.254 176.847 li
cp
f
267.254 179.648 mo
263.719 179.648 li
263.719 178.412 li
267.254 178.412 li
267.254 179.648 li
cp
f
267.254 182.451 mo
263.719 182.451 li
263.719 181.213 li
267.254 181.213 li
267.254 182.451 li
cp
f
267.254 185.249 mo
263.719 185.249 li
263.719 184.015 li
267.254 184.015 li
267.254 185.249 li
cp
f
253.668 184.684 mo
256.805 184.684 li
256.805 195.29 li
253.668 195.29 li
253.668 184.684 li
cp
f
258.599 190.923 mo
258.599 192.488 li
240.203 192.488 li
240.203 190.923 li
258.599 190.923 li
cp
f
241.998 184.684 mo
245.133 184.684 li
245.133 195.29 li
241.998 195.29 li
241.998 184.684 li
cp
f
248.164 184.684 mo
251.302 184.684 li
251.302 195.29 li
248.164 195.29 li
248.164 184.684 li
cp
f
238.273 186.359 mo
237.269 186.359 li
237.269 164.662 li
238.273 164.662 li
238.273 186.359 li
cp
f
241.307 167.774 mo
237.77 167.774 li
237.77 166.538 li
241.307 166.538 li
241.307 167.774 li
cp
f
241.307 170.574 mo
237.77 170.574 li
237.77 169.34 li
241.307 169.34 li
241.307 170.574 li
cp
f
241.307 173.377 mo
237.77 173.377 li
237.77 172.143 li
241.307 172.143 li
241.307 173.377 li
cp
f
241.307 176.18 mo
237.77 176.18 li
237.77 174.945 li
241.307 174.945 li
241.307 176.18 li
cp
f
241.307 178.981 mo
237.77 178.981 li
237.77 177.746 li
241.307 177.746 li
241.307 178.981 li
cp
f
241.307 181.782 mo
237.77 181.782 li
237.77 180.548 li
241.307 180.548 li
241.307 181.782 li
cp
f
241.307 184.583 mo
237.77 184.583 li
237.77 183.352 li
241.307 183.352 li
241.307 184.583 li
cp
f
303.043 138.45 mo
265.831 138.45 li
265.831 134.183 li
303.043 134.183 li
303.043 138.45 li
cp
.870588 .490196 0 rgb
f
266.222 164.662 mo
284.623 164.662 li
284.623 186.359 li
266.222 186.359 li
266.222 164.662 li
cp
1 .768627 .0705882 rgb
f
275.423 152.741 mo
266.222 164.662 li
275.423 164.662 li
284.623 164.662 li
275.423 152.741 li
cp
f
240.203 164.662 mo
240.203 186.359 li
258.599 186.359 li
258.599 164.662 li
249.402 152.741 li
240.203 164.662 li
cp
f
382.387 154.718 mo
389.146 154.718 li
395.907 154.718 li
395.352 144.878 li
382.943 144.878 li
382.387 154.718 li
cp
.870588 .490196 0 rgb
f
392.704 97.8838 mo
389.146 97.8838 li
385.589 97.8838 li
384.486 117.48 li
393.808 117.48 li
392.704 97.8838 li
cp
f
382.943 144.878 mo
395.352 144.878 li
394.839 135.747 li
383.455 135.747 li
382.943 144.878 li
cp
.117647 .537255 .654902 rgb
f
383.971 126.612 mo
383.455 135.747 li
394.839 135.747 li
394.324 126.612 li
383.971 126.612 li
cp
.870588 .490196 0 rgb
f
393.808 117.48 mo
384.486 117.48 li
383.971 126.612 li
394.324 126.612 li
393.808 117.48 li
cp
.117647 .537255 .654902 rgb
f
394.926 108.463 mo
383.365 108.463 li
383.365 102.771 li
394.926 102.771 li
394.926 108.463 li
cp
f
339.787 219.705 mo
293.359 219.705 li
293.359 158.601 li
339.787 158.601 li
339.787 219.705 li
cp
0 .588235 .639216 rgb
f
399.497 219.705 mo
379.098 219.705 li
379.098 152.597 li
399.497 152.597 li
399.497 219.705 li
cp
f
293.359 219.705 mo
215.591 219.689 li
215.591 207.145 li
228.377 195.157 li
293.359 195.157 li
293.359 219.705 li
cp
f
251.517 155.827 mo
247.247 155.827 li
247.247 150.099 li
247.247 147.004 249.768 144.483 252.863 144.483 cv
271.679 144.483 li
271.679 148.753 li
252.863 148.753 li
252.121 148.753 251.517 149.358 251.517 150.099 cv
251.517 155.827 li
cp
.870588 .490196 0 rgb
f
264.935 145.527 mo
260.667 145.527 li
260.667 139.799 li
260.667 136.701 263.185 134.183 266.283 134.183 cv
276.261 134.183 li
276.261 138.45 li
266.283 138.45 li
265.539 138.45 264.935 139.057 264.935 139.799 cv
264.935 145.527 li
cp
f
277.827 155.827 mo
273.559 155.827 li
273.559 150.099 li
273.559 149.358 272.953 148.753 272.211 148.753 cv
253.394 148.753 li
253.394 144.483 li
272.211 144.483 li
275.307 144.483 277.827 147.004 277.827 150.099 cv
277.827 155.827 li
cp
f
332.041 158.601 mo
297.49 158.601 li
297.49 129.695 li
332.041 129.695 li
332.041 158.601 li
cp
0 .588235 .639216 rgb
f
234.885 202.034 mo
230.025 202.034 li
230.025 199.436 li
234.885 199.436 li
234.885 202.034 li
cp
.823529 .839216 .85098 rgb
f
242.824 202.034 mo
237.965 202.034 li
237.965 199.436 li
242.824 199.436 li
242.824 202.034 li
cp
f
250.764 202.034 mo
245.904 202.034 li
245.904 199.436 li
250.764 199.436 li
250.764 202.034 li
cp
f
258.704 202.034 mo
253.845 202.034 li
253.845 199.436 li
258.704 199.436 li
258.704 202.034 li
cp
f
266.643 202.034 mo
261.784 202.034 li
261.784 199.436 li
266.643 199.436 li
266.643 202.034 li
cp
f
274.584 202.034 mo
269.725 202.034 li
269.725 199.436 li
274.584 199.436 li
274.584 202.034 li
cp
f
282.523 202.034 mo
277.664 202.034 li
277.664 199.436 li
282.523 199.436 li
282.523 202.034 li
cp
f
290.461 202.034 mo
285.603 202.034 li
285.603 199.436 li
290.461 199.436 li
290.461 202.034 li
cp
f
234.885 209.35 mo
230.025 209.35 li
230.025 206.757 li
234.885 206.757 li
234.885 209.35 li
cp
f
242.824 209.35 mo
237.965 209.35 li
237.965 206.757 li
242.824 206.757 li
242.824 209.35 li
cp
f
250.764 209.35 mo
245.904 209.35 li
245.904 206.757 li
250.764 206.757 li
250.764 209.35 li
cp
f
258.704 209.35 mo
253.845 209.35 li
253.845 206.757 li
258.704 206.757 li
258.704 209.35 li
cp
f
266.643 209.35 mo
261.784 209.35 li
261.784 206.757 li
266.643 206.757 li
266.643 209.35 li
cp
f
274.584 209.35 mo
269.725 209.35 li
269.725 206.757 li
274.584 206.757 li
274.584 209.35 li
cp
f
282.523 209.35 mo
277.664 209.35 li
277.664 206.757 li
282.523 206.757 li
282.523 209.35 li
cp
f
290.461 209.35 mo
285.603 209.35 li
285.603 206.757 li
290.461 206.757 li
290.461 209.35 li
cp
f
234.885 216.668 mo
230.025 216.668 li
230.025 214.069 li
234.885 214.069 li
234.885 216.668 li
cp
f
242.824 216.668 mo
237.965 216.668 li
237.965 214.069 li
242.824 214.069 li
242.824 216.668 li
cp
f
250.764 216.668 mo
245.904 216.668 li
245.904 214.069 li
250.764 214.069 li
250.764 216.668 li
cp
f
258.704 216.668 mo
253.845 216.668 li
253.845 214.069 li
258.704 214.069 li
258.704 216.668 li
cp
f
266.643 216.668 mo
261.784 216.668 li
261.784 214.069 li
266.643 214.069 li
266.643 216.668 li
cp
f
274.584 216.668 mo
269.725 216.668 li
269.725 214.069 li
274.584 214.069 li
274.584 216.668 li
cp
f
282.523 216.668 mo
277.664 216.668 li
277.664 214.069 li
282.523 214.069 li
282.523 216.668 li
cp
f
290.461 216.668 mo
285.603 216.668 li
285.603 214.069 li
290.461 214.069 li
290.461 216.668 li
cp
f
359.859 192.398 mo
340.235 192.398 li
340.235 183.352 li
359.859 183.352 li
359.859 192.398 li
cp
f
340.768 191.863 mo
359.324 191.863 li
359.324 183.883 li
340.768 183.883 li
340.768 191.863 li
cp
360.394 192.931 mo
339.702 192.931 li
339.702 182.815 li
360.394 182.815 li
360.394 192.931 li
cp
0 .588235 .639216 rgb
f
340.595 192.79 mo
339.874 192.007 li
349.687 182.958 li
350.408 183.742 li
340.595 192.79 li
cp
f
359.497 192.79 mo
349.687 183.742 li
350.408 182.958 li
360.222 192.007 li
359.497 192.79 li
cp
f
379.488 192.398 mo
359.859 192.398 li
359.859 183.352 li
379.488 183.352 li
379.488 192.398 li
cp
.823529 .839216 .85098 rgb
f
360.394 191.863 mo
378.951 191.863 li
378.951 183.883 li
360.394 183.883 li
360.394 191.863 li
cp
380.019 192.931 mo
359.324 192.931 li
359.324 182.815 li
380.019 182.815 li
380.019 192.931 li
cp
0 .588235 .639216 rgb
f
360.222 192.79 mo
359.497 192.007 li
369.31 182.958 li
370.034 183.742 li
360.222 192.79 li
cp
f
379.125 192.79 mo
369.31 183.742 li
370.034 182.958 li
379.848 192.007 li
379.125 192.79 li
cp
f
331.77 121.602 mo
323.828 121.602 li
315.893 121.602 li
315.893 129.695 li
331.77 129.695 li
339.707 121.602 li
331.77 121.602 li
cp
.823529 .839216 .85098 rgb
f
373.484 155.503 mo
362.258 144.277 li
351.033 133.048 li
339.803 121.823 li
332.041 129.59 li
343.264 140.815 li
354.492 152.041 li
365.719 163.268 li
379.098 176.927 li
379.098 161.114 li
373.484 155.503 li
cp
f
366.821 163.632 mo
378.563 161.741 li
378.563 175.616 li
366.821 163.632 li
cp
344.381 141.176 mo
356.002 139.305 li
354.131 150.927 li
344.381 141.176 li
cp
317.162 129.161 mo
323.828 122.362 li
330.498 129.161 li
317.162 129.161 li
cp
316.425 122.135 mo
322.559 122.135 li
318.886 125.881 li
316.425 128.389 li
316.425 122.135 li
cp
331.234 128.389 mo
325.102 122.135 li
331.234 122.135 li
331.234 128.389 li
cp
332.302 128.389 mo
332.302 122.135 li
338.435 122.135 li
332.302 128.389 li
cp
346.773 136.556 mo
344.053 139.272 li
345.779 128.552 li
350.277 133.048 li
346.773 136.556 li
cp
344.772 128.08 mo
342.903 139.698 li
333.154 129.952 li
344.772 128.08 li
cp
339.803 122.577 mo
344.301 127.075 li
333.584 128.8 li
339.803 122.577 li
cp
351.033 133.804 mo
355.529 138.301 li
344.81 140.027 li
347.525 137.31 li
351.033 133.804 li
cp
366.508 161.726 mo
368.234 151.004 li
372.728 155.501 li
366.508 161.726 li
cp
373.484 156.257 mo
377.983 160.754 li
367.264 162.477 li
373.484 156.257 li
cp
356.036 151.253 mo
362.258 145.03 li
366.756 149.525 li
356.036 151.253 li
cp
367.228 150.533 mo
365.356 162.154 li
355.609 152.404 li
367.228 150.533 li
cp
357.996 147.782 mo
355.279 150.496 li
357.006 139.776 li
361.505 144.277 li
357.996 147.782 li
cp
379.631 160.893 mo
373.484 154.746 li
373.484 154.747 li
363.014 144.277 li
363.014 144.277 li
351.787 133.048 li
351.787 133.048 li
351.537 132.798 li
351.033 132.294 li
351.033 132.294 li
339.803 121.068 li
339.736 121.137 li
339.707 121.068 li
331.77 121.068 li
323.828 121.068 li
315.893 121.068 li
315.357 121.602 li
315.357 129.695 li
315.732 129.848 li
315.893 130.227 li
331.77 130.227 li
331.817 130.12 li
343.264 141.57 li
353.737 152.041 li
354.492 152.796 li
365.275 163.581 li
379.631 178.231 li
379.631 160.893 li
cp
0 .588235 .639216 rgb
f
379.631 176.927 mo
378.563 176.927 li
378.563 161.114 li
379.631 161.114 li
379.631 176.927 li
cp
f
302.302 177.802 mo
297.889 177.802 li
297.889 168.121 li
302.302 168.121 li
302.302 177.802 li
cp
.823529 .839216 .85098 rgb
f
308.096 177.802 mo
303.68 177.802 li
303.68 168.121 li
308.096 168.121 li
308.096 177.802 li
cp
f
315.884 177.802 mo
311.471 177.802 li
311.471 168.121 li
315.884 168.121 li
315.884 177.802 li
cp
f
321.675 177.802 mo
317.262 177.802 li
317.262 168.121 li
321.675 168.121 li
321.675 177.802 li
cp
f
329.297 177.802 mo
324.885 177.802 li
324.885 168.121 li
329.297 168.121 li
329.297 177.802 li
cp
f
335.09 177.802 mo
330.678 177.802 li
330.678 168.121 li
335.09 168.121 li
335.09 177.802 li
cp
f
302.387 193.992 mo
297.973 193.992 li
297.973 184.313 li
302.387 184.313 li
302.387 193.992 li
cp
f
308.18 193.992 mo
303.765 193.992 li
303.765 184.313 li
308.18 184.313 li
308.18 193.992 li
cp
f
315.968 193.992 mo
311.553 193.992 li
311.553 184.313 li
315.968 184.313 li
315.968 193.992 li
cp
f
321.758 193.992 mo
317.345 193.992 li
317.345 184.313 li
321.758 184.313 li
321.758 193.992 li
cp
f
329.381 193.992 mo
324.967 193.992 li
324.967 184.313 li
329.381 184.313 li
329.381 193.992 li
cp
f
335.176 193.992 mo
330.76 193.992 li
330.76 184.313 li
335.176 184.313 li
335.176 193.992 li
cp
f
302.471 210.19 mo
298.056 210.19 li
298.056 200.507 li
302.471 200.507 li
302.471 210.19 li
cp
f
308.262 210.19 mo
303.848 210.19 li
303.848 200.507 li
308.262 200.507 li
308.262 210.19 li
cp
f
316.051 210.19 mo
311.636 210.19 li
311.636 200.507 li
316.051 200.507 li
316.051 210.19 li
cp
f
321.84 210.19 mo
317.428 210.19 li
317.428 200.507 li
321.84 200.507 li
321.84 210.19 li
cp
f
329.467 210.19 mo
325.053 210.19 li
325.053 200.507 li
329.467 200.507 li
329.467 210.19 li
cp
f
335.257 210.19 mo
330.846 210.19 li
330.846 200.507 li
335.257 200.507 li
335.257 210.19 li
cp
f
388.524 193.492 mo
384.113 193.492 li
384.113 187.874 li
388.524 187.874 li
388.524 193.492 li
cp
f
394.316 193.492 mo
389.904 193.492 li
389.904 187.874 li
394.316 187.874 li
394.316 193.492 li
cp
f
388.605 202.89 mo
384.194 202.89 li
384.194 197.272 li
388.605 197.272 li
388.605 202.89 li
cp
f
394.398 202.89 mo
389.986 202.89 li
389.986 197.272 li
394.398 197.272 li
394.398 202.89 li
cp
f
388.691 212.292 mo
384.277 212.292 li
384.277 206.675 li
388.691 206.675 li
388.691 212.292 li
cp
f
394.482 212.292 mo
390.068 212.292 li
390.068 206.675 li
394.482 206.675 li
394.482 212.292 li
cp
f
388.524 165.633 mo
384.113 165.633 li
384.113 160.015 li
388.524 160.015 li
388.524 165.633 li
cp
f
394.316 165.633 mo
389.904 165.633 li
389.904 160.015 li
394.316 160.015 li
394.316 165.633 li
cp
f
388.605 175.032 mo
384.194 175.032 li
384.194 169.411 li
388.605 169.411 li
388.605 175.032 li
cp
f
394.398 175.032 mo
389.986 175.032 li
389.986 169.411 li
394.398 169.411 li
394.398 175.032 li
cp
f
388.691 184.431 mo
384.277 184.431 li
384.277 178.811 li
388.691 178.811 li
388.691 184.431 li
cp
f
394.482 184.431 mo
390.068 184.431 li
390.068 178.811 li
394.482 178.811 li
394.482 184.431 li
cp
f
258.599 169.625 mo
240.203 169.625 li
240.203 164.686 li
258.599 164.686 li
258.599 169.625 li
cp
.709804 .709804 .709804 rgb
f
258.599 181.45 mo
240.203 181.45 li
240.203 176.511 li
258.599 176.511 li
258.599 181.45 li
cp
f
284.623 169.583 mo
266.222 169.583 li
266.222 164.647 li
284.623 164.647 li
284.623 169.583 li
cp
f
284.623 181.405 mo
266.222 181.405 li
266.222 176.47 li
284.623 176.47 li
284.623 181.405 li
cp
f
379.098 219.705 mo
339.787 219.705 li
339.787 199.972 li
379.098 199.972 li
379.098 219.705 li
cp
0 .588235 .639216 rgb
f
359.043 217.929 mo
348.903 217.929 li
348.903 205.348 li
359.043 205.348 li
359.043 217.929 li
cp
.823529 .839216 .85098 rgb
f
369.983 217.929 mo
359.844 217.929 li
359.844 205.348 li
369.983 205.348 li
369.983 217.929 li
cp
f
303.202 123.941 mo
301.518 123.941 300.154 125.309 300.154 126.993 cv
300.154 129.757 li
306.252 129.757 li
306.252 126.993 li
306.252 125.309 304.885 123.941 303.202 123.941 cv
cp
0 .588235 .639216 rgb
f
313.221 126.993 mo
313.221 125.309 311.855 123.941 310.17 123.941 cv
308.488 123.941 307.123 125.309 307.123 126.993 cv
307.123 129.757 li
313.221 129.757 li
313.221 126.993 li
cp
f
326.788 136.317 mo
302.74 136.317 li
302.74 134.183 li
326.788 134.183 li
326.788 136.317 li
cp
.823529 .839216 .85098 rgb
f
326.788 141.377 mo
302.74 141.377 li
302.74 139.243 li
326.788 139.243 li
326.788 141.377 li
cp
f
326.788 146.439 mo
302.74 146.439 li
302.74 144.304 li
326.788 144.304 li
326.788 146.439 li
cp
f
326.788 151.501 mo
302.74 151.501 li
302.74 149.364 li
326.788 149.364 li
326.788 151.501 li
cp
f
90.6631 214.194 mo
89.479 214.194 li
89.479 165.944 li
90.6631 165.944 li
90.6631 214.194 li
cp
.278431 .180392 .180392 rgb
f
90.0723 210.387 mo
90.0723 209.2 li
94.3862 209.2 li
94.3862 210.387 li
90.0723 210.387 li
cp
f
90.0723 205.954 mo
90.0723 204.765 li
94.3862 204.765 li
94.3862 205.954 li
90.0723 205.954 li
cp
f
90.0723 201.513 mo
90.0723 200.33 li
94.3862 200.33 li
94.3862 201.513 li
90.0723 201.513 li
cp
f
90.0723 197.077 mo
90.0723 195.894 li
94.3862 195.894 li
94.3862 197.077 li
90.0723 197.077 li
cp
f
90.0723 192.643 mo
90.0723 191.455 li
94.3862 191.455 li
94.3862 192.643 li
90.0723 192.643 li
cp
f
90.0723 188.205 mo
90.0723 187.019 li
94.3862 187.019 li
94.3862 188.205 li
90.0723 188.205 li
cp
f
90.0723 183.77 mo
90.0723 182.583 li
94.3862 182.583 li
94.3862 183.77 li
90.0723 183.77 li
cp
f
90.0723 179.332 mo
90.0723 178.144 li
94.3862 178.144 li
94.3862 179.332 li
90.0723 179.332 li
cp
f
90.0723 174.895 mo
90.0723 173.711 li
94.3862 173.711 li
94.3862 174.895 li
90.0723 174.895 li
cp
f
90.0723 170.46 mo
90.0723 169.271 li
94.3862 169.271 li
94.3862 170.46 li
90.0723 170.46 li
cp
f
59.041 200.447 mo
57.8564 200.447 li
57.8564 152.195 li
59.041 152.195 li
59.041 200.447 li
cp
f
58.4497 196.637 mo
58.4497 195.452 li
62.7656 195.452 li
62.7656 196.637 li
58.4497 196.637 li
cp
f
58.4497 192.201 mo
58.4497 191.017 li
62.7656 191.017 li
62.7656 192.201 li
58.4497 192.201 li
cp
f
58.4497 187.764 mo
58.4497 186.575 li
62.7656 186.575 li
62.7656 187.764 li
58.4497 187.764 li
cp
f
58.4497 183.327 mo
58.4497 182.143 li
62.7656 182.143 li
62.7656 183.327 li
58.4497 183.327 li
cp
f
58.4497 178.893 mo
58.4497 177.705 li
62.7656 177.705 li
62.7656 178.893 li
58.4497 178.893 li
cp
f
58.4497 174.455 mo
58.4497 173.271 li
62.7656 173.271 li
62.7656 174.455 li
58.4497 174.455 li
cp
f
58.4497 170.019 mo
58.4497 168.833 li
62.7656 168.833 li
62.7656 170.019 li
58.4497 170.019 li
cp
f
58.4497 165.582 mo
58.4497 164.396 li
62.7656 164.396 li
62.7656 165.582 li
58.4497 165.582 li
cp
f
58.4497 161.144 mo
58.4497 159.964 li
62.7656 159.964 li
62.7656 161.144 li
58.4497 161.144 li
cp
f
58.4497 156.709 mo
58.4497 155.524 li
62.7656 155.524 li
62.7656 156.709 li
58.4497 156.709 li
cp
f
77.4067 199.02 mo
77.4067 197.76 li
81.7236 197.76 li
81.7236 199.02 li
77.4067 199.02 li
cp
f
77.4067 194.306 mo
77.4067 193.047 li
81.7236 193.047 li
81.7236 194.306 li
77.4067 194.306 li
cp
f
77.4067 189.592 mo
77.4067 188.337 li
81.7236 188.337 li
81.7236 189.592 li
77.4067 189.592 li
cp
f
77.4067 184.882 mo
77.4067 183.627 li
81.7236 183.627 li
81.7236 184.882 li
77.4067 184.882 li
cp
f
77.4067 180.168 mo
77.4067 178.912 li
81.7236 178.912 li
81.7236 180.168 li
77.4067 180.168 li
cp
f
77.4067 175.46 mo
77.4067 174.202 li
81.7236 174.202 li
81.7236 175.46 li
77.4067 175.46 li
cp
f
77.4067 170.749 mo
77.4067 169.489 li
81.7236 169.489 li
81.7236 170.749 li
77.4067 170.749 li
cp
f
77.4067 166.036 mo
77.4067 164.777 li
81.7236 164.777 li
81.7236 166.036 li
77.4067 166.036 li
cp
f
77.4067 161.329 mo
77.4067 160.066 li
81.7236 160.066 li
81.7236 161.329 li
77.4067 161.329 li
cp
f
77.4067 156.615 mo
77.4067 155.355 li
81.7236 155.355 li
81.7236 156.615 li
77.4067 156.615 li
cp
f
158.009 118.07 mo
144.208 108.096 li
145.104 106.854 li
158.907 116.829 li
158.009 118.07 li
cp
.839216 .278431 0 rgb
f
145.103 128.046 mo
144.207 126.804 li
158.009 116.829 li
158.907 118.07 li
145.103 128.046 li
cp
f
158.007 138.021 mo
144.207 128.046 li
145.103 126.804 li
158.904 136.779 li
158.007 138.021 li
cp
f
145.104 147.998 mo
144.208 146.759 li
158.007 136.779 li
158.904 138.021 li
145.104 147.998 li
cp
f
158.009 157.974 mo
144.208 147.998 li
145.104 146.759 li
158.907 156.732 li
158.009 157.974 li
cp
f
145.104 167.949 mo
144.208 166.709 li
158.009 156.732 li
158.907 157.974 li
145.104 167.949 li
cp
f
158.009 177.923 mo
144.208 167.949 li
145.104 166.709 li
158.907 176.684 li
158.009 177.923 li
cp
f
144.953 191.893 mo
143.87 190.809 li
157.916 176.764 li
158.998 177.842 li
144.953 191.893 li
cp
f
144.981 118.072 mo
144.084 116.832 li
157.888 106.856 li
158.784 108.096 li
144.981 118.072 li
cp
f
157.888 128.048 mo
144.084 118.072 li
144.981 116.832 li
158.784 126.807 li
157.888 128.048 li
cp
f
144.984 138.022 mo
144.086 136.78 li
157.888 126.807 li
158.784 128.048 li
144.984 138.022 li
cp
f
157.888 147.998 mo
144.086 138.022 li
144.984 136.78 li
158.784 146.759 li
157.888 147.998 li
cp
f
144.981 157.974 mo
144.084 156.732 li
157.888 146.759 li
158.784 147.998 li
144.981 157.974 li
cp
f
157.888 167.949 mo
144.084 157.974 li
144.981 156.732 li
158.784 166.709 li
157.888 167.949 li
cp
f
144.981 177.924 mo
144.084 176.686 li
157.888 166.709 li
158.784 167.949 li
144.981 177.924 li
cp
f
158.04 191.893 mo
143.991 177.843 li
145.074 176.764 li
159.123 190.809 li
158.04 191.893 li
cp
f
183.029 238.357 mo
183.029 230.017 li
187.917 230.017 li
187.917 238.357 li
183.029 238.357 li
cp
f
203.106 232.502 mo
165.244 232.502 li
160.596 232.502 156.952 229.698 156.952 226.118 cv
156.952 222.604 160.438 220.053 165.244 220.053 cv
165.244 224.749 li
162.917 224.749 161.649 225.656 161.649 226.118 cv
161.649 226.714 163.013 227.805 165.244 227.805 cv
203.106 227.805 li
203.106 232.502 li
cp
f
142.366 232.502 mo
73.0991 232.502 li
73.0991 227.805 li
142.366 227.805 li
144.598 227.805 145.965 226.714 145.965 226.118 cv
145.965 225.522 144.598 224.431 142.366 224.431 cv
142.366 219.733 li
147.018 219.733 150.659 222.539 150.659 226.118 cv
150.659 229.698 147.018 232.502 142.366 232.502 cv
cp
f
203.106 240.574 mo
133.842 240.574 li
133.842 235.879 li
203.106 235.879 li
205.34 235.879 206.706 234.783 206.706 234.188 cv
206.706 233.594 205.34 232.502 203.106 232.502 cv
203.106 227.805 li
207.759 227.805 211.402 230.612 211.402 234.188 cv
211.402 237.769 207.759 240.574 203.106 240.574 cv
cp
f
219.595 192.468 mo
224.24 192.468 227.887 189.66 227.887 186.078 cv
227.887 182.575 224.389 179.834 219.883 179.719 cv
219.883 179.698 li
217.654 179.698 216.289 178.605 216.289 178.007 cv
216.289 177.415 217.654 176.319 219.883 176.319 cv
224.533 176.319 228.172 173.518 228.172 169.936 cv
228.172 166.359 224.533 163.553 219.883 163.553 cv
200.051 163.553 li
196.817 163.553 194.182 166.188 194.182 169.427 cv
194.182 173.162 li
188.77 173.162 li
185.533 173.162 182.902 175.795 182.902 179.033 cv
182.902 183.586 li
175.502 183.586 li
172.27 183.586 169.636 186.217 169.636 189.454 cv
169.636 195.251 li
174.331 195.251 li
174.331 189.454 li
174.331 188.809 174.857 188.279 175.502 188.279 cv
182.902 188.308 li
182.902 188.327 li
185.136 188.317 li
187.373 188.327 li
187.373 188.308 li
194.772 188.279 li
195.418 188.279 195.943 188.809 195.943 189.454 cv
195.943 195.251 li
200.638 195.251 li
200.638 189.454 li
200.638 186.217 198.007 183.586 194.772 183.586 cv
187.595 183.586 li
187.595 179.033 li
187.595 178.384 188.123 177.858 188.77 177.858 cv
198.869 177.858 li
198.869 175.225 li
198.877 175.225 li
198.877 169.427 li
198.877 168.774 199.405 168.248 200.051 168.248 cv
219.883 168.248 li
222.113 168.248 223.476 169.345 223.476 169.936 cv
223.476 170.533 222.113 171.624 219.883 171.624 cv
215.231 171.624 211.587 174.43 211.587 178.007 cv
211.587 181.512 215.087 184.255 219.595 184.369 cv
219.595 184.39 li
221.825 184.39 223.19 185.483 223.19 186.078 cv
223.19 186.673 221.825 187.768 219.595 187.768 cv
214.943 187.768 211.304 190.571 211.304 194.149 cv
211.304 197.732 214.943 200.533 219.595 200.533 cv
221.825 200.533 223.19 201.629 223.19 202.223 cv
223.19 202.815 221.825 203.909 219.595 203.909 cv
214.943 203.909 211.304 206.714 211.304 210.297 cv
211.304 213.876 214.943 216.677 219.595 216.677 cv
221.825 216.677 223.19 217.77 223.19 218.369 cv
223.19 218.96 221.825 220.053 219.595 220.053 cv
165.244 220.053 li
165.244 224.749 li
219.595 224.749 li
224.24 224.749 227.887 221.944 227.887 218.369 cv
227.887 214.786 224.24 211.978 219.595 211.978 cv
217.363 211.978 215.999 210.89 215.999 210.297 cv
215.999 209.698 217.363 208.605 219.595 208.605 cv
224.24 208.605 227.887 205.804 227.887 202.223 cv
227.887 198.638 224.24 195.836 219.595 195.836 cv
217.363 195.836 215.999 194.748 215.999 194.149 cv
215.999 193.557 217.363 192.468 219.595 192.468 cv
cp
f
88.6646 230.288 mo
88.6646 221.947 li
93.5542 221.947 li
93.5542 230.288 li
88.6646 230.288 li
cp
f
142.366 219.733 mo
223.477 219.689 li
220.845 224.431 li
142.366 224.431 li
142.366 219.733 li
cp
f
137.787 228.564 mo
137.787 236.903 li
132.895 236.903 li
132.895 228.564 li
137.787 228.564 li
cp
f
54.3271 219.733 mo
52.0947 219.733 50.7305 218.644 50.7305 218.047 cv
50.7305 217.451 52.0947 216.358 54.3271 216.358 cv
54.3271 216.357 li
61.3853 216.357 li
61.3853 211.667 li
54.3271 211.667 li
49.6772 211.667 46.0327 214.466 46.0327 218.047 cv
46.0327 221.628 49.6772 224.431 54.3271 224.431 cv
123.593 224.431 li
123.593 219.733 li
54.3271 219.733 li
cp
f
142.366 224.431 mo
123.593 224.431 li
123.593 219.733 li
142.366 219.733 li
142.366 224.431 li
cp
f
77.7158 136.403 mo
77.7158 131.88 74.0518 128.215 69.5283 128.215 cv
65.0063 128.215 61.3364 131.88 61.3364 136.403 cv
61.3364 219.709 li
77.7158 219.709 li
77.7158 136.403 li
cp
0 .588235 .639216 rgb
f
119.959 165.172 mo
119.959 158.11 114.236 152.386 107.173 152.386 cv
100.11 152.386 94.3862 158.11 94.3862 165.172 cv
94.3862 219.733 li
119.959 219.733 li
119.959 165.172 li
cp
f
83.856 219.733 mo
80.4941 220.053 li
80.4941 124.323 li
80.4941 120.943 78.3145 118.192 75.6343 118.192 cv
72.959 118.192 70.7803 120.943 70.7803 124.323 cv
70.7803 129.393 li
67.417 129.265 li
67.417 124.323 li
67.417 119.085 71.103 114.829 75.6343 114.829 cv
80.168 114.829 83.856 119.085 83.856 124.323 cv
83.856 219.733 li
cp
f
135.294 175.39 mo
119.959 175.39 li
119.959 173.376 li
135.294 173.376 li
135.294 175.39 li
cp
.278431 .180392 .180392 rgb
f
135.294 181.886 mo
119.959 181.886 li
119.959 179.872 li
135.294 179.872 li
135.294 181.886 li
cp
f
135.294 188.389 mo
119.959 188.389 li
119.959 186.374 li
135.294 186.374 li
135.294 188.389 li
cp
f
135.294 194.889 mo
119.959 194.889 li
119.959 192.874 li
135.294 192.874 li
135.294 194.889 li
cp
f
135.294 201.386 mo
119.959 201.386 li
119.959 199.373 li
135.294 199.373 li
135.294 201.386 li
cp
f
159.337 191.455 mo
157.333 191.455 li
157.333 105.97 li
159.337 105.97 li
159.337 191.455 li
cp
.839216 .278431 0 rgb
f
135.294 207.88 mo
119.959 207.88 li
119.959 205.873 li
135.294 205.873 li
135.294 207.88 li
cp
.278431 .180392 .180392 rgb
f
159.337 107.475 mo
143.655 107.475 li
143.655 105.412 li
159.337 105.412 li
159.337 107.475 li
cp
.839216 .278431 0 rgb
f
143.655 191.455 mo
145.659 191.455 li
145.659 105.97 li
143.655 105.97 li
143.655 191.455 li
cp
f
153.821 106.779 mo
149.294 106.779 li
149.294 96.3398 li
153.821 96.3398 li
153.821 106.779 li
cp
f
155.435 98.2705 mo
147.557 98.2705 li
147.557 92.4023 li
155.435 92.4023 li
155.435 98.2705 li
cp
f
176.547 219.733 mo
167.554 219.733 li
167.554 195.251 li
176.547 195.251 li
176.547 219.733 li
cp
.772549 .74902 .709804 rgb
f
178.206 200.759 mo
165.64 200.759 li
165.64 197.635 li
178.206 197.635 li
178.206 200.759 li
cp
.839216 .278431 0 rgb
f
178.206 209.365 mo
165.64 209.365 li
165.64 206.243 li
178.206 206.243 li
178.206 209.365 li
cp
f
178.206 217.974 mo
165.64 217.974 li
165.64 214.85 li
178.206 214.85 li
178.206 217.974 li
cp
f
130.714 219.753 mo
125.348 219.753 li
125.348 147.45 li
125.348 142.058 121.873 137.671 117.602 137.671 cv
113.329 137.671 109.855 142.058 109.855 147.45 cv
109.855 155.536 li
104.492 155.332 li
104.492 147.45 li
104.492 139.099 110.372 132.307 117.602 132.307 cv
124.833 132.307 130.714 139.099 130.714 147.45 cv
130.714 219.753 li
cp
0 .588235 .639216 rgb
f
77.7158 152.195 mo
61.3364 152.195 li
61.3364 148.073 li
77.7158 148.073 li
77.7158 152.195 li
cp
.839216 .278431 0 rgb
f
77.7158 165.614 mo
61.3364 165.614 li
61.3364 161.492 li
77.7158 161.492 li
77.7158 165.614 li
cp
f
77.7158 179.582 mo
61.3364 179.582 li
61.3364 175.46 li
77.7158 175.46 li
77.7158 179.582 li
cp
f
77.7158 196.171 mo
61.3364 196.171 li
61.3364 192.049 li
77.7158 192.049 li
77.7158 196.171 li
cp
f
203.902 215.665 mo
207.739 213.873 210.371 210.242 210.371 206.04 cv
210.371 201.075 206.703 196.904 201.711 195.632 cv
201.711 192.773 li
195.075 192.773 li
195.075 195.68 li
190.195 197.024 186.636 201.149 186.636 206.04 cv
186.636 210.104 189.098 213.641 192.733 215.49 cv
189.487 216.662 li
189.119 219.689 li
190.586 219.689 li
191.174 217.311 li
194.754 216.3 li
195.608 216.56 196.5 216.733 197.426 216.81 cv
197.405 216.976 li
197.662 219.689 li
198.076 219.689 li
198.49 219.689 li
198.746 216.976 li
198.728 216.849 li
199.803 216.831 200.842 216.683 201.827 216.421 cv
204.975 217.311 li
205.561 219.689 li
207.03 219.689 li
206.663 216.662 li
203.902 215.665 li
cp
.772549 .74902 .709804 rgb
f
196.741 211.643 mo
195.568 211.643 li
195.568 199.483 li
196.741 199.483 li
196.741 211.643 li
cp
.278431 .180392 .180392 rgb
f
201.436 211.643 mo
200.265 211.643 li
200.265 199.483 li
201.436 199.483 li
201.436 211.643 li
cp
f
200.851 202.879 mo
195.938 202.879 li
195.938 202.002 li
200.851 202.002 li
200.851 202.879 li
cp
f
200.851 206.04 mo
195.938 206.04 li
195.938 205.16 li
200.851 205.16 li
200.851 206.04 li
cp
f
200.851 209.194 mo
195.938 209.194 li
195.938 208.313 li
200.851 208.313 li
200.851 209.194 li
cp
f
162.289 219.733 mo
141.441 219.733 li
141.441 190.07 li
162.289 190.07 li
162.289 219.733 li
cp
0 .588235 .639216 rgb
f
104.929 174.048 mo
103.435 174.048 li
103.435 158.561 li
104.929 158.561 li
104.929 174.048 li
cp
.278431 .180392 .180392 rgb
f
110.912 174.048 mo
109.417 174.048 li
109.417 158.561 li
110.912 158.561 li
110.912 174.048 li
cp
f
110.164 162.893 mo
103.906 162.893 li
103.906 161.769 li
110.164 161.769 li
110.164 162.893 li
cp
f
110.164 166.912 mo
103.906 166.912 li
103.906 165.794 li
110.164 165.794 li
110.164 166.912 li
cp
f
110.164 170.932 mo
103.906 170.932 li
103.906 169.81 li
110.164 169.81 li
110.164 170.932 li
cp
f
104.929 189.516 mo
103.435 189.516 li
103.435 174.026 li
104.929 174.026 li
104.929 189.516 li
cp
f
110.912 189.516 mo
109.417 189.516 li
109.417 174.026 li
110.912 174.026 li
110.912 189.516 li
cp
f
110.164 178.354 mo
103.906 178.354 li
103.906 177.238 li
110.164 177.238 li
110.164 178.354 li
cp
f
110.164 182.381 mo
103.906 182.381 li
103.906 181.257 li
110.164 181.257 li
110.164 182.381 li
cp
f
110.164 186.397 mo
103.906 186.397 li
103.906 185.273 li
110.164 185.273 li
110.164 186.397 li
cp
f
110.912 174.719 mo
103.435 174.719 li
103.435 173.374 li
110.912 173.374 li
110.912 174.719 li
cp
f
104.929 204.272 mo
103.435 204.272 li
103.435 188.78 li
104.929 188.78 li
104.929 204.272 li
cp
f
110.912 204.272 mo
109.417 204.272 li
109.417 188.78 li
110.912 188.78 li
110.912 204.272 li
cp
f
110.164 193.114 mo
103.906 193.114 li
103.906 191.991 li
110.164 191.991 li
110.164 193.114 li
cp
f
110.164 197.135 mo
103.906 197.135 li
103.906 196.014 li
110.164 196.014 li
110.164 197.135 li
cp
f
110.164 201.152 mo
103.906 201.152 li
103.906 200.031 li
110.164 200.031 li
110.164 201.152 li
cp
f
104.929 219.733 mo
103.435 219.733 li
103.435 204.245 li
104.929 204.245 li
104.929 219.733 li
cp
f
110.912 219.733 mo
109.417 219.733 li
109.417 204.245 li
110.912 204.245 li
110.912 219.733 li
cp
f
110.164 208.577 mo
103.906 208.577 li
103.906 207.458 li
110.164 207.458 li
110.164 208.577 li
cp
f
110.164 212.603 mo
103.906 212.603 li
103.906 211.479 li
110.164 211.479 li
110.164 212.603 li
cp
f
110.164 216.618 mo
103.906 216.618 li
103.906 215.498 li
110.164 215.498 li
110.164 216.618 li
cp
f
110.912 204.942 mo
103.435 204.942 li
103.435 203.593 li
110.912 203.593 li
110.912 204.942 li
cp
f
110.351 189.682 mo
104.043 189.682 li
104.043 188.405 li
110.351 188.405 li
110.351 189.682 li
cp
f
98.1294 369.129 mo
113.04 369.128 125.169 356.997 125.169 342.086 cv
125.169 340.903 li
125.169 339.722 li
125.169 324.81 113.04 312.679 98.1294 312.679 cv
75.9604 312.679 li
75.96 320.56 li
98.1274 320.516 li
108.719 320.516 117.334 329.13 117.335 339.722 cv
117.339 340.903 li
117.334 342.086 li
117.335 352.677 108.718 361.292 98.127 361.292 cv
75.9604 361.247 li
75.9609 369.129 li
98.1294 369.129 li
cp
1 1 1 rgb
f
53.7905 320.554 mo
38.8799 320.553 26.7505 308.422 26.7505 293.511 cv
26.7505 292.328 li
26.7505 291.146 li
26.751 276.235 38.8794 264.103 53.7905 264.103 cv
84.4414 264.103 li
83.1855 271.852 li
53.7925 271.94 li
43.2012 271.94 34.5854 280.555 34.585 291.146 cv
34.5811 292.328 li
34.5854 293.511 li
34.585 304.102 43.2017 312.717 53.793 312.717 cv
75.9595 312.672 li
75.959 320.554 li
53.7905 320.554 li
cp
f
53.7915 417.795 mo
38.8799 417.795 26.751 405.664 26.752 390.753 cv
26.751 389.57 li
26.7515 388.388 li
26.7515 373.477 38.8804 361.346 53.792 361.346 cv
75.9604 361.347 li
75.9604 369.227 li
53.7939 369.183 li
43.2021 369.183 34.5869 377.798 34.5864 388.388 cv
34.583 389.57 li
34.5869 390.753 li
34.5864 401.344 43.2021 409.959 53.7935 409.959 cv
75.9604 409.914 li
75.9604 417.795 li
53.7915 417.795 li
cp
f
115.76 417.795 mo
75.9604 417.795 li
75.9604 409.914 li
115.76 409.914 li
115.76 417.795 li
cp
f
144.121 414.349 mo
144.121 421.278 138.482 426.917 131.551 426.917 cv
124.622 426.917 118.983 421.278 118.983 414.345 cv
118.879 384.704 li
118.981 384.704 li
118.981 383.552 li
118.981 376.622 124.62 370.983 131.551 370.983 cv
144.184 370.961 li
144.228 383.552 li
144.121 414.349 li
cp
152.023 363.08 mo
152.023 352.755 li
152.023 341.468 142.84 332.285 131.553 332.285 cv
119.76 332.285 li
119.76 340.21 li
131.551 340.186 li
138.482 340.186 144.121 345.826 144.121 352.759 cv
144.157 363.08 li
131.549 363.08 li
120.649 363.08 111.712 371.645 111.114 382.399 cv
111.08 382.399 li
111.08 383.551 li
111.08 384.702 li
111.08 414.349 li
111.08 425.251 119.646 434.185 130.401 434.784 cv
130.401 434.818 li
131.55 434.818 li
131.553 434.818 li
132.702 434.818 li
132.702 434.784 li
143.457 434.185 152.023 425.251 152.023 414.349 cv
152.023 384.704 li
152.023 382.399 li
152.023 370.948 li
195.727 370.873 li
195.727 363.08 li
152.023 363.08 li
cp
.223529 .580392 .596078 rgb
f
271.76 413.162 mo
275.514 413.162 278.568 416.217 278.568 419.971 cv
278.568 423.725 275.514 426.778 271.758 426.778 cv
255.703 426.835 li
255.703 426.78 li
255.078 426.78 li
251.324 426.78 248.269 423.726 248.269 419.971 cv
248.258 413.128 li
255.078 413.104 li
271.76 413.162 li
cp
243.989 408.882 mo
238.396 408.882 li
232.282 408.882 227.309 413.855 227.309 419.97 cv
227.309 426.357 li
231.602 426.357 li
231.588 419.971 li
231.588 416.217 234.643 413.162 238.398 413.162 cv
243.989 413.143 li
243.989 419.972 li
243.989 425.876 248.629 430.717 254.454 431.041 cv
254.454 431.06 li
255.078 431.06 li
255.701 431.06 li
271.76 431.06 li
277.666 431.06 282.506 426.419 282.83 420.594 cv
282.848 420.594 li
282.848 419.972 li
282.848 419.97 li
282.848 419.348 li
282.83 419.348 li
282.506 413.521 277.666 408.882 271.76 408.882 cv
255.703 408.882 li
254.454 408.882 li
248.252 408.882 li
248.211 385.209 li
243.989 385.209 li
243.989 408.882 li
cp
f
202.664 363.064 mo
180.495 363.064 li
180.495 370.945 li
202.662 370.901 li
212.158 370.901 220.045 377.833 221.58 386.899 cv
229.508 386.899 li
227.914 373.496 216.489 363.064 202.664 363.064 cv
cp
f
33.0933 394.254 mo
.019531 394.254 li
.019531 384.886 li
33.0933 384.886 li
33.0933 394.254 li
cp
1 1 1 rgb
f
369.875 407.481 mo
367.014 407.481 li
367.014 391.866 li
369.875 391.866 li
369.875 407.481 li
cp
.772549 .74902 .709804 rgb
f
280.707 329.035 mo
280.707 332.535 li
261.603 332.535 li
261.603 329.035 li
280.707 329.035 li
cp
.533333 .74902 .756863 rgb
f
196.72 346.951 mo
196.72 350.032 li
179.901 350.032 li
179.901 346.951 li
196.72 346.951 li
cp
f
177.511 421.951 mo
177.511 425.032 li
160.692 425.032 li
160.692 421.951 li
177.511 421.951 li
cp
f
195.429 395.309 mo
192.348 395.309 li
192.348 378.49 li
195.429 378.49 li
195.429 395.309 li
cp
f
311.1 233.879 mo
311.1 231.974 li
321.499 231.974 li
321.499 233.879 li
311.1 233.879 li
cp
.772549 .74902 .709804 rgb
f
300.021 250.353 mo
301.926 250.353 li
301.926 260.752 li
300.021 260.752 li
300.021 250.353 li
cp
f
166.269 373.942 mo
163.187 373.942 li
163.187 357.123 li
166.269 357.123 li
166.269 373.942 li
cp
.533333 .74902 .756863 rgb
f
105.71 389.51 mo
105.71 386.429 li
122.529 386.429 li
122.529 389.51 li
105.71 389.51 li
cp
f
140.373 393.114 mo
140.373 390.033 li
157.192 390.033 li
157.192 393.114 li
140.373 393.114 li
cp
f
102.972 238.589 mo
103.283 239.946 103.462 241.352 103.462 242.802 cv
103.466 243.965 li
103.461 245.128 li
103.462 255.551 94.9824 264.03 84.5601 264.03 cv
62.7461 264.103 li
62.7466 271.74 li
84.5625 271.74 li
99.2358 271.74 111.172 259.802 111.172 245.128 cv
111.172 243.965 li
111.172 242.802 li
111.172 241.368 111.054 239.961 110.835 238.589 cv
102.972 238.589 li
cp
1 1 1 rgb
f
120.181 67.9063 mo
120.073 66.418 120.612 65.0449 121.795 64.2383 cv
122.586 63.6982 123.549 63.4941 124.545 63.5811 cv
124.916 61.5352 126.822 59.9736 129.122 59.9736 cv
131.422 59.9736 133.328 61.5352 133.701 63.5811 cv
134.696 63.4941 135.659 63.6982 136.45 64.2383 cv
137.632 65.0449 138.173 66.418 138.062 67.9063 cv
139.628 68.4805 140.685 69.5781 140.685 70.8418 cv
140.685 71.167 li
140.685 73.0205 138.407 74.5234 135.592 74.5234 cv
122.651 74.5234 li
119.84 74.5234 117.558 73.0205 117.558 71.167 cv
117.558 70.8418 li
117.558 69.5781 118.618 68.4805 120.181 67.9063 cv
cp
0 .588235 .639216 rgb
f
108.528 69.043 mo
108.442 67.8076 108.861 66.6709 109.776 66.0029 cv
110.387 65.5566 111.131 65.3857 111.901 65.459 cv
112.188 63.7627 113.662 62.4697 115.439 62.4697 cv
117.219 62.4697 118.689 63.7627 118.978 65.459 cv
119.748 65.3857 120.493 65.5566 121.103 66.0029 cv
122.019 66.6709 122.435 67.8076 122.352 69.043 cv
123.56 69.5176 124.379 70.4277 124.379 71.4727 cv
124.379 71.7441 li
124.379 73.2793 122.616 74.5234 120.442 74.5234 cv
110.437 74.5234 li
108.262 74.5234 106.501 73.2793 106.501 71.7441 cv
106.501 71.4727 li
106.501 70.4277 107.319 69.5176 108.528 69.043 cv
cp
1 1 1 rgb
f
241.326 37.2906 mo
241.168 35.099 241.961 33.0772 243.704 31.8893 cv
244.869 31.0941 246.286 30.7935 247.752 30.9215 cv
248.299 27.9088 251.105 25.6094 254.493 25.6094 cv
257.879 25.6094 260.685 27.9088 261.236 30.9215 cv
262.701 30.7935 264.119 31.0941 265.284 31.8893 cv
267.024 33.0772 267.82 35.099 267.658 37.2906 cv
269.963 38.1362 271.52 39.7526 271.52 41.6133 cv
271.52 42.0922 li
271.52 44.8218 268.166 47.0349 264.021 47.0349 cv
244.964 47.0349 li
240.824 47.0349 237.463 44.8218 237.463 42.0922 cv
237.463 41.6133 li
237.463 39.7526 239.025 38.1362 241.326 37.2906 cv
cp
0 .588235 .639216 rgb
f
224.167 38.9645 mo
224.04 37.1454 224.657 35.4714 226.005 34.4879 cv
226.904 33.8307 228.001 33.579 229.134 33.6868 cv
229.557 31.1889 231.727 29.2851 234.344 29.2851 cv
236.964 29.2851 239.128 31.1889 239.556 33.6868 cv
240.69 33.579 241.786 33.8307 242.685 34.4879 cv
244.032 35.4714 244.645 37.1454 244.524 38.9645 cv
246.301 39.6634 247.508 41.0037 247.508 42.5424 cv
247.508 42.9422 li
247.508 45.2027 244.912 47.0349 241.711 47.0349 cv
226.978 47.0349 li
223.774 47.0349 221.182 45.2027 221.182 42.9422 cv
221.182 42.5424 li
221.182 41.0037 222.387 39.6634 224.167 38.9645 cv
cp
1 1 1 rgb
f
323.628 68.0527 mo
323.496 66.2334 324.156 64.5547 325.602 63.5693 cv
326.568 62.9092 327.745 62.6592 328.963 62.7656 cv
329.416 60.2646 331.746 58.3564 334.557 58.3564 cv
337.368 58.3564 339.697 60.2646 340.154 62.7656 cv
341.371 62.6592 342.548 62.9092 343.515 63.5693 cv
344.959 64.5547 345.621 66.2334 345.485 68.0527 cv
347.399 68.7539 348.691 70.0957 348.691 71.6406 cv
348.691 72.0381 li
348.691 74.3037 345.906 76.1406 342.466 76.1406 cv
326.648 76.1406 li
323.211 76.1406 320.422 74.3037 320.422 72.0381 cv
320.422 71.6406 li
320.422 70.0957 321.718 68.7539 323.628 68.0527 cv
cp
0 .588235 .639216 rgb
f
309.385 69.4414 mo
309.279 67.9316 309.791 66.543 310.91 65.7256 cv
311.656 65.1807 312.566 64.9717 313.508 65.0615 cv
313.859 62.9873 315.66 61.4072 317.833 61.4072 cv
320.008 61.4072 321.805 62.9873 322.158 65.0615 cv
323.1 64.9717 324.01 65.1807 324.756 65.7256 cv
325.875 66.543 326.384 67.9316 326.282 69.4414 cv
327.759 70.0215 328.76 71.1348 328.76 72.4121 cv
328.76 72.7432 li
328.76 74.6201 326.605 76.1406 323.947 76.1406 cv
311.719 76.1406 li
309.06 76.1406 306.907 74.6201 306.907 72.7432 cv
306.907 72.4121 li
306.907 71.1348 307.907 70.0215 309.385 69.4414 cv
cp
1 1 1 rgb
f
231.603 449.995 mo
227.309 449.995 li
227.309 426.357 li
231.603 426.357 li
231.603 449.995 li
cp
.223529 .580392 .596078 rgb
f
129.679 338.361 mo
129.679 340.019 128.336 341.361 126.679 341.361 cv
114.894 341.361 li
113.238 341.361 111.894 340.019 111.894 338.361 cv
111.894 333.785 li
111.894 332.128 113.238 330.785 114.894 330.785 cv
126.679 330.785 li
128.336 330.785 129.679 332.128 129.679 333.785 cv
129.679 338.361 li
cp
1 1 1 rgb
f
123.012 416.143 mo
123.012 417.8 121.669 419.143 120.012 419.143 cv
108.227 419.143 li
106.571 419.143 105.227 417.8 105.227 416.143 cv
105.227 411.566 li
105.227 409.909 106.571 408.566 108.227 408.566 cv
120.012 408.566 li
121.669 408.566 123.012 409.909 123.012 411.566 cv
123.012 416.143 li
cp
f
75.6777 420.976 mo
75.6777 405.232 li
79.6138 405.232 li
79.6138 420.976 li
75.6777 420.976 li
cp
.772549 .74902 .709804 rgb
f
50.814 373.054 mo
50.814 357.31 li
54.75 357.31 li
54.75 373.054 li
50.814 373.054 li
cp
f
82.4736 323.879 mo
82.4736 308.135 li
86.4097 308.135 li
86.4097 323.879 li
82.4736 323.879 li
cp
f
24.0674 288.533 mo
39.811 288.533 li
39.811 292.469 li
24.0674 292.469 li
24.0674 288.533 li
cp
f
62.9185 259.79 mo
62.9185 275.533 li
58.9824 275.533 li
58.9824 259.79 li
62.9185 259.79 li
cp
f
284.787 420.969 mo
276.627 420.969 li
276.627 418.971 li
284.787 418.971 li
284.787 420.969 li
cp
.533333 .74902 .756863 rgb
f
263.414 432.094 mo
263.414 425.076 li
265.205 425.076 li
265.205 432.094 li
263.414 432.094 li
cp
f
263.414 414.594 mo
263.414 407.576 li
265.205 407.576 li
265.205 414.594 li
263.414 414.594 li
cp
f
142.757 240.574 mo
73.4873 240.574 li
68.8394 240.574 65.1948 237.769 65.1948 234.188 cv
65.1948 230.612 68.8394 227.805 73.4873 227.805 cv
73.4873 232.502 li
71.2578 232.502 69.8916 233.594 69.8916 234.188 cv
69.8916 234.783 71.2578 235.879 73.4873 235.879 cv
142.757 235.879 li
142.757 240.574 li
cp
.839216 .278431 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (\700\753\745\752\761\745\751 \705\743\756\760\756\742) ()
%%Title: (140716_ 189888005 .eps)
%%CreationDate: 7/16/2014 2:11 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X-3g@5"8>hAr[B@@uRUL&Hra=SPYJH4qg(u'RnZ&-YioATN4mp0P$OY#7=9buL(Rh_)Ve*^OS,i-.<kR?2<B)As^q.i-k
%jjktebMf/np7Js@T/H?^]s0FeS_E"rdI-IG41.P]=7!:Th;3I\pij-:HW`Lc44W,A7]Y)81KS6iCZj%kfX?hjbuUUfl!@?d3@D"-
%Tm9%cht3QVFF_tBmN-4P5g_lmhhOcgh_ad#dt0V+:(7.SIJW:KqIeE'5.d*]B+*#YB@k]0Cu_5Jop97V-J3KdfRq1T[9N#W4)GgJ
%4f?34-+K?n2,:0(<hJQ=Me^(>IlW9iXQ4OXZ(sml*12CSs"s8,J*C9A+TJS.pjZ7[p^43aS=-^.S@uTKNaZl1#H7^4%FIE_)?<Er
%BTe2-_oBZ,X4hJ')%FL/gUT1*WBXp)TFY%-F,dimjOP<ocMLA^2X%(,j"F7g@Y)N@c,QCA\S$n:^!RRZ%_DUkk'qrVJo*pGrh.g*
%^1fP'J2Zi:B0s8te/Kt>1MU61<Jg&LPk8&,337:!)h$Yn:2>B%=O28]]_?/[YuCV5JK/B]6$=n#mDI4RRcp2ORQ882)OWiOcZ:D+
%C_rat]97cnGh<$TQQ<]@Mr`On*o63A:RgbE2%M,$(qO,4VqkrJia16XH2NFYc$RUlb<sJg+Rf%DD2A_X3%DXAj?Uo'4:l!BSdd<4
%gXRW[cLC&eE)qYs9W1qX<ri?1l$>Ua^N,%Cqi)ZPe_i[@`4q=bIsiF=(5oKJ2">CNGh4eBY%dI_8qi^T1WR=HNe>(d#HKip<cad'
%7<[tn=NC0@NXu.eF5P#Q^5ph6$NFSC@M,XUMqGC=`&kp^eu;X<DPc>Pe@\\q$C(rWi^ra+Gt'nCho2J`^58qA-`i&AiEr[@E(Oa=
%*Wh%FYmphhIgL:T%W75EiEuM:5iH):MNPk`,>e0%@)iX+7_!D:`[T46X!)0O([G$M==1"8P@mQF/f@[aQ^]c&$ij(qB?0&]j<^d9
%(&e`E+cQ14]4+)^jEs`7%PP%)_C-kXW8Y`%,Q>Yh#U&^>rY:X;,5dAL&4ZT@`+4%"jRN^u9Z[Z!H-&X@F?E"34]Z(R8_c#l$ij"n
%VoBs&hi_e\7K/'b&4"@4#Tu!;aS@a2LjuZJo/ab0Gi?[;([E2ocs1V%PU&^?O27>=fi^(ij?&emZOAXD'G<uA`]h_0ER,jcnn@TW
%0G6R@5$!m-F8+Gjhrk$XjB5<IZ^LNG+RYsjs"Q#oda)d'\WkrAc6T\>3FGUK1(\FL2357=8q'0FM<fs93%'PXC*''::011nNm&Mb
%;dJ#=5<K<RWJgcbK5X1krm.nFGBE!ITXeo\;0:t#>aKq1BE$6Kpp]F?UO2"8+Q-JORK"cOpigiBs.FY:`'r(As!sH3GBE!I[.$;R
%kE1MoQg)].jY&eBN.t?>m%E?@?GWtNG)#-\D5*W$q=U3Ub0e,AA'`pm;q8622SWkQIs(BMg(C(IHH/];YEUl^LFk4kQe+6=o4p4S
%Y0jErF6N7&>?jOm]l"Y$C379/F!C)QE:bRlfN@`A\,VA]PMf!]>uTmiq6e1aG]]===k$/9qtEUQ%emah"Q1^55$g=>DX&!Ij54uS
%_S8#\Yj;Jo:H5#cCu$r8.lI@iPFi2)JZqK]TqN[^1$D.``DmBSHfd]l'bT_[U:b,$_]2p;VpN/18AIHlKRZQfr;+g;1NDI6!2G+p
%K#t#Y#:8mnNdbi5Mg55)?%dZ4:^K70J6K/t%J+=Z#%"N`p#sQ#?R]trCMlY<;NH<AFN2B1KEIFaG-_#aU]6!d+G"g'T)V\BJjQ<\
%r?$t>1<;[W(H`utr^AL$p@2Fa$1(Y^&'tWhKbK3$LRki2;5=.iM$ntm`7c<<O_4WC^:a'I_X<6-6TSIboXID2%0OlH#s@G[&8,+[
%gc;'bo=.t\S[!\,?,VD.XEU@9>$ak2OF7.MNNOe7);PDS_8mM%d0&F^?,JNth2/B@RV5tE/e@K(c-ZQrKBp&r=,:EQ.hLn&_)dFC
%;U[@;[ArWK7S)i=ULt38(mhJ1QGoST,caU&IV(,ebc$=&ph/<0f$Q:1O5rWq1&FE1r\K]Jb`RWm)hn`f?p%-R0!8SjTmqj:j51>9
%Y27\%&J$9-fsK"("?$sQ8O@7nWn[c3,['4L"iDaD$o,IfG(Gp10j4fMK[Y;jA#Ol"n*()>YHH@0*oAOV;J(\hL57[M8`>2<pkE"1
%"EVN7NgSB=EDDq@<ItgW[TarU%,F^rIKeDg9KTeb%:%kgh,i/S=R52)Yh"qsig$m1>:aN<8s=q:\XI*5&H1_Z1#@WQq]=+59NO?&
%#]&-kW<e[/VLnN,b1P+<5;.MU[S\r"4,>DLT94NZOiBBcJa48+juS2=d"\!i<J/G-ksibSpELnoNuL5G3tqMq,=L?Ipo]cC?pUWO
%r/j^()h$Ud!#'OKNtp;4dbGIlVq?En4c52j<!sjZNc5]:"a;@a7tL<UP9@PjJbEo?QI(g9m5C&E"&.[kpqRND*ojP$Nj+UiGs+!q
%Ub:'HNk/%I,'EHJQLuc$-G7`#6B3I)=reaCh,1KAMTdC&K7[=ua\[SFkQ:4HEi@&u+?Yk!LeG1T.\]FU/EFe^-Pb$6OWfWMNBlL?
%7KW[/K9m'K>h`dc%mbnhJG9*`.s0UO\'Ef$NdrA$.tW>fY6-]fkNS;*H.(@V.WN^#G]6WlR1fbj4;k^/-cm$A>Mof6iTQRKOf]ao
%2?De#<.fM:r37(ZcsXi6(E-qqjOu!e^^WV!J>njMJStq@%2Xr<a";q=CT?NiJl'("+[`1<)pe#/`^ePSfFPp*i]orJ<^[9FG%KB2
%#oe,oHtAbP)C$Ym2W.7An[r`d/U4'65Tt_f+>_uMflW.hI+]\\!KS!:5MH@Feh'CeX7R4C)$aUEP\fF!&ubdRdbM3P$eP5kT@7%M
%4efXuq>dmR(CPr:V\hnh!O8Rk$OMi&N2R*H'tB*)oLpA]:nHUs8Npkc[OXhsi/4QNW%=aYl3JS*BepkP/9)`3#SYHJ5\Us`%XERC
%=&a[HW"joYd)b6GSJ,S,0lP37Ak@K'AXcV'SCq;6#a4WhrteNB$3;t2h[Nua]qS7WD.3VZfDT]+:^$`Kb.NP/_e+;K*m,O]"%%u[
%h*a&M>egufl;DYQMm0h%B247&ZGc3D&Jl/OYQN?T*>2;P3qGB$5jE3\Iu,l*-3;'%o;R$9K_IVBMm+b\rLW!R#hT6]LtWR8$"17[
%BI6!Hl2]R/b0V'::&#;5JR$5H60W]c]'5/LL88>jL.-jhC6BYE(Bf5A9a1p*A-t.!+H/?38*S9N,6d!K_75GZ@,@4k[E920d2*"m
%63O]9I$D>.OLeSjqZ)'efd,9*JLV(J60;[Qf#utm0Nsklcm;b=Jjtg@i+l_X,5I6FPp_I#%4/q+AIrJVb=H/'5:Bu`O).FVK`_8h
%JJTN."R44%+KS8T'_icM/^InD&c.e?LkcF00aZ?Kl=6QPi7]l5!tUHVbRmc-M3oa1ooPUB"p_@`j:#Db4T@[DYR9=Q$ZeQOh*lT;
%HFTBSW("%#g'dX?WX-]VLd71*<Zf1iYS$2s.Li@!7O0'&\-SJ%nI4otd(Z:@j\$hL=`EF[10HM2;K.44N._l.NZL.kA)cQ"&8ECY
%X8j4Dj;-)h=9^P]YlO"8_H$`1JR\L'm6YK^0KOf8%^AI<P^r93aJ<^AN<[Z5fG:CPR=qX2\]P5=!pM`_4[>>A8!Q1ZetU$0#_2s6
%6fJ+uEYJfN(rmIG3_2]s[B'F8H(rMk*[k'HXtSk.!-=#-)H9!^<^Lg1.U%ZA0caC96C5aPMmE^k7aRbE%HBE<6&]\#i-6"40L4o*
%P9JNqAZ]X1fh<M!JBT5K#U]XuhC"#M+l*U3gdM=JFN/jiE1+Ll>L\O*d:8=`r6QDj>dSMW(K;o>R[uVJKG30-j@_C<*8BuT8*d_m
%EfWJiI4*E4NPiD`W!*,94C"H.^R4/4"_j"s0K;<j?lN-t>[h`2!Eu/,is3<e<1L5reVbco&DV!)%$6+P/@qJTJG2>3^i*,9=AZ!d
%dS>u%W-O#QN$2:EOoB/HfgL.rTC=lO6BjX;<SHItm+/!R83hM,Boh;J,p:p:K7K.UU7j<GM=(AYL8t=LcRC(u^>XUna7LT@*<OBY
%'MpiJ,d%E!NZ:ek`)T([365l5([tQGB+>cRI%=7GW!QJ>VB^4KbX!)64`IYVMf]!a!=\h[El\o*ie[_,;B]7P#(^8R5R6;bN=LVI
%?FrrEZlj?/_[6GFC_564>(_]l9YnJ,C&((1#pMaN!%2)4TSjY>R01]dcL>#IE0m0q84Lt$c8OC.(fsZJ5bY+W)(m]Ld(Fs[J`eJ>
%E^:&j$p9-3J<7ZUcsKNc"MQETL5V-N=@ds"$D7XnT2mKD\Vq_L#;"<_%rsp4.P"?24t]T>9Fg2-OGk?H:B>/Gj9?`>RJ]+f("_-M
%J=V>;WM#P"q_"-;0F!DjL!!7H##k`.n,uf0W.e>Z0NUM\4;$@4.LAQTr:5^G4,6'hOpLP<8QFF(C!^co\AW&#,Hm5^CO'MJTuN9m
%^W:CBYtZW:WR-ZH'ga^-k!1X7a:sA*'t30/`"6ql@R;pcY&,re&L!eg.VL1(2_#9tLP##h*=N`<C`o($7^jllP(:H.75],/Uc]2Z
%FrQhk#^%3UU-g]@%Q3WNY^-VRiOAG,(J%[3XK7Np,G%_r"iqrX'=PqFPHZ2_`Y4)e===m9#!nJ^8=i)E!?<Mt-_^oF(8ri*[\%HB
%."Aip)3dQ%\UkhiatPf</!00/78X1P-_R7eBBDMU)Wa)#^2?93!=aj,P`S*[UagKCc)[iOAdlIBa;C^&9Vt"r"<;"8KLfX,_o5XZ
%e\@(U"q!j<Go_D95iB+n>&@<0Uo_Y[!*W3%0_O6WG/41aEWVhf4U]C'=8"1)Iu+C[X+[d74:ASSL^Vh#aQ$+<ck$inH`0.:(ffLZ
%:J;@6,2bp\):`ejo-j+O+nJhNCkK2!EjS9XKks<<LC#A<&_c*X*i5jB[DBspcdtfQaF'OQZo1bVK.C1BlGAU/(4n%bo`3hjGs9Rp
%j;?6TO\LrfJp].h(C1\1#JF6%q,@KL;+SeuL'EQ\-["KCV#(o6Fb(*5(K^)X6Bs8Lq*5WQGtt-a"kI+)!Se_N#&+pIHr7r)FcdcI
%!ZM;*5^4cqNV-E1M[ZjQ#hgKF3MomI3pJVK&F*A#"sSi=M&l55Qo.A1(6Q\*?D.--M6k0^_6Bhqo+DC_F-VX"n;0#MAe!uK)eDXb
%Y\XT;&n>fg>4<b"FN@%C&CiLUJ-14eU++MCnrRQ=RZYj,_MW^K*\jrSr0oREl;tpS70KaYklJ^fT'$tW8`1j,+Bp*Z/Y37T/@r^8
%^J\0c@93.(E<B=<XI>.H5SgdF\4-2S^pt/bKRrDR3?6o+76D`S@Rt]J4HsK%2pi(H1.A/KR5r6H=FAWZ6_lPh<sW]7rd!K3=94rM
%@6fL)p6a\f@7r_X%]cOc6M_F/W$i"1jTjS6G<rDVTF_g&KSsT4=Te>X;;utTj99OH=?aTe&cTnG/t)r-Z`.oeX@tHma%3&$It\1A
%i=])#?MYBP_Zg&KJi//9,G*8W1SQKQngQm*Gbnbu/5j;hI)<&m-j&oe5G(ad5]`;8GS$RC^jdu`Y!@>"Cda!<#+Bp#@rOFG->3+t
%#LU3tDFY;dPGS$hbl8!:`L5;M-$g2:Eg$MCAf);QQ<E9+)>pU&Ud3c?0rJYc"DbqtRmGOoD]AI<a";&)F-/DC:XDAmi7_DnG0k?]
%K6`$sE.T`2:bF%J>h4ah=@$EA(1"/SCC6UeJ1dIL?r'3'SIl,d5c4pEX1Ji]"nF:'-DhZ>1;L)'7KOS@Wog")Ko6FcO7&2X/fOB!
%%e-f\D=CFE:'Gu60?Zaf$9jc4g%b'\elD]=JQ8]m>7NTcF![q.-gq?f5XuH!7:`?O>N!DBh#[gj##SD]fP?G4`=MOF4_e<-Ug#TZ
%737!NJu9t+K/)g\n,ledFPEW`(%KK]`'b.hhp?;h`%CJ,4;6PG>C;`B`4KL2#q(Z8&1/Z-JM6PPs.\CY%LPK$!kZY@DjQcS=C$_U
%Xo^A5/475qSC)j$rA&U9AWAD&#?mNtO]rqWG6/-R&QGtLr#5V?!n';RDFeZS-t*XaJ$h(AhAo'dnc5=.8Ib>Dfk0F`/mr()P,N7(
%lGr?4Pd^rd0J2Z3d*f=/U#1lVh_2SOBcB<6R?82'oOpM>,D83p1)XYjN*u3SZB6SsB0HHhFdT%dG,Gnu2%s&d6ek1o#uIg%<X)YR
%NB(HQJJf\:rf0g1LZ]H/P!E9RR>MfL^73::_rkHg:s[(&e<eGPP^1A)5H/T)!*G%U?Ed/")Mks2$Hmg^i.5on=/<@:,3FFrV4m6H
%3E6!nl&XnN5*)JP,&r1O4,f!0dCE0IMamJG:YmJ18%1`,(;WNUd1pdRY(P;kIQMpHeKKEPfL@#<1'2-R$:5K*2NU9Ja$_B1#.ed[
%0jZmWUkh^C:I3;29Gg>V-[)BS$M$,niZZ14@dkln3^pE\plAoTgVb,X[.QTT+9O3ER^D<TWK(jWBERtb"!0+u:/nYnS-'/P6aB7)
%W47Y.^+bNAPf"r9/'&0[JpDqeBl).6DNbQ+^g6)iMKX7a@^gQ+B%VlV;)h&$`4NC6o^mZ"XApNW20$K##MP^clu@@j`.V#.DW4@a
%EHGB40)FdR+k;us[-oH7g1<s5nhiJ),FKb@MNPr@o>,\]C^u=Jf`YSE([W_*Xk9V:GGV_[E%pU`pB1]Sc@X%Qk+RD_iW3[AM8c81
%Ff,)L@#G=k6QQM`-Odmi1?9:riu'^hU&jd+rPEt#$+>juR?U)61aC4'2iijS5`Tjm]^H<)*(fP)F3*r]&bGme-H_aFRrP=@1Ska4
%1^ur&)7%Ym.nl*1mgsA9haSII5aSpL1]U4/1\8+++Z)G4hI?,!A\^m)dJ$dSPTkZ<fd+Zn6X:+]/l`X"=n6UQEP3.84Xj/J(kdF6
%>E:\BqI1,>843]]$XHcY:Hlp@3tO=aBuc>"(i<h>*N2LQra:#<n>;nW,keR=1t&-PM@:-[ZcK[1aVcau9H+bP`2iMPf5\n''6T71
%?0I'&id"Nl[%\osbkV=N7dZM\;50kM9%T$bMD,`:oC5PBrbd*d=](HJO0l(-d;=i.<4*Qe$:7E/`1hrGCuZ/n@+%%JfJ,QXg6i[*
%S&gQ8%qB+VZ825:Zn,)kO;=WDD7i"B`VsUMQUP9s+!OX)j<\=G\bdSo=Y-KtDG=(J;J\=M/2G(e/M9p*PKt*MQ5.ED'>_r6q%6"2
%$g*e!7bC5dZAN=2R70RS&WI9:K!A88)"Qf(H`Wn^Fq:mMM<hLJMhj%ciTLuU$9rXFZ=5]1B=B.Mc,+0gZgUsY`rpRk2j&2.-j\)S
%,cMI<k_^u5h'=U6ni8.;pf>sU]R:mm-71UBi([`%?0K^.C.!je>BM)76H<\8)FNr/Que.?Om8HIpFsU#)qG&"bTqF]P-0_$NPrap
%$-Y$jW?0&Zj?9lds'Tr7&9/bhD']+Wd'.^+(SZ0J^f,/_3JX!:Sps$\XAup=U/4@Has+5c#Z+c6:tNd$#J@:nNLsbeU\p0mabL<(
%7BCdONat,tgd4g3)2]@O!hgNpUqC2G&3?GrS84Vb9Fi1hFD])13GU<XfW"kh=D];\$\*8b,=dfY:#QI0%m4A[Mpf7-TY%ABI>X!2
%0'XX9U[m(FE6GF-YTjeoklR@>8YhmjUSBIg4Nl51Jq@6Y^G2mEk*hQM>7j:f5tbWGD3Lb#$qIl6an%_k5"q,cPJ#%05mO9uEMF$D
%`\!AU)rp=4SEKFd!NGj"VB%<0Ve-Rh?_;_=ePCnMY"JR>"QTF:DnHrInDl42Z19ilGJZTq75@6l$(2au0IUht\>jP(6.gn5cA@3S
%a^LWqoLJ<MCG/i0:2q(*86f'UZKfBANQL`JGn4s/P>qnd$OCm"&p_9t9gBM.8eOH2?)iEp>pS50WG/PDOMckK;/,fFpE4b,i%Ct'
%qu"eZ^CVomlVeKdR(!rUCD%bRm/+_R*kPh'_-?b+9(iNl@H?WA)-8sK\I)bd`?g=?)-&jWHM3RjFA<+CHl=eei%29EkU9t;2Njg8
%ki7cCkMJV\,^kIl,r),N2&M`pmjHb3&kGc49<+oEHdQ),MFjR8f)\lER:$Q%Mi,GDU5A31?/nY+nZEQ^0n.X"JocY,"$^$)M74V_
%:t>'ojiLecdDpPJ*fn7JKrd?gV3fVXRk#g/Y.Qe,$CDu7S[^(.<[meF'9Ol63;Rm'U+?j+Ru=E+_`GgYV_"([dtJN"aV!Vm68(GO
%jgIa$NCtW/Q]0*2`57(A8I&6Sr$FB&%okJ9?5V]Pg![JL/Y(&@FIe4@q+OHiWkm`R9C5%siN$8B;,MT`9Ca5Pl+jqDWXGebUrlNn
%A^LYZ4^OUTb>Ul+o-,G$.(ZY8^W(ak33c*jcfK,J04ZCd#EbdS=T>\Ro84(;-,poca8AOu=o#'40mLsnQQCOK/##,r`7Ro-2F_Ok
%5U7P0PcNl3T.s*#$BH%%#>=r53O;Fk]Gls(<=k!'ri+[rKhILnqF<Lm8]d!!:I::!o.mJa]R3<oH04:Nq)@#Kofc6o*4Ih'iO'!"
%>U?1TAaCg;)!WU,<>a.B_m1VA,.[A,e1tHCV6E\2&b+7`+*+(tdTre@C\3XB<:@\'QSp,N6dm\:5NEHUrkM'A'Bak5FqoTKVIlWT
%p*0,tB;VkY?NJ!0!h5Eo:C=<s[gYo>W;R>1CR`cIg%b&0+;EEUX"RP*a%:["'?VJM_lH0=6UE<e4t<6Sp0Y`H6pg$MoGGb"?3T<D
%PK6Xu?7n>c]Sf073T>k)6P@ZYX4psl,up1"AAXPXKOg5ha[agu:1>E=#R+8O:g.f\%>=(/\t;YOa.&#9+&WoB5U-*Ik:dQ6ah(=e
%WE>A*5o>o:INXR$7OWoYN%YK/D+M;eb9cFAPn=me(n2eK+&`ugV^2T``h]qc!ZdnbEm&HJN^suFL1.N=0W>2.8Fm>c4%*QoTP-bt
%e;GZW(l?X=k.GEHru&\)@IkK$3)$//g/=H@UT'9hn=b.1l(a$H0>^##KNU[^$T/ameg@FJ@I&=7mGt\bhoNG^&Ztqla<VN1UkVBk
%q96ln8jh6TE:G8e%YSsF''Cqg#kTOQ3#N,do&mugbCLZ<QfB>r&Z(@e5`af#((u:?(fK@%rFE&d6e5*$.Uh4G64k<%GF`[\bK-hq
%UW8'V7Q?4*;*pMQ3abqH<FV(a,p)5FFNCYm2N]sLg)g4(ckAtAl\<a'VNDm/_M2i^-d^%gD9.TS1#8^^.>EMAZ"&NA;pmcAO/.DI
%p"W!();K@N6Z1'uB59OZ3gBK&Tq;`Lq7pXGe_a=q)e4N).hN7>Ne&n^l2J;p;XjI@pJFlI(N@jF.i$H7F\^.s:#oGsN?T6,Smko%
%jGfhO8jtVfMTl\+gR.L`P%X#^'>qc68d(\V8YgTrR@4QO7%iF.pG2Wdl6/%c7gEVQ<EY:Y3eJk'.>:_=A07/D3=%Vm!7\skeJ/pt
%!>=R89,f,$8^t^QE)KNNUU)\k5q@k"5eMAYV-2/kXQZO:s,hO1+tOXXr1fMh,odaL,)U84S0NO?$cCcH^CQ$"]DtoY.Un(H8i=Be
%WX,H[W#UqoXKEo3nak,U`g,V&`81SRLQGbY$DlW$[dW`=_Va=PJIIlu=nr:AV'_/h8MM)17$I#M4JOFlKRQ+.D^q@/R)Zk]*>,d&
%6m.dNm+:(FR*[`)c9G+aAEq?32A].W9i;Wh=5L-%8CUpLhBq]-SDYr;o8k]03es?,0!6gL<tj5RD_X^h:&A"NIMHu[@ZfW\&iXo5
%e]"Jei'mDc;NCcroW*6R5?[!oRO8bCUXVa.Q]-C$VK^5NHE#W%MT]JlihFigp[DghES>6tFZZ_NWONoGTR-p'rnnD*B"%(O.QDb)
%JHjAB^Y+?FYP=]5[+?53c)9CCi,ZGXdeW8p90p74grR0GeG>_Ro=p92DYNofr)h5rD-p7<)nEk([0D&pn$#R$g:U[^cs`bNm5B!4
%(Y[;531o+h9D_WIUsm#53oJG,qi=4IF/a7$Q;lW3gq.=q1/$eWX_PK%c-_NTn"&S_E2O$kMgCH,13M@8p+?A;e;3B8L)<iT\Wpm-
%CB#hdBJnN:?J%@>9MD#cZZLK^pVh-Mea-Rp*NCFEFiN,-)r:4*S#=p[oZhK4SPC\%"BQ/D+sM7.gh(:*#qMn_!&pgbo4#,XC7]UL
%QY4QH>5p&G_gt:ac,<%._KsplnQXs[__%a"*6CV1H4uP##dGFTkMX[$^NKhHjg\O^2B*<?&]oCJCtE*i#D6X'&^dY#ES24[OukY(
%?=GY?X=,s$IdJ@6&?5b5>FT:EFH(2[]R<st[K)iTrpqhVcE5!fpFg_sFm9FI/i>pnF[1`]4lOs]DX"?_<Z>qZ!Kt%=j$CE\)J^';
%#2O/S=f6GoCt6.W2UsL%&%=hBLH"a!s)3Q2DD(1BG'>t@n,PLdT>iD[;/Hb1XZr<Jrn3*BmHOl,JdI6ZX&BJO=eg7gf$=>UXE[\%
%A-(hr$ul,%h&uWd!JJ4+%YS6ekd.7&T>:^1CqA21dt,EbNqCGT2<u,F_b)ik>DJ`u!\-U*A"b]9RhV5b8<pl&2uC8s^r:&lAclVu
%<+LL*4W].R=)1LL%_%m_QE]tM&^%au:Bopjg1s[!N?87Q4H#"BlJE:p`am0EK8\Ph^\UGF$O<_tD[N@bkFg]8mq4Ch4fW_YCh82M
%<r8bE6h-TR=LZZs['CNc=YZ\W))Z&Tgmf`Bai<9bV4l+Y4Q^R8.-Tql!jZn#kZ5MucTm_nl?%)MZTUp/`%3gt\g]lS3eM=PnW]fk
%/.c@okf2_<ij'UoC)OtO(X7Q%Q,s\a=DFAe2AVG2e,cn3m%t/D)3+!a7:c/-&_W^sX5M^@??M^Mq2+Joj<\Cp[*'SYMpQ>Rg+>Y'
%7;0.9m1uDOr.]C'QF"!#%c)R\H_Js&=a/Xd(E?\"FNZPU[VbeV^eNSF65qC73o%*qGGg>$B]t75M\V]\)*bji\ENjQ_1Mtp>M2j$
%\iGZ.?A+MSHaLMG\PAKNC;2UH@]5R'2[(*nTiK@CN)m(4S%+5("'AFNRrdQC=[9";"rDnm22`?2<PBodWi\LdIui##EVI.Rm:Q"J
%\`QV;Uh^k+WFqBkqG#,[,f?djSK.G?9n"k\`TuD`)C#>ta,SPA0!M9u@n`6<2[h:9g[J:f_6F$mE8H*a\]I[rAJRWc/)Cu1]usG4
%M^#6&>IBeoPQ@SYlA^NPeTUO.PMVnJB]%'t=K7]+Il+2cT1kY![JJ.fb!G@aXSQu_jVrd5\2D^ubYk[.%?+H5pH>VgHG*pu>o4%,
%FR+IfbP5@';)\*H^PiM-g@\QBVYYH@UBGt!'uAE5RFA#:11\;Jbm_P+8iINLG+8H:MafpheBa@Kb<h^M9'lJqQS1,+A5f[qYGTO@
%?8lM!0K:/^_B*2ACV!pk,t]m/o]]ba$tB6$CF!P4+l\BdSWsrFQ]:EI"-Ikm/%@^"`>\;V%Jemd6dG0\dF>(*(2Lu/OL/+W?E>=-
%*)qhRjM`&.@L[UfL-3aa_c:57gW8Tgc-3aRXr:@t,ek/]`f#!"`O^%/R`2l.#TmIn11;uRDZ"^Rea!&mR4p4?Qkh0QeN0g+lRg3_
%2s/:pnDp#c-\Ga#fP,uqg!7H_6S33"Bulsa#Mg%!V@LCLB!JE,lI2jeVI"IZcM_CP:9=.`5pa$j%ZF:t8:Hh0RPo5kaH.u/A2abD
%,""7E))?P&11Zg.g-qHHMUH#TY\]hQ)iaOq\;?1S;"Mr\cGgsN:92e"kVh]FSSkhuEZ'.b5?m3pIZb?91?<,Ls(u'N1;/,eXEd`L
%k%"Iid=P^CZ[ka))c"kHRM;[gA:&IOlE?]`"WTV@m*$a0K8,r[I*j.71=[fgr:C6hoA*dIoYD!=3+q/1!VmK$Pf$4m>-,YYbC<ea
%+F#14UF(o;b9HJ^8A&1>W^YoYOa("S?@DpBF-Ln]BbjIVLb&tr?P\Kb7H.m@GkoD&E"814(C?m6A:E&s%Re)gdi"rAI9FPe4;N@A
%,g.BCFH`/-[U3.!j^IVs$S/*A37IlDMX5]?VI(kR_KUc2/UpLlgFBMAe7I@k<mb[Ul,2lrj#C>aEUbrb.5m4Xn2@0p](o9C+L<T(
%Kl*=m(hU`F0&GSE?Z0qq!aQU\E*Bojl,HsnH_*FjRL,@Lq7u<b4pR^)bm)*[I,riQCtanod?ha(s2$^HfacfE/:LS9^'W"=pl'+q
%Zc-^tgei(@/1nUgh>roC8Js]G3l<VaR%NHtijBS:TM.r@0_;K]R$5eaSWf7D@iffR0HeG3h*sQf3r7':ma#9]l<-6NqK.4R]:R!l
%XoEP(b%l3kcqLq&3b`^tFl"mcIb^sSc8TcKe@D[3Rf1"Q[<s>$k3m-4/TJIn@_%FZK;W%bAV=REI"2PZhFpPhghf9fNqJonjd`CZ
%@+r<$hH@8Cq6N%.lKmDKe`L=Tj@1Qik?4Z0mq2;+m0p_mig"tNkKe((q%g1+>J/C&HE;[8B$_s4p9<%/I'U^o4=qjBW*_KGfmhi'
%]R+]-IqPe[SN2,U:'RSbl.><-iI+&mMm(m'9;cI^'.nU+aV.f>5sC8Wr5B?1s3j`i,2%BMdO^t4T44q2G_1=S[.:kH&tOfUj;(OQ
%09"pco%(Z;:,-ach)I$Y+CEd@)hqd0)e\"cc=."RH@%9Nl\q;Ym+%[QT/Oji)BD"'o_>8hQq<;tkuMTuC?nltR3dmVFqaZqm/BI>
%b%hk1Y`>ct7]"l70kdq0=WT7heA!`Y3.on&%k`$VVLN-&MmusdVLY,=O4(L!#Q88L2JR(cp95.[4)D>\;(>WDVLU`JFH6YYOF[h_
%@b,q8M6K^`-GQKGG8]7Q0G?KPcY;BGg/V61);:MSSAJ8OC[-'#;eXu+ZR'IC[0/XnoQ$J'9t-RYn!AFGM\@i&c]HEL4#27jDW=4%
%fq%;-9WVf]#,hG@'5NMm9MC)oce[HhlU_!`XArQBs."DsN(XIJ+:JhDcP;i;9a(8CO6Ff^4+/uhRjfN'n:9T$8^YaDeFTQAhk)a:
%Q"Kapo,lFNiI:GZ$[$)+4)*b2/Ai%7DmQ;_A$p5WRoBUZgAXdGOa1EA]URAjo?LrD(Mn9DCo5On1+V/Djq%l>n<)YHDRJ:^amoUi
%.HL<897:(@JWHeVH<e_bS-_EKM0-(qoHNsj7NL4R(:78'#j8es]%CKfCUR@EU)D2*a-5_n0Y/bu#@iUo^>LAI1,snbs/M$sf3U3T
%Bb#@dC0B!TMk.Tkf/2jlXo7=!$naI9rcALl_s8SS!:dh`V03doSNekXHn]Q8I/ARCCu$(>S*bO^UtO&c(<CCRZ;L"UZ7M*:F`.UD
%QpRjBAM\;5?>oP,,=rf#(L(#7k&b/r$V7\Zi*t'5AdOH,Q#@#2C?s42hkP:>>flW=h2GNlCYfarFp;pNR=qPgP@BcqgJ^+.NrFn9
%R*9sJqDSRhX4_Ai1V?Vn<c-AnG-XO,9%Bp7k"iRZM_&ItWneX?DMAFtP9ms.A9L(a9cBh]DI-l%bJ,YA1[>Qdc07jCr9PKL'_BO>
%o(HgV%#`X"AF?,?WIZ/8`l$p1WG?r@*J6SFD;"^+D3HJ0-@\`/%nf",Y`8Z4dI\soT`;k2BK%AZ=5JhFOL\^LEuBA/H'c&M-s4RG
%6KUb\*/]o[Z)fr(0,N>c.!q^qPk[Hg@eJlNI+<%[p@IlRg^JSaXk&to/B]iTiXP4fQ_!R+=f9e1c*3MEd!S&`o/R3'\'TLYT_UA4
%ksG"?cYG`#ddBkBPWtZ19V6bHokoZKZN5-uaS+;\Yi8B.ZY!_K-d+RorgJ!QZ>@^q_6$i+++R^+)n^aM<W)ugr<Ck:iq.o:iEA`S
%G!!sZZ`n]Qe1>hPffmbCCCa[or)<0-o%hgZrSYGFa/2kA:&S:n(,))E"t>U_I<n':8$74;^U&=hRd8cDM_.,,4k6PM5?bDgS95%5
%>C=_B7KST->LP@#B\MKY?-<AjPXj"1rau;m^DXi^mu@2]H_'<YX4<,&OZt-80_LnZ1OB?+gHNnWlD*$]Tu>rCS5ZN6k2h5coC=W]
%H!?kHI$%?Y@IZe3Bf;!X(^+1lj$"th[Of/23Qq'iV6a:j#PtD]*Id6"L;aOpVU]?jGRAJr<TD(^kJ^J]WO2,8Z6"7]:V"fqdbnTX
%`Z/mLQpjYp*@[K(Y[H05o*b/+ZU9sGX>UHkg3c&q@F!K2)nMR@S>kCuOp-XjhgprVd?o\jS1ZQ8)3C*A+im)Aj2PTS77Lc:?/\4A
%A,7u"hAg&_ZG<]cBM>t5?">dh<K/Xe)N0QoXCO/pH-0f2!bQ%")KYC#MRe!GKcscJM/T*7q:[a%%#<m4gT"NQB>:?_Om/66s/SBK
%($Y"AkGd!"["P"-cn"arq>Ia'L6-'154(5Z?c>A%R_KQeik#QHp!Csr4[PN1C1\dO>^T[_&aq=2]g]Rmc1,*EQ['23bsT-&QQL:o
%Yd\aE"252*/HWXT^paUE('3;:i*->3EuXW5o+^]=g$@e`@E3C8P0?><BChVT1![\CAVo6dpj;O!pA[[J2of:ZR?u1A=^[V?=e)B1
%Z$JUOdiEN/jeIMJRgu-[HKCD<=IXKqoo%6T$g"cm?C>A8lK*C7,).X6b`&@$rT&0bgn]JHn>B@MEZ$H]%@PUTZjb.41Ui=/8N0GW
%JXPi3^uK]b?U,AL(<`+E8!4`loU?3lG!$:2b%(N^Aj#,_Yk55M1%&X<'t9fD?*/?PD7:IdK1;n=bE`/JDK8\F"W<W]Xq'?.P8gqg
%V.T2%<NS,2)X[OIlK(^.S;Sk=QXQk12Bn]^r0JA6e74i/!N+$k*iZ5#brU=MX_igZa7NTj$p`%*7pX%dd(UKt,c4e\Abl,a/ACU(
%PJBl*eBc%]$!DfR<Dl%udWX&U2#`sfDgKiJ[Bf2PC#'b;]++?!-::_6f:2a$+'JN:W9R)CeaBfNJ5iQY/d>f$l!lt-Q#@#2C?s42
%hkSu7\0UdKh2J)L2/`gI3s.J8/?]]I=uQUS#4niMSfIYCc$qM;`TuD`jH5!oa,SPA(0T/!.8X3mG,(Mb4cd!cX7ii_j`Od"eXHUi
%K,]'`m9F2,8Q>)sF@(^Q]osa;n(_km;/J6F10Kso?T!I]GTlAm_uR2jfSPapLmcAkYPmO+a=_Y1>Vh\7_jr2sr!G)?6W/3lp7c*G
%cI6Z?k'A[QD'&DFA-$/j1?UI-(F9`%:&eOa\PQ\AH.\%<"c/T:OYaMgMnLNs]dSfP.#Ybeko3I]F"^-46T+PfFrp@OA-$/j4R0ml
%PTepm.e]TI&t#YbqK^_OOp-YEPPUo^8i)BPC,.O+'r:.BBfXoicH<M"D*a$3He$.&&E9&%i[/:l=)Tsl(Uf_i^S%'&f&lt3%ku8&
%7;I!8Zhpi<r9"lF<,l(`[[Zm?c7B[c5>uYA5./+$F:1N]du#a[Rk>E2^S'fY#2?_4<,U;TKh#]4(*1*R[.g5[5'40?-HZ_+9j57%
%gOEO8?Fu3CpO[;_T`95:d/uGCBQsGldk;ut;UD;**:>Uq1=kq\Nq!$8H9(bn?&uAc;XpjBD!/<#7Gn93rXVGgeb!GYrG(`tlHQVn
%<iG_\[Fe=3c?WoI,D1HPG.XL>C-jr^-_:6cUXn\\)g/a8'a8?jH3aFrs7^I3d;mRll8t7/RFAS!bM9!K>-@iDgt]r>E3<^Na:pXB
%ZR)HOOCM[;A=;5j]kY$K$<NqOB\+Wi@QY(K6Q?4R$OFo)UFo$^Hor7b::i]'p.'ZFDu>f$!bqUo0S^Z:Lt`)\jXo:F/0"K.laC;M
%*aLg]BcB6@GYhjOGi<t7WTW,>&]n,4)El2"i>`-p0`+27e&j8Ukr$V51toS7qV:\jr4iGPb'u9`".TeWPeM-pL<^[N[a<G1/\TNZ
%=45OsK_>dZ4$PE)<S-LD?+\Ik$XJ+%O4^Zg9`t%L%GfMb#;9=T1U'8'9j9uofQEl'?!';@FZ&(*XG)#6:tbk6AK)#B]hmAiQ$me?
%m96s\RAd(o?2&3G0R_EZ>u]LCYA4p0&h+:EdnCj+[d?/FlRd5P6>-<#SS^!$p-NCFFS=7-2E9.!927@CC=^alDHS$HBUV]q[Vb#R
%WgdieSmsBPp-N=t>@fnm_TcDcm"NSgA4C0kZ/u:gX/bN?Qb?5K$^JD%fe^ZNo)mHA<OT;3faF(Y:tZ5A4_p!65;6YLfq4qM3b\3$
%W&jgKH#_MpF>e2Q:;.YNs"Uu++6@q,YZsl]\Xr+(\,t^S^1ZF4N:0r1.lfAp&qB205PIE"qr:!;m-="Of622,?,qU+$\,qmf+-T?
%1q:!QJ@"QH+&LQE%7<Y\/5O=BZ?aIj&]>rkVh9(8%WpNK#m\k3LAPY6,5AMu^>,kA]Ab2VYMZCh)Z>,;U"_ZC!o4F$L<^XD%*#FR
%fQ;7"9?^T5QY"%fqu8EGZ8VRH5C57gIN#?Gq3Gs_*c40n9N$.j@2kfW'6H(DV$l+W>L82XnWrkjl*cq*qT/;LKh&!Zp8aUIj^H3$
%jV]BGXBRa%$-LiKBs4l+(p6SiB[F82@FGd^B>\\]B>@*tO^lS+Bo9Lh:ib9oHlqmDpMIgWO@oScRSD8_0m+L[AXV29$!l5-"MC`"
%6k#`GbKsIj9.=l:eI3G8O]0_K4#Sf4/n/!-oSsG&><#,G=6F8^]L(n!!0Y6``&X!SEAcJFS_(u`a>j<F@#dDpdYR%a6ViLrcds`b
%)u7j=:5oi\a2d:AlkEN(3PQ+!,P&?8*nu3O%4`W`AJ#5jbHQ+YQXa2'Y6C:?6LHY"iD+L)Lp1S\T8$c_VjaH4%:!Fg1gA`)9qB+D
%*QuuI+W+=4E60D7Dhpa9ee!TdSLn*3d)joA_HcM&/g`XmLF,:P7YHM6TJPfFnAo[9c:m._LM#M6"?U`QB^2>G^mTaig<mjs')M0\
%[<4i<8E*eg"/K'HOi29k;+L^*N_9a.E[A\V+c,N./s0]7OP$50OP2/g:!M(Bo5)T(N9!)IS(g9E`?sjh1f7Tl6JEh"C7aa+K&6(_
%"5cE7,IR_P+aIU_L1J+<,/JfNL7q;g!:P`Z[S028/29RZ>>MPu_\_8G%I?g,hK2t16lR\2&1_K"]"i7g,8.\;Tln4",M\Xd)A[Is
%UY+eEd]j0'&T(Cl4bH3X*E1FtB1o^6H&UmEs1*-#'Q\FTA^3K?%Ge=;)T&jUdcHppCT*Ai8P:[YR=t*%)^L];dPEkU7!qpW:j\=6
%1Dq(El`*i3*)J4>PIcO.+*@kfBWP?b:iHQE%7E!DICM>#h3%7[p1Ff=Wb[cF)DP:3p)]'uDO\(11@OI^a(XsaQdENa$F:2RNf1WN
%'8Fc!kegp_Q7JVm7p6UC^?MmV\5EERA;,OAfo4#*qEFG%9<o+'f*58e.gAVt-?\I_Hi^!%KF+,[LVk8k'4mTrADa7Map%I0j+L]B
%^.$%nkcQqE7S1o3[28Cac4VKdA,.;iYfs=-a#&U)5j<&\RHNb#0$>34&jh@*9sJFuFIdLq),/#$\:=e$,=qmP&9iC`>@7oCfPF/$
%+Ie-;(6[Q$h-uj!\.O]o%2aqDM[;MGZSW6>,)o\PX,f'U,YRn0:hU;<Z_Bd_5$\q$^c2WRM*75L8&_CsL_LHXNata*]I=-tX[lV]
%PWeH_OUd1[OPWL6%GK0c31me3;5Oabl4V>Fqae0@N,#r<9ameJ:ltl";X`@<@YOUkI65A>(8E`"=A*+%'Afmc)l3?U\qJ3oZ,f0J
%&gT&HOb$@LQ`(%[BI&H0oGKY!RdL2gaFH$!3HE,7bRP2`:sGaJN(E&dXTP62*E"R<kRj+W1YbDAj[k-OZ:EJF"M,\cN8P4n0"Y;[
%4U?g,n.3do0NkaGZKi&<:5fLpdsOd/^r`&1A2W<pJii)Zbb]V6Ts?I=AldU.!M1g7U5J*t>Gtll;*J&k)fIFBS!luT&3>`H<)t7U
%+n8.rI8Wq2XU(q:kcAnXK+\bC1hPTe4PQSn)hLq(Bt^()TBhXEYh7)fW(!&i(CqP_@+a/!18RBq>ojh[OfL,ro1AEJ-Lk'r<>^a5
%Z\j?Z`FMcoKHAc>\^Z`\U6ab-c^GjF:foltX\4flWD_R"_=A38]<(9Sf5aS4S^8NPi8@+.(lB-NRM\`&8-(b(ce#UAMaA!`]IuUP
%BgQcLP._T]UFA>l1M3jS`2eY6qd*f2I#VD?bI28VX9HM)\he`<.'.0;?Xu_LZZoiQ`%aiM7ae,YMFfO)jdQ6,0tcbUfGYYh1^K'F
%`6qR:,`3%!1&aU/(j-:`E_L'kE,,3cG)8f,cIfu[&1TS`&Lp75oWhJn@-ST*O>cT&G3?Y#g12PG14&<2Zf<f_&_[FPFCa=5@W9+Y
%Q%>nHGIp+8R$"48Qb3V$G,T>7qK<Rb@sU1O>JLQE1QZsp!$eQWYCr=YfK&#*p:tCj^1,H>LWC,1UZ6EKi+ZX>(;ttHLK3o,I&pHr
%*/X.l6l.BXaW'FaMR'I-iPLs?b8W4'Q#\&FekIo6,h0E)#TeXQe0V=BLR0.+N[Fs*"Mp3'`j@?@MZcgOQsP_085;JHEgWhY3\X\5
%GgaW)?A+lT4m2SbdZT,=T-P*f;I^>":o)-!m,UUjV)M!7W9FX*4<i382OH;O\@*_o)ejDW(La5;bU<VrJ"oa>=00:j:dDVU>s.ZE
%>Jbe_?A/;?.5Qm$)Pn4B08]j^hAYVnO=T&s>tRm;GnCSAaZ:8r]+*_\:OK",3nnGp"O`d6;dgr7(La3OF\59XMF7en&P+;C"m1Vb
%L?l!9KLi/2]SHa]#%[pra>k/2&Q2V\M(H@Q\u0n/-p8@niNDn.Mk+I`+3W/?,Nh(W2WS2Jq-jh>j-p:'?Q=8nf[^"#?P\eQ*ArG!
%Zdbr`n."WYC*,-TpZS;%^m$DLN4j<;$C!KtUtd$iOr(&:^?4P7lK0IR1?s!9GE9bX8E]Egd_0hmk`9Jf[k[E<3`$]49RNa531F7P
%kKK^d\Cn"efTY1u%<V]J#E=1un"J0geEX)5!GnW/%R[p1Vfppape!6/M6-P0RGsh`@dG%tmN,r7FgHCaiU]u-N@`SmET1>2.BNQ3
%>qKI?l!SObZSq%?3u:hgrdH;SY4ns+P_h:4'MWaGrAWg"@.M>Zs6]X+QRMT'rgX&hScMRBCGfo!UW+HLb<=X!<*NiTrj,brO8?k*
%SE-F,<%./cOI\7tVe;D393?<d@%.SX`"/j:kYhQ/=r(RAI-DqOi9r)q8XFe]7`'6%l%;p>dl?U\G+5Cnhks)1)/_8grW=T=IZ&"C
%2b-Vu!s*R^.ct`ukZ@*.=oF#qq#>Ro\*G5$P)8@dg5HG99H`!=oj!ku!LIJ=RG4^L:C#G!7W,DN3OhcJX$Wl7W$D&N<MgFI'+MDK
%gh$/adEV?Q(P>c\oqT,h2Qchu@JsH=gHY+*]CfD<^E&RqElV%,L/P54XgWSCeLl;;3d9:petMF02A/t0mSHl%Ctl<eO/bR.NK>\)
%.sJnHFs8b?eVUshJ5>N4SZ_CJSf(Rp<%M))IoLb"0cWdE!3u:0NF&CW7jE61poC#;f:2a(EO43^LKZX9B2))6A(30$H"i^9&PPi,
%g2nTu>ZU1`,\((YHfrMVC9-#\cEVTHksp+?D!-C9^Q[EUpA0bd"HjN&8MYLmg$8X]2#s<Zb2J;_IGXDAc9$YBi3Y:lchGgs:`8)T
%\"C)ia48aij)WN376DW0IFu)(#`3T.5\<9p5O;Omec%k0orQjP1'?YXh<e+$DPrt[YjP8a<c)9b.99ZTEJVFB%P:!=_MR\<]"Q8k
%4hC.t"RcW8^AM%sdN`8e''`qkQZP0ikLFK#Sd4#86)u:lpFUIfnAF&bQ_>[(J?mN>[X109,/`Pd)LjSI.5]Ur-X7P=&C@o:Cc?B_
%i:`+0Hh7k<0;Z+Pe?67WboFs&.P!trV('qefT66?T2W%G+V#+0Q]9j)aR>ohF8HF)lTmahc*5%PTRR8A4J@Tq!pE:V%Q](r\sJeP
%:BOj=;/8$B5ojC*i@iPuV_EkR6s:>57@0m[p'6#+2$[ShV(Za7Ri"X#+T2-`_+m/!?4YTBo*I,hg0K1KgEs&m%a6^?$?s+H-C$$t
%7:^lbq/$YWGE28mGD#iT:"lXYh;3GKnegk:5/^.:R[5^T[7>(%O'N<WDQeUIm7sSe8fZCDKIIOT<*QJ`eKjcZr]o*XgrfW/F1g<m
%l/WPl1C;H%T0A`*I`'%EI5W)Z/hI"+KalWDgp$98(Uj+["mteT_]]*9TRdd`9EV0DDrp;tfL@QKBM@k2X,D:]mkq!1Ac2\?][b:k
%Mp(t8?9-7JeP%4`j^hNC)`'*I'&uSin(W-:OI@P"=3V\/QCdh@er5=Ag8J3"$fLW($Ofe=Rf1NCVKm4LXtk_$ZfV$'ZUm4_I#)V%
%o!_UM?ocEi1U83q`Si#1l8c"4Q'"RZ3#c+"I[nBc7^+DgTq,XB@P"&q_!"scOjBS@:/6+pan<rBonN6tWf[ZR5mc'\^#j%@)Rja^
%2,*2/fh+^AW>1I_+?R-WC@A[c^SkI6<5B74dB2Rnh:);T34uW0q2<>:NN,nBZpB]Gd467C"',j?37sAIH'\9J"WCYc=fhqc@j;+%
%9i:h2),?@mVD5E9W[cjB5%g!]'dB3%%hhAUM5oC*Wihn!1[]YSWD_WsU[-?GoYt;ZC'!?B.[oUX`4BS]YeuG,4goJ)X/b4@$#0JN
%qm:0$^=!1rG.mG*";T[NdjdEGj(q"7J)!H(/AW;\qm\^O<99q3ch@Xa]lDt=SU0V-Hd[`jdBk?B4[jmk<5bD8SEDQ*h=D]OWL2,[
%:d)*4)(JE=<*9#7j1aSJ1/s<HP+coD-GsrBb*5RZY'.jk,?@5,*lNAf<i3IlQo;dYRlGXo"Xgtn5pIoA%=9AQi1aW'VAd2]Fqe_E
%o'SI6Xms[S:QkW#`Q!k,C+jrAG>+i&)h[MR3%C(h#2Rq3?A=>_@`>Sf#3tlNXXFXA-:b/tC[JAnad"J_25pR&)N6o#%#J!b6HHDg
%J=rm.YI<2VZ.$;*bNQ@_57?<=<2E>1b)!D`:9u@^eh6qc+#?(\d^cFi`mipD#OU4^7g6oMTV:$[#:^25)olPI<1M4!MB.N<lFG(*
%e,@)SF.\f-%sE$*iE5N:Z#46Dom(g^OG$0g9ON@=<37sEOKi0q_`1#E]?]Uie$Ya)ggj(JY?almX6Fq0GR'G$&5`IE'-&[h"1((R
%gkfSS;^J3fD)T1T<&<>TC0l(0bmBgQX+<aP4R7+h42GQ@B6D;e8N#E\$Sgj&8t?kH+f-;lY]-iY."`OteW0t8JS_*9s(]-eNm]h4
%c+b1!]ghalO]p5UQ1kc/!TrBn34[OlQ]VZa0i(:']n9F5c]'^O0L+o_'58!7EjhtZEu:6-]kl2fK*s!?VD;W5a+S9$P)[K8Eb:)a
%=.Ge/&[Q@DO`fE>A_g;sW9uVNFEOFWh20R/\Rq>:HH;lG.gP?=&'![$0km7H&8`+I'X/tFQWfD:YF\#!DDJCU%+H-Ll:LC\lL&)S
%.8s9`6#h8+ZV-8rY$0jklcJS.:Fhq'*o5_P^0c;+hV2<dCiu@VS?8ElD`t;Z>$\^HCf^/@43j=.A`rd`esiRu?Wp7VG<Xo6\^__M
%ge-7El.slAlaE\`9&E:>X4j,HNN`-_>FV[[]rg-!iuni;[BXeR.r.<:(J^U9hV$Vi)@+7DUW9c?5(ETSBWRd$#8kf><UR$%+.r7"
%hnKl,O)(f47;&M7C`i;q<ZX?3#F1Hpk?[%nli&s_VKAOq5>LV5NpE=IDdS"j*#oacDb#kgem&0[[<Z*SZF/Q4?`]Jmmg^g?:[9A^
%%,n8Xm:^]?3r/?l/[Vrin(1>BBDphXqb`D_jP.@G:#GcO[JAn_473A$h(*q;rRuh'HTt-Wp$Gt;2=LF5i*bqqRj[a?=s(O6rqE7S
%>.J7[?7MOL7iRr6?1ZoFiRR5&Q*''E2jIi^nDNikkI8bqC:3=e?8Yg,-Tbs'[&uQn]%uM>DsPZOcg-;9h'_sK\gsBX_9Tm1*sf[Q
%f#I;;'8CKbhL=,bg9peo/!""S4EN5?5AIdt_qp4fFDKY-b5&UiG$-=Yn%AnK\b@'24&`2`2iA3I5\0iTUSYBK7\Sr3>qc[/G4'5_
%[l86?/$Je-^AF\4rQ2VKfI_9\Y&(hSIp+dkDh"I0+1L\?8<9;H[ui56S9N9E2PTJViI'<]'+F`G^8'q"DSI_cXDZmqgfjO+`F0b!
%nWeEo.PQg)r;3ok5?8h,2T=5/]CH?4?X,14j5,_*`\qf*HYqm7j793IH?/jQFS,"Kk!o=HX04q9E5p8^DS_XV5cqopE!fsH.HjEc
%p9@Z9U,)UHTl`]d/i@rN/E`f"]bVTR^9<br*kqDHY#b#K.6,@d?Mf(nhnKJ@MhSjma[,O=erMKMV_Cf\qJ^\t#lWu:5F.B&Q+$q_
%IBZp)I=HH?CjpRLDOate4foDo*pA-la5:-G^YXeOoF?=T]Ei\)*k\G9QKp1@3tg-r!ltHAbP^[k-Z?%M(o534=5DRim/J+H549#:
%JP.+e_1X)RqsH&heH&4fD@muM."A>U4Z0rj4t132cW_ad_</5O8dTb'_<OXdj*seO.uml"\<7]Q5#9IM"2Y^<US@&LcI:_8\P@OY
%\T57NXg3'>+s1KfLEDN;4'spl-?4u(K71L3=h8gf>Wd*$cc[h#q+AT/+9ruLUhgO`F_&uROKOLg!8Qu'iosUVkAJf+lj)rKj'@fX
%Hd>l6A"EZ![(Nhnm&,ub5B"1__D&gbbPDPoS&]uWYk-g9D8&tLWV?%;HNM&_2DjHnol?FJqKnLh^",ZLA:HF:*^BUXO1@ZO!F3$r
%9"AKE"_V]H/a8k>rp9#%NEUZ'mIER%HbY#,BXQ`@K#=qhGG(!5.q&[LjjhX,UN1:tr=nUjSDAs4?g\Z!Q(9_)3gWJepRaH"hp*+?
%`:D[Wc_O$c&RKiF1b2e.O5?YGs&M1hcJA_Cmac^SHM<$i_bVlQHY[J^Zs.&WE1!RjkIJ$(3+'75<]6T898]bL\Gr5%U'5@kU:PL7
%GYh^mo]'4fGnP=`TpPWD.86sc0N>mc[^*0o3s#:c]58AV60hHgnEkKuh"?;<>FWrrH)U<$/a.hXHNjB.i$^Q%**U`qWf/tJ8hRQ`
%[Inl?10%-mIb9%R>AUq>Ms>0HH2l?Zp1!9\%"IOGm=ejWq!.[17m:1kIgfo=/[\8:/Plfp7]fi//RL'"(1k\XE4,'$E?ik9NkcZT
%DjM3;pLGAK^6c?eW-g%K#q(P:e;e40Mc-hkAbohnkNDN$Qk%FKB1KYN,\S$LPe+eI/Jeo,9_:end4j38M5>1>a\d7?"a6P'L??qu
%V>9`^mO$G0o*#&?$<1iipe+u',U,0S.nF'4I_>\Qp@:(sOGh#pWKg69WtHXCM.dadel.DYR&[+bl*3WV$mT"1qT2Dum"7Y9:LY"p
%=i`o`n<N?<gl;8#hB:O2@#m%TnaY1j$<P/!_t]rF1e\h%(gKC^`/"IP<_gUa0o,n=^gVo',iI$?$lJ[MT8k+t%.L18Yu.bj*qfJA
%QCE\@ERHW=YY2,0a@Hs^+dpskjZmBW)XG#.%9Btg\gK6B@Jr=kVf5g1rMU=Oj(\$ebXc7V!&N%oVK)6>B3/CO8-fL=HN/'A-[ZIF
%^4"D3Cu'"L66'rRW:n+>g0d'>G:MKVITWf/HB:Y'VDXCc4m<!Kh#W#&FM@G9p7'N?oBXe)\T[u4*nrTla0>GfUVe,&(Kl#Ri=8=m
%nVDst=uoqnI_n;-hY-O'aQUV&1%"\cg\XWmnSGH0Z1R%pO+I^:iM[@T[nF>;#@G*`khNVT0(eom.hl0g^X?:URqpn2S`JU^^Ft(g
%5kXMU\[HhZYi)T$CJ&9>(QM9aN<eQXOip0'eFS55iC8')T=nMV\l1a"LgMk:p03g-$+k%A*PAkSfimRtbPf`f:(/-knE'%us!2j2
%&@ml)oac\A%$?Hi#=Csd6f9r.N^_#rc_CccCZW1S"<H@S4Vr"bqr\.RE$J=N?-Q[561MCB\=S+$]dPl7@>*b&_X"="%goN/Id*&s
%X?D'5].'[V6P\V[a3KTjC&>MHNA--=#9ls*+D<u\hmR\<KAAI>JF,WrR7F$?N/BV4V2lY[5put6$SCQ6'?(/09GANV:URH3H?t%L
%!HRm['@S$\\6A8a^&7i]pK'8S=7L``7`7!MpP#nu)B?,m<hT9Q&&#FOACoI[F3>BYm,<R$i9T0eO;or<T&2/lID3*!1Hmj_/FXqr
%!9[2e'[C'g5bPE,@YKE>NcDtg_R]4#<cfSIH#:6DdF++UcXW*E;lFMu5Nfpjgre5%%rPIkm/`*BES%tpR(l\j4T+9N[@QK7f6^_K
%`q"nC=(81^%sNZXY7BDu81nhnqec`tGOB25q;?KngUYP;T([=Hh8IZ<4;4Lim%IjTO>ACkh<rr8C]3A,-T&\pp132&#(T/0`%Q!Y
%SaTl#Se\=m6.8omoPVY3nEF`HDnK0[D]DqFo$)][[IWT`p\3js.M%hH/PoaA+95TI\%u>:="6_`\'>OcF)1CBCO>C'l]lh_B.F3]
%Y_N.$@Wt7B&#D=YXd,K%+++`l2U"+hb)a)J.*8aNZAGjF"S]t_;U/m;,b%Z&EkE5>1I3aMBX)VVD"a;-V'"8PJQ#GF;+u)"+WI*H
%qt_'FF",,+rj;Hp79.o]n('#=!m;\ZqSA(#HC\dGkf'TKWIEg08et\.*Q%V">,h;`2B/R%cE5-4:)IrYmG0"6^%(Jr6_N_thSVZ1
%^TU#&#As$#?l0sVeJmsMq<7/#:GDar>?a<!?^F(mFr#*?k[<T!>sO.ZNAg"-I/NJD1[`qXrr,;/^+eM-Vs$CVmp9<A`9fQdFZ7Qc
%U\o9/p]s!J%FdNgbN7H8p,T@Cr7@SKhg+Q1M"/aE>FSFFgad5K1d;`A\*rq)lN_d7_>`Cc"m+n7dk>Ut>d&?O#DN]3UPG]5:HK*6
%"50S%TW:!^d\cIRhRdi*3P'Y-6g4_M<bQc&<_Lc*QC#\SM6m8n(T2K'JM[5]2brc\S>D0ZJQ^gtPuf"d-`XjIH<hR,^2CWte*i&Z
%mf8bOD`Rce$3l1fq_5c#]6F:@[f,ITVW]6]\Wk]oq>KAb]m9YN9CVUTK1bCGZNk3[`Tl,,0[.P'cDT"KC;#&R^8c&:-E:l=^+Q$V
%hJN5Aksi"lgA.\"R^DbG^oi'1HI74]+7"=cQ-Bjnh<oi2H$REtbnK:=e)IFfgF!:3&SiKE>G&^-riluuhYNqUNM7pT%iBbN0;"s2
%P8$(=5u:oJcD/OCB:GaKNZC.$Jrj>Xh^Y0:I-VK9^Yc;I^TH=brHPr<`^iK:jLsAEmF$K0nk]j?f?5hU2@>eN>;#'H\[9mmo*;4f
%[fZ:srDi+#s7W\pZ-g=Q5cOdsHiFY)JZg/IcIqUf6s?*l68+4FIZC99dsA=%YfburNg[m5rcq=($s\:Sr5k_^am0udC"=23^<^[u
%MSYY.8oa0=s4Nr5qKCd]4:fl@":r4b]fk/R<]3U!ANHKNDu[PZriU7Pj^!%j.$^2U9\ENs5kG+ag,mIb/,Ohd?8eFa?=']qG+Urc
%Hh6:X`eTXZ->:YE%o`D0JOdH3gNn3e3)DYcloZASo)&*fXn>cQcP=bHrZ!u6=5$*JF;)gaO2/Q-Lr'>J_\`^J[iV+u^4):0DHJAX
%T'["[cbB+!V:FTuH#rf,h)E-3++=nVFs#JV9_8+)0PBPjaar0mQU'e<GJT%rHrrEilp<h5SQmS;\D@&QmHNHLXVY3tgL'iSP>4'/
%_RD_]dF2Z3*-ts@Sie_P0p;&9H42F'DqXf`gj/q5W>YF*=m>22]++6kI"sMe[C76)@D<bHV="+@$p[%P[Wl.oCjs>g@^$KaLuC+O
%q-[piZb%1F^fc![4kS9m-:HlicF5\R?f"h;;L1iP<I^qi;X:H6F<83%b(78"i\d_E4_5J178s.g0b.-AeF/ZnG.D4o@Hb,sEXKPK
%#O]FO$IIbL?I0!RQ:;8bfRMk>l=1-j.d_?VjbaAQp$gh?9HkG9IR0H#!YFM][6BE<@6;hp-^E<!>2Q]-m6fJXD*>N/+Y0a>d*Zp%
%S">)]C=2UIF?*AC4ob:^5nKEW085_(Fb_.MYor>ib(TY"J?!+/II1RO)oAW;.UG;CedAP1jgRXJYAfq>b)a`dg?*h6^DC0:Hm<<)
%)n;bb)]*k.@)'%s0<O[AW(RB\Hk9%7AoD@MHf`uMc52:YDKRI@DuWtg"8VJ'Itto*NK]9IpE7'ImR/[*MHB9[oQN;k"NOrj3#Wb)
%at(*u<re"_f>c?fr"A)\`>of,P#!#8L'^A"\$anh/?98,ZF>J6!f4/[U\LkUIj5'%o!nGANt`n?:5%o[dd-!*(r<k2fY"o3.=>E(
%X)c^9k^^Nl>$LFldrOA0mIbHBIBBgII-kcJIrj#lBWU+'!3#XYeY+)b\01O/2"Zu8,Ha'4JTlKeW`TO)^E6faT7I[.d5F`(NG_W+
%G92ti.P8LpB&XfSEr=;_")u6j.[@,7@.o5h@=9mM3trPG-88&:#s@k*!%2@LAT4lb"gg:<d#JQ&4BelsIQn1P[J]LW.QRk_"8gSc
%'WgnPh0Jn[b?N;@;LDM-qc*S96a5IW2IDq\9.sUfrZ84(-_$g%<iOq+Df'lI"!4H=H:9VjJ(-aJIlmrlHu^+k\*S;nQ!AaPeQ[M&
%Hg/Lj'=e'ciA+->b"Vk_+5Oi05o\9r#IfVP8uK,hqr[2%F45F4j$=R"U^'+6S!BFMb"u/nC.bKRU!n<3k1I;Tnn?5F]gS>%?m]6<
%mQnOmM6?^:SZcg+7Wc=MY8sbbeH^GTes_'_o_li)D4jV<&EWr%b,__dK?CYVK/;<!EM%i\[J&mZ7Dr"/Y0ku*R3F!hfA6Q$h^eru
%j3q>5k@._G2(ls".f2,5rOrHMp?M]tpu*j(\CZAsY2H[2_;Q@-0LDC]^@cmZJA6=F962;S^V'`=FfG$8D=c;SP"6mH(%,u]Q6%k)
%ei$So]I3p>l8J?[YDLVfe:rG#.-sS.$.l?h5$"?mm(R_!l`R--&/.NL:9T-P>LE5Q;17'lNZmi.o(Tb]ZJTA^^V2pZ"1i.46V@;q
%cC<WchhAAhWI,c?H"FP$d4*\;A\7GPH+E1J[pQ=8^n+50^BS''A`Z*popq0*[1D,._0Tas.4ijD\p>87Q?j(3+"sWi*^KqB"OYhu
%*Zm*&jhW1+S)a258#7l`&%<9s$Tk*P+)K<CW'8GW`Nu]C>%tTKI$\dS1un8lgQeTO"V5=RpMmU9THKOdG=!=t`#.#W+!6g9857*Y
%reSk<ZT;[/AMWAB:[&[QUeRs4cd/\ZX5CXp#43eIp+"sc^)/74T1dLKSS6CRA`lQj2n!q&m5sY&h])_TNJd3GJ`2:=GckJ,)#_3\
%(u_fikBGKqJ'#'5anCcratHhDOM6u[OJTj$\b>e9FS4eQjW4@qq9pAaoGpEL0Xk\^e'ELQ%aSm<SE9c6NqS/Fpc)r)pCat4ol;@)
%`C>6U?Lm(GK6Hp.G[',mooI,96*&nUCc-g_j/8*4/kt)3gMELkHMr5n1MHLr)d0Z)k;dptWOd`4FlPP<<M0iM?WiM93r-)8*dWDb
%#s*Q-EN`@OT)`%%lCHs)DQd"OgEH)ILCOibgcVR]8UV+\L1bE6I*<?bDB$`n[LPOEB]GfJ[Tfj74YG1Ik4eu!J*UNK":bu^`"0cG
%$PM1l4l4#8/b_<.B(Y^^H@$[ebI:t0OPhWE?t.+?-,1k'fn_fZ26s9LST^oSf'Q^!8tA3$r*mC6a7<0$;nKp,o-7YJDut'DpUEB@
%EjEh<.E60c&$](sD/>8_e43Q9a8$+J7u\k>@R'j2eB"6U)lG?/F*`S@LY_*H>'CqkKH#:p:\ZVkSnVHE7I`Va.&P3OmmPKBNU*&!
%2V[75<fqMT^eF28a)@H,5;S,E6,2-VK,.IYHkoLhJ@)XD5bW@;jlpA=rhp$&[%^'_ko&`]Y-8=3Mn7A>?XO8i2Khio\7M*4-p$dc
%`ciZHi`b?H&\N:s1"L@#S=#ZZl*0[)CH^0S=415sW23:WKM>r.$f'.i/XE5T,T[Pq)jBHoRM-3k$S9_b;>n)'64?L'aH=frfFj)D
%)4%A*-u_hC:Ys0jfekd**8<3B5,0H0cMb]f/.!dJOf'P'_BY?hYcY4IWh=)4RNj-rN_WF?]Q+A-XU$no.SYl[0a1E1:!,23n`TM]
%IR>;M;MACjat04*G.Z8^C#Ur96oKWe>#%1AOrohi<V]4_.1phFf;jQ2g!i`_5"/466=V+'Oh`8_BRYV[Q>-KVaBH&u3T8X<=o5F-
%]tA0?HUC54NTkj0W4ELLY>-(>hUlQa.dmdET33/emU0uBN`2e'mdK2">SA/A:"kkVl<>"OSrQj2!;%@[iRU!5rY-B'C;4b52Rk_a
%=.:dU_$o8b#tFY#I%M+^F(G6j96np$f<\/R>Q$Xkd6qRIJ#\rVlGeC-!u7Tofp.]>Z.YUQKD=V+I0OlmeC],dmmsM*l&E_@:+h+_
%&[Rqq>,lRc=M\.aPoUC\5!QaZpLN0,Ur04jqA2B+R?1gdcbW;F7n1\]0"m+;!n.Abld$&SN:G6_O),X(K!3aIJ'o8?7^gP)l,iE?
%W-(2Bec&>:mmcMD>FA$O/k8t-9/tGP&PHs#)f^Ji:ADtf&T>@m_Rmq0Nh0'B6`om:4IKCa9jY;!:-QjjfHt@lFF6k``_&&W[_#5C
%MQ>egU+5#E(fT*FFCNDGeRAC+HPm`^Go9m'<Bl]raInFpIIKBX]rUDXKR)7R_q<4tVY]G,Oe[doDRXE>0.2Mq_%L6b=1FAsJppkC
%(;huPYZ/^,BS"*EI*`m[WXI3FI6UN?eIGIlF<%]_2iab.J(TXNZG#g:gapW^'@MS#X*)cSA14'():"!d+(.ll\*,Gnq$<10^F<Mc
%,!F2CF4\C_hslY4M/n%B?d%,)\9%T&J!R$Rc</BZZmdj;;bMK!r1!(ODEZ%JO.\CD-FG(sr[*#<+jTZb^JmYZSU^\&DuU^51kJBr
%Q$`F@V#15!DEG<%(mr4u"B<.&)LZ"Q5@AD?q1(W^'m_\2"]hG"*WC$/%c7[JjLpc7rq#9]s7j.$jkT`WdPT&uOOIc0]G;;l7nRXp
%eOEr5Ji6LKHeVC]_aTB>J)i)E9Erp8:hl@kk*="uAgW]WUX@W,kGsI8B:ohZbV9".TgQRL19%dZCVqpu-@Y4k$;AdeH^\k>W=>^!
%/QYlkY=^i.(:j3SE%>Rg<o,bUV5+=j[Iq1n?R:b*>pJfQ^g9j3j/6>UMgWpRMSp;*=]='2`>8Ms:UBj1H]J"0EJOiEqVZ`X!CPn@
%0'!.O:FV8MTNa)NP:*"@p]3i#-_S`i^`T.e$<4"OVdLqWQZ7Bh,loiM[3:W6&jY&^au20K"9Da2XC:U6!gb%doJLjj@^AQH#kg+,
%kDs3/T$<lT(#S!CnN3?;aj9IO\Z/KsbRBkkiu&0S^mTI;N&<F6B&kBs'*WBq&;:HoS@kua(Og?T05of^?&PJfogF0DhR6,SJ?Z4=
%(.es`mo+\7<f9-b3XcN1_Y$2L&j0c4pH8mE^k,J1,^:<d-P!Epn;%,HO,]]`K`DX40,8hSki7p2Nt(TGQ89SR]]3Z0n[WLO%XljX
%oF:dhVW$24I?rZQhmj4]V/&M,clE>=e+(Vs%KgErZI][4)h>kf.@WB4(t3VpoA`*)$IS'1MG]d7hj5$^mor!)bk(Gu_=qq'?:R/>
%ZD)Y7`I.<EW?5EbHA4I`pC.$XXeYD&ODW1Fq$YP5J#ck(_d&O8Q.2S48mXeLK762IUKEm)aunp&V:9PVpp!UnF7Tlj9:!*>^]O@%
%Wt?*IndPi&"GU7H)Z7hM::q:*&q2,@GsZ5KPToR#,S%-0e:$s1YfHkdl1hM-R^>hc=%Z>_9qOL(nZ1(:E+'`"As.7n0!4A-*^:q:
%Wp^`W'S76JBD\7Pl^7lYhln?r^Acl:*9h@Z>U(%EPGH>$,=&9VoM(rB*=Cl*:B_]c;6hL-D>M7$d9--?E<'S$9F",kRN/F?W"[?n
%eC#AFe1ciok($pu;1!gRJ1r\];Yjt[4;^W86-kgF#+(L'RXeRI2ehi[DrmZ?>:JB*9+Be%itm"$K`E(UFcQs%@hG2]-IhPNZ3UKI
%'bqIOo/')h6QUA%:t^Sk.#%AtKa<:E/^psNj&0qH"&PLuR:Y)WNs<'f/iA%E'%_;SQgCY%7I:@#BsSuc&'Rn/&8##<C#W7[k[jl\
%1_*XFGc>Pse/_gD28S;<RZA0m'*JVp),tq=`"+Z-JLpt=R21baV5X'Pd[bW^#GS3PM,K8GZCNOh6,6a_:QtpEC!]9Y(`YXk*TgmH
%?l='J:Xa<V#`3/E7q29@q.T:rgN<)oG10&6*Nn]q&&WP?;Ar83A]k-=<MgKcB/o^c84$I<EA:li?nX!0E>k*o@%(KL6d(/eL;W^@
%/h,3R.3Xtm$,ENr);$3(:rkVU9n965KGl<dU(3G,5"U82DM4&T*2`t-134%SLII@pI7FA"]$gL\[\Y>U$$eYQ,>kEF")&I/'T*;I
%aLm(DM))Rl6LU6f$2l7e,6W_V%H375J-U#6":os=FuFkVKrd:*%?J`5;X+=93>r*O%S37NEsA3l9_>A;5_7l28l62n19d\8Mc'p+
%fnl!j^`KSYPn'$FR"p6bF9r=PkE26jGVC.:/\t$5)G+7;BR$3A4^[hn!s(M/=ZQ]YGe<8!a6:?\bA()*"q=B!67iUS)2<>@/]A;-
%9ZM8_?*H/>J15"M`_8+A7IXS&caT`&'(.u57%GR.@AnZ2B&EO!^=4,q4Pqoe6uf5C`6,87*I!RmBbi4[#Rl?^aU$2NRSj2]e)UXY
%9Tt]?/5Z.<V!6^1#D:[Q</FJ1Y:)1OOZJ@(l&nDlT@]C"(hONI;$ir;:Dt!t!PX&X'\tou'4r)&L9Iij74D9]5\QBL0m$@#*-/M?
%c+jt:1i3\=PNu+M"YCYU>?l,a_0c]i>/=s+mtpiC1o$XZZS)>V]T"F';<^ige-9:$AuA5b+h]_t@42eY5!5(-:*<ja%2SDF<4U^Y
%Pf:m-\eX5W[&puYBb#G^^sfmX'/iNKYG"/lQ0uR`ot1Be#5_4o&*]of&&[$j*?N@%-P.ql#)i43Wa+q('K-5BPah1d`We(Qc5U3V
%:;#'\l.5N`$b1uad\qp5]TF1?jT2c7]K@)`hTr-@[@\&`YV;!9\J.P:@IU:]C>ajC"u2^G]6V_Dh3"P>LRlqD6Yq]T9RnXo\\=8-
%WMjSSWF3ZePpp3g)CVk2A_O-^9<A+DBMtg>68[\#i2]a'.TP_@Jl6c_,gE&]Prch]r_i$WJe9Mo;]um?=F$DtWSm\pl3pS]8H1[%
%MPiPPnq!:lTG%FqL#tHL.4\Xjn2+K$h2.J-VVB]9V3ZsPB00aX/"qmj?%fGH7"cF.7Hi0H-KV18Te>Jl%,LCdV3lQ_$o&/&Bh.Oj
%$Z4K7/eg1.$"0aX<D=#p8(/KT'IW?P)S/*J3*\Z2IAI2MkJROiEI(2F&LC8%4]/5iH.+,!QDGo\BGhQqm,4lL+AL<N1CtVDL%?=K
%LVZk07[EJ\9;Akh>3b2YTQm3\UGW-8;<mITq;KKGS@n0-&^D#6$F;.p_Zc??3h/01b%sF@+?)Ze"hZ(8),Z9$m4a\TgK/#%EEbEk
%W(6tlN3T4:%&HohVc&E<E?ZtNM2$Xa>-_,$E0t)9*.jesaghD&0=V^$$84u<YjR<F,csU6.]$b6`T9$Wo@ZXm8RnnM_RCqUI-SjX
%VIiH5Jqn+g#)Uu;jV4O*HpJFeTh(0(q-V0@a-K/]A&:73k7grr0I47L7Tu$e)BBl?\413FIC(go#3DhQ/7'C^Z<6pf[2DA,C&/6j
%WAKTh0j0r?;nGo6>-^,hSZ^YMr49HKd?(6]`)oD'%CZ=C>Jjn01`[AcO0i0)4;+/d\\c+dngiud"F+&'`DE/24AFuJPma_7keF"O
%Mm74@4fQ"G?63gqQq/\&03-LGB1NCtE'qdI-6tEJ20/MsEfANj=WZh1GkolhUgWqmP2tV22(>O9.EZo2<E1=HE.):X)Z(%SGnFO7
%04J_2mnso(gdq,[_$.gF*A@XkVZ_inidY]L`-.4C;Xu#dS#8)q$h=K#.5-`L\F";$9U+t`9?!XQNnQ\!/8@<foqi.Vns)+T]K@*'
%m3TGFmA$fCeVp5P#UhMM2dN@\_,-QJ.'ZOs;?^C'L\0#7GXrhrCe*anioMn^;^[^]s&a).e:GnaI65O]Z8Bi;(>)18NRL(n9PHYY
%+-_=dFB9C$b*@OB?IDJVI>krA>k;Da-'*0A99_cl`GJq5*GjS\PYu6H*UKTpqCBJL<#B)`b'^HV%1ZO4J0_8k?PQec3"l_4bO12t
%.baJRK<(6r`XL+Y_24/`\OMmB*d1HYrKX0M#:!Or9pn/)@8PtFdBljLs#6l$2VnB!CkqGIH.0_Q*#9B"hf[!F;+`^:*@'>AUg*l6
%\8UWZ/B>$M)jpYeS),tuJZJOqdZ,@N"tj::4FhX.7_!MU^sQZa\89C(2\/JOPcha%b_Z13WX>\\'3?IPU0`5S2;2%P^YlZBd7S)F
%=*`pj&hj&_[(U:=$qc1ds2eJc6c#LNFuRfoK=W%:LW).XeEBE"*SGs2E`r)F)XC%u8PGE=()0=rhpA4ff/Fd?EAiZMS=d(G')O9J
%!AP?XYFM#(5VP??2!eWE5eV-b$)6G8WaW9piN4a8(^1''J;p;`;i'JYgPPg>.ThZe+AS*3@"CX!QYF34Z'@=FK@#(J@Trr0NU[nR
%X,df2W=j`7N5H,]PR]&l_N7F/,SFJ2mjHsaJ5f<#MNBW[@Lt4%14@AZW2EQc4hR<p6Ch+J<MJCOrC_`NW$181C[EZC78T)CmTK/Z
%=lC/i7R3T-I!R.Gmr_u?e>+Z^/H@"]P2V4R&_d/`n;>T$Q#1M/e-;3TXGek4_=j#l*4Vq!WVt-&FFqHhZ8QGiKg@g_AqrPX3#B,X
%qVoTOq'TCXFQAECh^'*+B*GpD.[1orfn:?m$P5&X?[;Rg1MSpfOYbBC4]ap3N=4HFBBYZlJ6dhC$e%TpGcs@B"ULSd.3d5_!>#,;
%>#cu5Z<E@0Y@45HBN0Jt%DZt&6TP"#.LI+U*rc[73@D7Yjsq8k8cq"E!u_"@(?H-r.,eI#JWjl.mdh9/8!6YSR9u92U]hg5GOVDm
%c7I%^qU6X1gcMGR7*YuP)NN`G"16Q#UWUF.#Sp0[H]iB'T>3.rAD7L557s(:/&27OM&M&9_ag]b!.u+@nfb"[UNT\o,^0$[V$jm+
%(MMkp,P7P]bOI]2(fcBH(^Z,L4H<%t*LL(16E373H&Lj^"jcu9OnVbm"(t@/XPdbG*kW7I!0S^u(bk:@+(a09B-kG_\DX%BKbr$s
%YH1];#o/"@m"[<Tpn"@S4>#hA[Z0\K2kGu`ebt])HXie$(NKVR(JbL5g.a:?TrG7S<@V<kg]f,06j^Jac8?[aRDjfTUM"F=$aKi0
%r.YO_"p9VpTZ#gr[DSm/Tc*o[*NBJ^_&@]A`=(H=W/#VOUkYT1B47GDZ_I1oKhgb6@j>EG6)=qUKciAP=$XAS5Y#srp7juCs+SJ>
%O_Eql\`@bDK0eV[)N9-0\PB!b\3V3Jk\L6%$nr$J$Fh*uJ9\n&,=VK,Pki<!bQ%[j/6"m;[3dHR=eC8lJGIg58[0];MmT$o#tkaj
%6a-SA:)%RNW)TX8(!j@Djmj&CU<ok2hZp%h;/7=M8>_^C=@9%?fV"ReScK'M!mWU.;\3B5kKohXrUUos;;dp$-pu]9)$#E)/us5S
%;;5PT(;0NSaeZ)#_/iO#LUfuAY(`4_Jg$/N!?2[8-o;*sggIL0UGi07#b#\eJ/okt[!>)ik("&q[)Yn[]_sC2'2i<sb$e4@!p,Zb
%,(Z3OLtEM$0V$cE@J-^(2]Mq*@DH<&Q?KN:V*@GNHIsr\49IUsNYV5@H=?DcJ(B1`M4JUAB\i2]OOmP\Q&0sO29uS!g@[Bd=_VkH
%l60ih9ciHi_+9lmbDn8DlEgW]ZLQTspNWc$?nZ)Q"27uB$9%C,Qc&nr)_(UsnMq'!L2au1f#79g:p@h=_JPb#(0;5I.sm46O"EH#
%3%]n:QU?trF,ssi%RdQL=#gF/4d9oTO&[>jm;aSFgetG97TZJ::#jo7)'eQ3*V[G`+VP;!R&$G9l\UX'J=4gKB\JM3U&i2U_Z4Al
%V8ad4[#rNeH&ET9dpIAp00%.:g;2$2il.YM&H]X@F2>b`Xs;k+E#Z$/jW'S7BFFU/!'.>d:$$K(9H[PH1D1Yd(W8(.0Z)!Koq@@7
%^`psC*c:u^NdtAI7CXIfp9;!uc_-=o<ecU`5Rb[6(>2lCPkZ)7;j-FA]g)5jK!=PBf9):LY-4N$g!Ut`!Aj[]GS9lk8>k%CA#,0,
%9jF=MYf?3>QBVmIqp'`K_'fVL+.Z6\r=:\;j(]K,F5Vk4+n$bNa=#39K=!J-LU;F]_.oO1EdDMMK?LOI*TAj\)b.m&hKK"6`t$DD
%DO3rD\[E-_KI)WglI9S.>?0Vo`CE:3\PB]]X-a!:&1#A".gbDan(9EJq2EZC%X]Tq34IBAb-7]O*HdM^L1-S4p]qLG:I2&roEQJk
%4KUW?Ps4/*q>d:S$0'b@UePsm'As;INfplW0[/.kGcB9tSet%HjI/A18&grDFB.<fefO0e_EEGD[5/T)?g:@>CZ=r^Bd$N?a3p:+
%i!01d2)ugGWbm%dqfN^@5/a2S\LgKn@r5YX'K[pTC$Q6bJq0Og/RfSjHYbSEihKGf#b'.`"Nh`WF+p8-0"Y9'h2@;@Cf<rp(-f;I
%BmG9A=7ufHrn*jBQZU)9KL^9;B,),Z$\p.uG<q?CeY%HFLmNI=qZ7>#=W-2?r@18%aZU@KGm(!MS/g0!@]]ar$qE2er(.!:hW<uh
%S,o@Mjd"4Y`&ISKM@P`W>DATe^58Q/[R".V@D,4TLF)OX)c3C04$ttj0iX1sUq/MonI:/,R<J/FQOY9'<bW&9UuH!BC/UPF%F(Uq
%^nf+AJPZ2K#fKa,9-D'o&dS%7XBBq8]5KO=cSu='>f&Nt)[b$\aWSfm7\A"8qMt#i'KY48$V2"11I,HYfQZk-pK2ZB5&@?c#>\QG
%<!bE!LtNhD9A'hsjkCJ7fP*.+F$l[BSNn4t5gI[J]L.<e6bU]8*_27`YD7*[/U\Hk]_NT[b+bAhS%bZR&,,(=RXkn%#sGO:#:-3Y
%1hcAYf[@W>"\OQ?bOAq'dO?Rb)'bJ2FX1I?Kc*M2;p)SC\r5T/+sW\&6U"(7d3cHi@!&0+^"e8Pb!(#)pK<OjFCJ$[+e2nLBs$/e
%*,oZT%r:6q*"_79cq(-`,jpa(a2eL'o:a2IFK0b`Nb%Ti$t,bl:Q[YnD1h+!gnP*6<_iL-UZ,gtG7i]?i/G^"g30adK-b\L_=Jh?
%/jX4E6LQ5ed#rpd$Y-R[C!gp0Y7-N#lS&%t-k\<;jU9+AG^r,kW8.oscs=P@*jV_Bo,K4MX-F'hX&b.AY0QS2D=d@gkX$:(<bm'3
%apSs%Haalh(1Hs"W?"<PA@!j'YjKJ"`72<8N9XV@7jpuuopktNL7Y$a(h=l#TPOSa+)X"I;#;P9n.../;Y[$1,"d?0@?eVN>oHT:
%j,9]%roio$V*DITMVoR],#S-qM^1oEGaUtY%kj/Fpk)4N/,ZZkP"L4O\WjrQ>qi,I8!cmurP:p$g?bTXVNh)D_C:-0UIut,Isgcc
%^V&q8$@'%5$@Z2I!H49$JaWuG:q86U'5eR@TlXR9"hu^hBU@P<.N86!W9U[->?4aXg_SHITB4r_Y0p,?j]21r?!miM0<rCf^;pY1
%?Y8]*Z/FB5FuL2>5#*/D9'R;fG3]5$9CYNk"Njlb-I@_GbQ&E=d"X6'8P'A[S]_WZif[Lumuu%1rqj)J/)(*%_/Te.ok_@qq8rJj
%q_PcgYV[om_66eoOR:e`S(YZ^%kSTN,AZ3CPL/Ytl&'If*%\59<UHM8J:^8]\W\nQ+YB/*9@DXWC&Oj:1CFd^H*A6P2e5/0)Vk<K
%bX`nt<OtKOZEuC]^<0Sl?!FnLjs^)S5;U7>l4M02`0)/M#O)]R:UUMcj+k%O$usJ=$Ji\=`IG/1A"l'=_j<_D5N>m5A&s_oKHf,S
%kX9gV6-<8TV%6(F+(N_^CsS[?G-enuRr:+oW7LQV'=5.XMl:\VSR'm#e[WfY!?K&JNqoPpB!U,MK*Gq!FF!!"^U>Dh&=m+RLP'A8
%p-W=9-0b)l-Ac2P_/hT<*3C2J\fo+Km&`,\:"&g]lCeeE;KRAGdTOY?Zo,2m(/:NO[:k?8En2L1]NOPOFDoF/BTgASedd\\X@\Z8
%U3.6_T55%0nRW`QMfrbbB2-gmS$gO.GI3-Mn>r(3c@>Ym*C:52Y"@^AF4E;Zh=&f<2?;N%dFPbn3Ud=A:6lZBS`HM208n9+M>G`r
%i?B!0W29!+rZ'7OViFPT;Xsod6a%A%h>V\3\3gLTYEm7/6Y^m)h4/95dA\a^(jGUQ6Wu;Jmms!5=Ymsq0B!qb-M5*[NI#@M$@C9!
%@#!<hMlg<J=)2DM36]kPY6f=,T[f@cUP$@7q6tZO58\4q'UpF0]]-0o5,3n#='cR*:A(h9SXku59o-jJJC(a-)@2D#FKiu0lL#bR
%j=<+Vj9F-/ZCC#B<Q7[.1%CXY'-Uc$A(9"@TL/]qAjrRL-4MF-^7=NLSOSMV+1`q>DMHqsCjc_,A9<'E%eV!6P!i.IHCV>LYYFI*
%723V9i&b,C(`glZ.36JPm%@7("QFSSWl%T[2VE\,&,2p@85("aA.)/OktoWbUjI':jRJ<ORJRa>eJt6!&VHP'K*R/K#gI$^)Zn',
%g8J?Q$1UM?9Lo8iOX?hWa7>1\o$k@GFEht+6[PA=Q1=p7LflOtWbM&,["stmU[[O/SbF2E3,I@SKa0"WSBni=p&IPZ_BZ5up1TcX
%QA*0sKhn#9qNeu>XY^%.rQJ*jU83i0&F)sJ!K)fi\.[GGC1"92hkM&J?uDgF8&`2W+g;(/+Vt+$B\K3k&,%phHPG&M3hd(;4\BA(
%*6a3KO$N!"1lWe%G3hgVJPIlf0+"AH-cS<,YhhP(nB"^RO$G?V9bp.XT:kegA#C0]!5nJGS08m4MY@MB-+IOlrIN_\1WlH;p5p+_
%I'X$lRfUBUK9dt5K830XEb_t[,AE>>f"l;XYf_"=*1mo*EHN_6^B;E.SZFd&$Bsa*&&F3$mK2CROC(\i@"_OnGT1/YY*SabPeg/&
%6[1&#<Q^dhgk61d4)t(HPQpe+Dc"KKJJLYn?W!3&*O:D:']rp%OuP_ZAV]tOMAn2)Ys(EoO)/S\%+I?qJE'@IJc0]B;7ZtaD[l!2
%oB!R6ZfNW_%P4P<$lL`UQ`c,-?tM;0$_#^UImW\>_IdF:g,E7PNAO=R'RBJ_[$+?WEA^FYBDH`)inV#9f8)Hh-XJ^L(P`Of"ZYeg
%R-]'%OP+A49bPkRg(MaqqGGsh'Oo3$NL:1K&9p##bsMdU)9$um`7k4E;Rhj4G\dsF0Hi#3=#=T#M\nUkV('l2;XY;<BtU]14`[be
%Z2.l"bmlgb'Kn),;lR<[s-JHD,0Jnr+eS&5nsulO1X4OiS(lh"`I9n%hGC^`"_P,^7Y5k?deto'3l\(BbcB1?TH%Je\,TLNhDtg4
%&<E^W1CE1(k)nLjJVW,aY"PZL$MXOs+b$df!YIFG*V,LW'-TNbc[490JnZJN^/amDn#b^WUR>_b5":L"Z]e>Q@ok<Veo,34NM33O
%;5oW/(q*1mHm,V5l]eZ&D(/T8dC/=6>'aSMm,=8,QN;:3\"SI,B+;,,,oPum0b*Ee4MD7EL;&^HSO*-k)r:C!U8-3UQEc+@Yqf'N
%9r$&nS$`/UQA!$rgho:f5ikhb6g!s6UVdLlp?>I<-XMAUQE9J;D"ZW>-UtFFe7uf=Kj1IjC:9XTl'1C8`)uVF%-'T1qIKJ;UO)6h
%kiEh.mZX%8,GjW<lq@""Z(Z+]bq"_/*t9E(&[J$hj^pm<ejbE2c_Xd8:FGtpEYEboE7<TcLlTb!K@+l/(q=bk2o8K\GKQdSmC/kd
%2\^/SJTqK8X9hX<TAh;[@WTMNdAN:-'tGRDJ(s2D#E:cGc\#i@?U9c_^Oi."Xc^gTe5`%uZAi4-hTUu#]3]QKC`kEoG2$5m;/I4o
%VoI)ue%Ks+'o.,&XB=-SAs3"PTVosJ8>i[^)dR$BMRlHTa#R[l#/"$PmSkJb'VF'a`$^ae6`CH.mm[N;4kdEF(iZJIHo9Zeo'[5Q
%c2n2,`s.0b,DJY-EQ"StFI>ug>4MtRMPD@;K\-IJ+nS03qgOtl2+rN3K:9[mJr-#^HjG`7)]]1%R<&BbLLG%T^]d,\,s$60Ge1M_
%pR(kKHhLDEk>\(b40bNY[4c"d2,L*s._0*-`'XDj$BVG4XOs0nhJ!M9h@q"i[1>!^8#s9IH9=^)G<pDT^g[2?r"bM.hBGXT3K>_j
%k39*`L-8jH:rF7"L!cVp*%kjQS3/`_\4n_3Nhk.^NjTn'/<,3aIKh[8%FitHTVg!jg;a%UHUGg*X:0GsA"ukA2;Nkm*N83f=G<=1
%0f[/UXNt?tO2*L6%G5Ph]SGP7@;f66n5eaQ%er?636a=>61l:3!O3Xmfoc$47'DM+5DY9AUCOtt>GdEd$eB6u@Xf$EU\<F-TXiuu
%2e3r:[qU'k%Ik$D0Cq4aWT?$%\)9$/qqVGX,'_f2RVS">?IP1]"#NP.F'bPfHY,PjVuH5f7m,Y8AM4q=Y3F5BO'6E[EN^G2'6]9j
%`D00u8_OUkY7;J\DT\Ui2:\D17?np>,P\ttE9nIaO]NG.D4TpU<GGZ6=>WF:pJoQ-L;JVLl0,[P2]8Dd=<;k`AJ+@3)TlG#j.qfe
%#<;uS?MFs2(.AWT%MCar2\F%::[M:tffV0,&g5,?:;)>AMIf3el+i.LTjUa\qu)r]p*R]-dYN?-.@NWX7*g&38C.Z1?8R)ME\HPn
%<?a;+(58Sq3A`3`Vm&ZQh:C1[P&jqHNmB;p4m>^MO"LiDo,W4^C)N&X/]01)6",g,$r'd^S,7&?0f!\S_/>S-1O?@W+n#TH)[9N\
%@JZ7ZS:TNBHrYtT9HV\*4B&Q8#,5A[Uc06]W$i(f%5jr1UBT5S<J\g.q>,lA&tRg[[d'd/RZaig@(;4Aanq$s"0dD^Ge7,;o/_1J
%VVhmT-7sK;1JAn!kT>GGJWqaQ*@NNDi7hY\_7=pPaoKQng#O(sI\UtfB5<$m7ATLY[.:+O^d.-0$qGffmd4"[?"e4<=Z?oW0Hf`p
%3oGbW_bm[6DEu?gB`WnT.J8TF8,>-TRBJq^FpQ_a1t?:#me,+b^k#4EZ*`NfN4$^'S6EG%erU`L7s8ZTip'mPRJV2',4A]M"7!R6
%0IJ5<9+7eRCUHhNH'<re$.lp2<TqquRZ<NgeES=#$M6NW;63[Bd"cq.oH#H%LV*1LQ:/7V6Nk,;7P%/L5g!0/dSM==E\0:T;fIe3
%q'r0bTaB@81t?:#me(EAJT!Ma/&'=Xig[`-LnGLh^r`_i4lo=o#1>-cM-rP9+GW(C)j'I9NZuY^AM)WXd>=(#mg\.YWFAj.a+q>H
%KA<TC6TKmr\^mu@gA?hl/j``YIN%k7<tG&$JEYqW%&B=A*$s>MWO)@ZB#ki\q.d)k[)d.AP+uk8DYbqlL#2Ih;?cD/NbWZV\,*i;
%[^kSa,Pkdm=\nQR.rm+gT@$S"'!MC$IFUg3fGJ[]gV]WfHB[_g/ZhD46X5,\16EN;o&[.Z7<jlPkO_%mMC"JJWt:U<!qm-p2*/9P
%I<E=K$Z&#WhiM?&^!CBC,o'iBSCbo&UeZBFQ^qiChP:b6Bs3!kpU1teC'.AB>*k!'Jr$?BC34,UhDi\YTf955B]A[q7jU4(>A[S#
%^tQi.2\"rUI@nncCp_!k]rBB6J^l%#&uU$o8=RHI*2a<;ofBVa.GpsBZG_0rjH@H+[!WU7'17X(@/k1FUQ`=?[l$R,@J"9fnU3ms
%["BA0NksRbe!(]U=`2*R:-H1;DBBX)^,h/uB->[(#'FB>D964pHU%%#kY:D3RXk@S;2n?=<o;I>#UNF!]2kIE//[Iu(ql$MdK_9T
%DQ^LQim\-ME_LV]Qf\QScjs5Eg)R;Pa97<?<&CIUOi',]<BQ2F$&kq0W\1*(V''"spX.h])tLlSZ\C.-HFE[^(+Z^KhtrAll%rpK
%,&4kPKK/WCVf&Q<h2!f(SU#B!e3?(-2eO@J+Oc_\`NqdH!Y%-p9@GTbD,A]a,%1Fi<25Yhf6:n!8cRONCYrch2SfZG"c,o@mEl_i
%n1`,:9sHuF7;MO<qQNe!fkttR"&cj:G+]>JEeYS-f,X4'n86OAaK,H'%rLEmgo\<*bED5^ZrhH\_20Gp-h*?;OtaN"G65KSoj@KO
%`K`KG2`]*S25UE6]`T]6%4qr:cSp+dBkS-C-VH&.)u,r5.eEpjLNNL4?3R0KYN_P52Bf;onnfF;"t]VRJM=@5+I,..'*TG*N[%!q
%]h.7\EouUR=J,FLOW0CfeVZ0t`qDr_C<2N,E\U@;(#lMd_#@cG7AmRp[P\-'4%D/ki2F*Q1O@1Z!g(>;k7&5Zo(!Ncp]WKFS&$30
%o\HHNVe-m&fe0Cg-!Q2!7V<r,qFt30H4u.)Gl>NWM,*G=gXZdnNXF(?m/)`2nJ8u$PaHR++Yd0,F6D>e(tS-!ds&>Eg6A%[7Yb.]
%n&8E&#.6h(&m2:D]ug4c'2MJ0$)P)0m2-9Y<*^&6/q#Q51lCT+3[%'3n^6,u/<Z?K6(j*G44)Ln7^/)_ORhLV(b"B/L]#,S_k$2R
%-b]r$an9TdY^\X4dE150qpo[\PDclche*Y>ek]:e\gqTZ/#`>YM9cBPPH41Or(tCgrH<RM)pmeKK@9Ua[&?lt7@)3A%GM(Em4.[d
%%solh[9IL'MEFhL''"3.pD#7c7g"P_EF!i%DA-2&'c.(KZh-qfg<\8lajRI+1Y&3/V9MSS?OSZ*Wj/$J9H3UNnu?Zh_bl+Wm8hcX
%l``"YV$>./M5qYB`Js?m3qt%bLAJ`3*_mdg5VLRn9rg?/^8:]k+]tfM^OT+8#&@o925,h6XnEIBr!kNZ^QC7%F%.FNZ1u%l#p*W*
%HWorS[Q$OjXB+MKS=;gf"&oS340%2()DBE#SFsLj`r.Z>-;@4j,Eber4j_TXU\kUK;H&qE&jHb0RMFs1F@XSXkiI$@F+jNm?E)J.
%#hK8egi>P1kr:S=8$<6<CSqtA;aXuS)@B;;\MW'FXS74eYUC)PY8O07m:j[=fV=)9bcj(KKJG?"kfg7Nh-/Q2fV=)9_D&9De&!b]
%UF--RZU%fEO*1R42],n9![pE=d=krm#nJVA4ZXuB%'a)#f+)W\_XNciap[Gs3[i2\OmX@J3j>;6_fJq/=pfUu:fnRoetB2D"C0SJ
%fp44CpLkrDXOSdDPNTJ)UQi_8Al_A'*K$a2h`sucTBR%C[!Ac/W*,Dtie`:V5=3V(Ff5,#=/uV=f<qSdi#;OA>Qu59g5BmB-T-$7
%:j5*T:SYg!Ei<PkFO\C`bO;[u/QM;JA7n)_$D@^^:mr>B6a$g@EO\mV$@C9!paR<#WFU7IiTOCdY]/fpNa=M6kOtQ,h1icf*>E+?
%"ia3HF:?S,>o4c*NOlP:dTb3t=;ZdY.*M/pE+W2LE&KK5pLkqYE6D]X[BNSOi>:UeD5"U4#DIl*hM!Qj'jV[AL&XJcNt)LQ6[8"`
%SZj9nd$Z$Ykf6R;dLX\j@::"BIt=F9S'QTgK1#fI#k-/SS.>6ceHhr@j+_b3U_bOhRY2Z7M3hDZ#9;qbUY$AAcb3(]$]adbNStI%
%'godeCF)[d4e!TdjE8eZs$Tsq9#hgJl&=j<AJIcAXX4tJpS]8)F7j+*4lXY@N94gc[ggh^"S;#hB)>@Cfet8U8o0u5TXH#`qRf<M
%6T@)F\n'!'_l]!NDoM\2[gJ:qn(M@LI`?SKZR(+o#`8EoRW-^oKPt(/_Ir#cQJ1mM6LDWJIUl%q_:@4$0)0l$c7VY0'.&%&U6qmd
%J`,#_2cR[0__PL28d%nacn(e@\o<ki8%MA(9T3dXZpe5qBHWL0C-Ob1;3R*Zppqb!%i+=ujMoK>/#u>1:CAeVUV-(!q'!c%.B\`u
%!p@PBMbbo%/lZ6'Gp%\mDEh?8/sUm8fK^/p0#S5Xo`,au]d)4HAouXl?U*3%6*aDYKe]2Ah]MFFbD6jsl;F)J$$8Q/kI'Wh,MsSd
%qGrU]12dCg?[>PIW__S&fhAcP3*,`<Y8R"rOm/;`m*S,Xl_i$i[!AHj`kt3Rlda5-&h\C6p?eeOB9+r,.-sf(JS/fLoT5@^B+\VY
%4T"q>U#8i!.#XY5*aKV#l@Kou*!>&&VMM\cKd1,%lIg:Mrq7."]j(E_(gD*E_IOnjiMhUm=`RYn,hYe@=5'BoZT<EWkV8e:%5\iW
%]nF?lh83V8k=0]UYj'2Yi#dSfG,;ao2(qLYSisN5V(e[-e$#OD9!O6eS#rMZrjo4Y]=pQ6$Sef>X`_8(4Oe>GJX6Np.'#DK%PUgO
%dG!i?0mMGanh/n^(V^/oMe'rE3c.A=CA5&e_S"'W7"ZL;ocYbE+l3X4i31mmCQ"Ep_IA9,*R6K)WZ<Dj28`st]iXF9=2jI:pDlOO
%VR8aoEci)72IPhHJ_Ipr-s/=6o10scUIosiRTc.gEj,B#_i0Q]q&.HA?Sm//W]aCQ78gQhb0Zf+H`qI_*<`gD.;r-P*<dft=Nb<D
%SAT<c_5\JVed'uZ@7.#nbYOAp5ZU*D%0_5FWYK;/5PuB2"s+BH#C9Me0>9#SkFf%L/Hn<bi0c.mPp'%TXe-,G,2F^7d?S.W&MKB&
%@Dj3DL4s&+-dnR&*ka;Xj;9[?`,CDubfm;d1[.A;O0/oEN#j<o'>objK=*uL3g&hEp?9X1:2=KIq'!sibU^G_:6Z]K/\#hr>q>ft
%bj7;"mb/Q]SLA[hHZWh$&'<fk1ZW*'+Y=*a3g&hEp?9B?Sl:-0k>%;tVTYK/oU8WFH-chCL;FuP'UCan)3-^k)%P/X2AGlKbg=QS
%_pHV!_pG'2[%X]o(PZGf(kuWt)MSI(U^)T:3\rU6a"T>kdP*MV+`/Xod@&s\4dOumPEt)k%HTl`$dRPOgbJ0>S2BR@C+(#.HZWk5
%k)Nk`k+lF!:d`r5fV9+ta)f\6q=$-c'qAp4K4gE<<AN\1BI>K08B\-]4NhSlL9;u?7ji1aeei:7g)4c41iuIf4Z[ZM;oWbqF3\_\
%TVX`mn'R!HQnO3KQuIeL!=`=5IZI7ZqK0!dqJ<L^#&))<i`gA22.ha)25Zi$AO&W6Pi&5L[kUSc[kZ2;2Zju0VYhLCgqGE^`%\Lr
%lm<R#a47&gH:b)f3s])\8m8QU?5%)1:(2h>C++J;&]-bRi5eDM9-HN:3$cusNeW=5#/)>tAnk*$LCFT;e55)XX?T;Toq%hfmKnN7
%lFg:eY6fnu`[MK]%#$iZ-tmRTLGnjUq?c=CUnF_bNSsH/Q't>I.NnESO]B8,\E>lZ%9N'2=$`u_M=O,[U\X]Sq<LhT60]7oUBX1i
%,F=O9<$<@'$F&-*-2P+Yb>S0%Eh`R*lpNULc5JplcL'D50FnDB4o1,jM'uG?O(`.'R3uTiRX&B)iLmDFGI,cB>r+S4?7g_?m-G^j
%SVKZ^Csh-cG#!Zga7_>Hqgddm6cUrFMoNAsVnl!t\^M5KH7d^Pf"f@A`%o2u)UoO/c;o+^q0eIu[o+`)I]<V(bRH]4`\]Ue@R'Y:
%)&-(i0TGi&0ktXC#$m-r;(E$*]*QhETnF2E+JkEHkUR(sePjjLANfc^Em:qC1[XF*)cd+KV@D^6,U'jeCV+[h>q=jS0<'tl0mAan
%VfKSP,_^IsVJbgZ6DZ1[IHi3u=\@!DV;5mI@!f*1p'gQ5?WBaHE\NRDdbIdiZNRNPbcIa,qrJq<"QgKWUWKpQ,hih?d3L>%_=nMW
%[O;"Z1;$,Trp=uT0Zl^_7o%>iZ];`hW?$=+SVDVaVr;Pka_S7YMM@SY:M:&@d1ur3d"UdTbPO">>L:hji2B"j?'_b],WHMt)(DR^
%_E<">!F9H`5*VKhEXq(HFA3tb?E6AuXPLp\N*TaQOJ.FML&&Ht=]S*43VN'`I\uCD6TiLY,1BEH'TLL4o->>.2o6D52nH"7@'8fA
%=QUcpC#>aR+\CN`0:iE8Ld?f_.$`t;B@iH$P"tK^A"GORI(JVcUb^N@cFBS+\jV3*C?jhKiNCnmr%?$r:l=>PeKghLa<@2JDY>;G
%nXW!^&EF%(q/AOk)PqR%rPM;iP]WTRTN+eSY]O^g[.^^bp,lMZ6bHi-[GhP6U$=J_([N)u[&GXa/0]A^HN_d-*];htpN__!L1YbL
%AQ.I'5apA^lY"Vp:a,$+2*qpT<U+c08f;UaMq9X+#JtsGAM6pVGsHB]&#HAA.gS8#2"fCi66hHuXci[M)DZ#U]ncrT?Crp"BgM_i
%+d<a5+n[ZuLQ)+5>MeVQ<q=N/(XLm7-;$.omn#R%59O^XCQ%$t1t&Od)GAe^(*@lI1;;S>1MHt5;hn6KS4WVOIVFYK;j'q7lS4AL
%5mN*0H:,.r/2&WbLf4f0oug*c)Bl/,8:[!ec)90Z^_fc(4>]\>]-kAZgufJ@lL:Ig/N=uQ.*m!o9u<I:R*1X9"*us4:&\0gM'sed
%<3=.Kb3gE)3T5t7G8p]K^O:"cL@0_,WMf]WXio?=NAY=+)@HL68)0k8)*D.GdPICFlXZKBL0bONR$>=]*pFC4W1ea8E1AN3K4,#n
%g+5NBc0#;%89YDfFCr$>+R`4RYZ-uZ#d$Y<b($(Me"Ep8QO8'eE<d86=:F#F@7Mp66",h']>?DH]gUM\r-a&V\,6IlEU"83kYgB$
%>'Or.0H:_c@:hJq96sFeUYi6Dd7lH5TZrc@`REbqm#_aj-5;#:SYf^6'_\K!TL2m-Zl4Z9]X/EtoB-=K89YDfFCr$#dN#r3k"gUg
%V7"/E[@@GT4h=T0@?o<4@?J?p$cA!.dY#CXrH<l,<)M3ab9*tje;_]A+6^YB;qRj<Kk]a2#sE/DL80%>>D<6fU^)T:qX"W2kl-4l
%UI`;SQCik1*qiA3]d=FB(Yc@BTWgoq"Wc$cLb(n%?F^ZRT,Vkrh'q^<RGi!Re#"@H;5E1>1kjZ-J"W+VTWgqQ$?JbVH=MchjgPR-
%e<1jep?8t9N0n-<9IKhH9pFK-`.+EnVbUZ]/et7Wa/?&-+VKIH>71tkOrb>2ki3"7s#TZ!pjP?1@[jSLP.0qkW1hgr,4q15g_^1&
%TIJ3a`3CVZT@h\3dq.3Te5.1h[c#Bt^*eSEq+,6EFIls;^br1;e;VeuU'U_FO)UZ,*jl\cNGGkg)@SLCr5,\3'Br8#O"Lij_n0O<
%!5NeQ?uaBGdWpMlFP)dgh\[cKCCZ7U9X[[$V13pBNQ)A6%cYBO.;POXE[Yka21\8`?0*r/hkPgSNehrVKc?cckB$XTJ<oUO^IKYh
%h_Q8'W_9PQ.R1b(ogImRDTVOUE,,ZnRtd<gRDZHfG1=8i&FQ!=4V,<C"7a/)l_Mo`*O^Sb(HpHu=\n1TLDd<1p?8/'CW_KBf810Y
%JJusk_B,6br^3aWTiM*39u5.XF]<W/WDG:LNi8D$c<;(Dbak>F#),3T-qmfhB%YYW`3?#&oUrEYB84TS\dp-U(>.Zep@-ib=%=Wt
%K0/n#Ht-"*UP?X]E[HNh:/)-%C.SpCHZWlpgOmU+OH-@!:'_BjSVi_do2q!"'6Q\UM*6E(#T[pVK6Z2\YKQd*I9PE1'tjN`oh@T)
%q6ohIgn:4Rf*O[tn<#W#U2G4:%(,)^j>=!uTWgoq"h#fE%^!.NPT-OQg0Mj6:YD\7MC*i*4'7J0\ac&1OtL5+e^0^%<?c#a'@7&%
%5u[cHc>[t\Zt<`hF(I.FD\[O:SW*=5@(SiDYHXX/b,,B3je[::@ZRG$7!/'icm),hf?4fZJu1Zf-s(h+Rb5F^LGRa[liq2R%gmZ*
%AnW4?5LZmYj<s)/aANdZcNT[mBrRhsQVUt(i/L,<a$TTuOtqU+O[X&p/k4\a%8jbA[JUGV55c79895IA9j]-,RBS]P1<oP2D+#Dm
%Lo"X=iddCVfp3e=.fqSg)Vb^5!js4q`3r&=9q@7lHZV*`GO-ihh$<l<*Ji.U/d/oQ`!IKj:[jEgAD=_64*/DkZo]G_7lqDr2dJHP
%oE_p#o5K2\D^h;[IN6D!TAMt)(uh-,;ZdgpoU8Vj6c;gRUP$G8kmn&kdZTT6apKcf.W%=jef2J1F:_QadCL-/>1k>coA^'n9s\U`
%m*S+-AdIE8IF]I('jTB7R^PDb)8]U"&GZ)X&pI?cn-1alkA<B(HQii62:sc?S5O)9X;B`F[e*Y@3EIk@YOQ\P]*/`1bX8g>fYa?7
%56>'ZCIe!mAoJTqbpbN"Df?O<*`XmcqK`65GnQNVhL\r/g<k;:bYAdRbVE*a"W9Qp]Ig)$Y8tk8ac,P\6d8:5#lC\W2sCE@MdJQ7
%:QsIiB?Mj4PGfP/G[""&?TX_&P*o(B?8q$Oe3NGcG^JrHnO2h&T-eUjK=k?!hi:8t\fIZ%Y8tSp8R1P=g;=fpI%cfNc-kuF.=H%]
%5##E1\4oU0QQR_hB&U1k(;G#LT-c?VU1T6</A0cdS6Jes?[$f\='F=1o6J]>ZDB>n0=7_*<\-`C?3Z(BUf5Ie<dKPS_Ba1h<*sou
%ccA5h$\/6kko_^Sb8s4mo0Z?4?TX]@[s\[5,Xme+@g7%<F_MV0$Yo3I8+Tk=PDWn[bt7%R'0S(0*9-?O/Um)#5#(2/&i@=Z!Cpru
%,Mj3cin'4QZXh'MVjbpNYk77S+l48&]=%:%k0mk$ZK0=eLTZMnGZulq*Q+H1dq%%BpQNgh)G5CEL3,MY'u"i*T-Z4D!M,.s5Si(B
%QhK3e;Yo*DI%%iGdWA.qP="F@hNMn_YSFor1nQ(86BnCZLn*P:C_h:(9'L+Yn`L7l4S9hPplY51RBm15:S9$H_%@L'p7-__%r1WM
%8+YnE_9g5nK35>s&4Yop0&g_6/Um)#5"k%E^8*6uP6O-`j1:,W#IX?7U\Qa7ET)/+3?[e[,2EaX_Ujh-dj2r0jWZD6;`.4`ODYG@
%l"`ZV=TThnCL6(]Ei2"B]*4C9b#`mbPP05MP0dTEG\B8e%`=BE$YnpA6h+:\BD$A8-&.IS=XDpV>5[+%I%&8Snt=2^j1SZ%d>W<S
%d.K4FGFHj@3?a2mo!?OHhJRAR*THHP/Um)#5'8$=ib+j6*s<QrET[%aSCl9&&[Z=`a`:'j2P(SrE3?;F%ZXM<p('8BQn%te>QE`Q
%`.%0FG=la15X5Dg].@ZNY:Wmk![/2FF&u%XnC'mjk,)a)b`j']6$Yikq@5a`%lP6YD?lsiG%hP<0Xi7NPu7u6`7?K6?T)G3F%M>3
%_Ds?JhLX]jP*hf+`([]75k'd&Sa$k-M`VJ6VF>[I7f(Eb$8bh``Q$3_hKs+=hV'G(h5M7&%<f;N8M,deE+:g4Dl>k3Z/D[_l!KDA
%K=M_2Wfp%^EmHtUU"UD8_VqeSR*if1SMCah=#7pfa/MH6Z37+U=hD=SL@s&<&SH4>P;g(d\\?tRqSueNCerZIK'un0@/DG;&%Pq6
%?-\Xn:frS9hY#u@8)QttX[KSa"q@0mV(UQCf7nqjTeg2tORjYu,PmpM`Y*8(-IrGd%H597>k<Fu10I2(r'SmAh-4[>.]i.Z?X"FL
%MU$-<%P-3[2OD%V0^7joI11[=*S,m&l>@noCT9gU.6";n3f.!l.5S"ADFC,P;QOTL3Qo]?.Ap1?8UiVNXf>T^[[+eO].:'g3JJ%p
%,i=rSUI;jHYM(bH:Ps%`qL,Bebm@d,[,!]c4&e&b0QCcapDH-jFZARSAm_AtW9(37eXsGYe\iq.Cjb_>8+80HR>EFP+$&&KJe0=T
%$lH`D.u9<l'+=4c-@gg@$RntFe88%^P-OS/Rb5s^6TgD<dg!K\UA3A9BaFDT%Aju&(-*Qd"">F)71U&B,ahKSb3Crg$bJSG4Ysau
%/Q7@0Vl"4m[;3Rd5/V"sQ)S1"Z)WV=DS@-YTk[1qBV[7/PGearR?>U><+pl0bmfP'5Z67#SD#5m^'_PKd_NdW84[f^>4,-u:jDEk
%FD=<e&9nT9&M_WjF9]96^2?[?.OMX"alCGs`W7j!M&GM7Tcqh7kcAQt=VO>paS+@cNim\9kCi&r78hN;#f`;bh/>X_[;%\9=E5Vb
%IB7g+=Regm0W9cm3+p0\o&+U1(,E04'Q6tdq7&Msei9."eE02Ok*jd",%erGKCRm=.&rslg"@tY1Qn),.$N@K3?PUs]f`WP>gREi
%onC<B'3gLD`Wug3H50img>\..O>`#>@m^iMe"<.QTVuYD%.W#.>A'UNb]ii":kM2A%?iIQ]h'.gM8mt.oOgf*O8K'`f/+$iIh=?'
%b77MC*uT))/Hh&Gpbmq`aIt5`*PE_.]*:B4-n^Tq$L+Z)Ns?'CQ\`]oR*c!^Z(5K(_QE8tRlA^DCTT"?F??#T>:gR>fK`GGepu(3
%:B[B=PBGj*?7Y5R?#=$2(hG@P+@[PXo(H7CWWOIt?6qXiI#datL[3)*g"*T>/&.aTlmC@E,&o.8=O5nbDT#RdW?GaK'OB-7<1dLE
%OtJRISS!2)jZaHOf5E%DdB+Bla,%N=U2eB^\LoA;;Fto)?6KE=Q5f%$,`K2P:B(SV/SEJ^7C?K5oSso#/+P/Ie@;5r(_!d2UBO(O
%)cEl<R.I!l?P25;NaILMMUV^<7ik57SBR^,7iueB98O2,2MW(?PT6&1+TH,k/eDd<:0g.tV5>A=&i"[](J`0Mn.JB/R4o6C@"sDR
%l"JHu?%s8\g%\^b$Gsq>+aTRTMY</F/J`9X^6T)2C:'``/.Wab6o9n)&J0=6X^K]m`$i^W[JChASPMDh+m`VXJ>-L0g,.cmA5+e?
%?"#:Q$So70E^c_m>.t>`9ot-oe(fonSJW(4kp"N`C4]!#`Yr&31pk=YDNJ?MG4(=7[mP)B^>m+;%@D3KNua%-83t[%3nK_SG7g"c
%P,!*J;.mTM:%^@c[VG:q#.mD.\O3*s9_J&g2bht+(LaKTN=Nk76$%2GLSGV[;gV^3PQ<RAQV\_?SQIs)(p4Cp%uO[(:)0)1!;j4&
%JR^J<+kX6W5a0Os`SN>]08:B&A1_G_)G?b_g#.N7:/:aTdaYZOkn*R@StXP%*Bj8]W09=>k%K\_L#/]lp('YNBLBtpi"iV.ZL@?T
%1M3$NgJ&njT;G1)1h`nmq63kO<tFN4#oQZ\T\'Gl\!3T;p8[j]m@-Q``\A=uTH$9'>AFarrc\`j8'ALaoAIF\>HejWFu4^:!If)>
%HZ*[cc<o_hDuOG'#Q/O*h442A/_t=QrhG<U&`AbJ"#hbtS41!)*,*FQbK&d)0/fhkcpm!Jdf$W45FO!+Y"V`X:"n+`#U<NJD)5^]
%#Y,MuOCA)D+`%`W6dU@*)F4LA6Rka#1;ctOf1CqVmt^DNHD^0CFIX-7RS%c4;:^#Zf!'s#B!2OmdWsXmUC%)kr%QiSIMnC(\/P;3
%]n5FBE`g?=5gB)9\,'[umq*i[rtt])G9"44o(D0*DSd+9-%59@LP.TF+>%Sef"?V(Qn8@cou-Y0%`nVX#,,@r-&qV1(.>nB2HOdl
%%&+_KAU#mWrk$E56DW7B^$tc$6[uUgS3o\Af'>?<dJ82W'CGhU6(;a1S6fYC-\PEnhK&,U.kPfs6b%5i:S^(H6&3!rULpUUQ0[bs
%iag%u(M/YN!`*Y[`3iBd<^nILce/6Pm!1YUE:osq^(#>.3=s4]a%qmU_eH4u"MlbdG,-;2QCKt?g92!3mkL%2U(""I%7iu-]qWi_
%LFIh#p!=W0OLAXuf7UM"FCoMdMad]9(Dp!aH/gqH5)hJ%2-D0QIlDE)Re:YJ:9Onpp%h$N@1M8@#LK,`J'=R#kWI?eGR8[`?jLSb
%;?#nR#<KhD+PE/g6Pjpe.&+1<L@c6='GcEJCp%>/imh4s<\qE@0a+rC'M@!T!GS%lll%pkUFkJNUV$h%q2$-;DrK9;*F7=F<%)1O
%]E)mFY91,LW++C>>i+?!5qdo13Gs@dLXa*RVYhJm"Fc4IXK?l4<GZAI7;%U=UWU:C[brS6kp@][Z,HX/R8XFs]k.tFFuij)7bsbj
%_UjX#mDFaHYIZ\L)V"K4,fU%ZHdO!\R7'Y2e23""ei$P>A$FJ19%,T[H[.!C"`8NsQS]>!4lo<2?!a#qE7_pA!kg^A>Z:/E3/W3&
%H"U&<3:f1&6^q9I?n07.fL&17L'%LG8,e('h+l@>k*SRWTa"`]BhcUB348.b^[10+8)4Ge_>BC+6;$U4'>A$rEPot_GlZ/irq^gc
%%YE/+76`u"k!2J-=[AY/N^N.foPHY0_\r*P..6'"L,L+fp8FhWFoFan`:XL*7B[TR4kP=^YX\qPR@uFV.>+u`p*'^;2+M^L=pfUu
%Z;:96V\Wgpi#>!#".K(;UMe$L(p)sA#)\i&!]4&EcFO==ic1SlpbJHOnJN\aLKD%(>6oS##>[5fq:%VkC5X%ZaVdYFij_!Fpq`p)
%1i<)o82XU[mBQar_$>iSk(l.]&Dj():"7#t^9-<#6#acYQM_'V]AAX%g469[pD3eSh<5Bq^i@A0hQ62.J7r4n#8gl$(Rj0e(>j_@
%pfEA`BY1eDC>d$gIVM/A:%9epMGLlWD>n4$WaZVhldjF?DP1`ld0<:FS5Y3E6*YtS)l1<-k;cJsK;83(PCN#c-#WjF#9,O/QH4#!
%*sc\A`7P!5%`,Y>Z<f[=l'Hrlq&OcA4"r#g8]4NDWuEkL2WJ_p3IQSA9FUja4]!g-4YD#a4A*ph\3Z;]ph05\!@O!Vi:t=<6Q4Y2
%aW7[@RbS*7#U6]Z3_,^H!*+t*<KB'\D(BL,Ib0818a`QpgFISuU&Cs[mq)<?l"l\>"%B5J(3;$?#XQ0/:JoT/qIYV@qAq5bC.]4M
%d1>f[=QNKbQVK$WM,\?i/6X=)*2BneIHj4L<L6d<0V-t[QpnR62mgMf=1Td-l)4kbc1NQ,ciebF3q332-!BVXd!1@LKT;f,l\0#J
%2,m%8"E?B0&[qH`]<p@Be*uI86joH14Ijepp[Q#QAo2/ei"+*H.f,!i!lhj_66!B#CmjfJ?\!WJ`_b>abScZ%bo4Feo0t"=cQ(lT
%\H@4<H__rO1k/>D2hM7JcQV5Y=X<cj*XR:f8W']m$1PuJ'1U>d4osQc-lM=E3<adhX*-;]iQ5LRV"sZM_/c9CNhrSWkR3/8#/UX:
%=e]ZA*nt>#Ct*I5Ff&$gUR&bu=i+X0NVHn;?LdSABKdN:,s<[Cd2PH+OE5e#nRBA6267FldW]KI$.MdXF7Cj7MD*1U%EtmjRMhq<
%Qg[?:BIgeNW]_,dTj)k'1BX43-\a4f8#qW)2?hn7`'F^_nBPd@XS<ih\h5&I&UL+1_qh9O7&R7ZQ^\!J_"mnn)cVBl)E+P+a3XsL
%+ZY0]'8g21=gol5_B(QKE"8c<JfUO$L56nq=e@'r*OV[JKfs`pkW"J_)RK;_Y_nT_f"V"l=HjTSXBQK.@?5a#JRJM>7AbcIm]PI`
%KlL\&/*T2X.*N)-2*u7t%3)l4XHK#k+h^;RKmOYTe(4j:i)3n$:d_G@aR\WE234%bC+.;9BO]UabJ\?<=cN&9>41UF@;?0/BW)Yu
%BjjHn(8_2)%h\rg;V7as_T_NAP#Q+,f[-&Fl$<\194<kk$4FcL&nlKn1/r@(LkMWKY,(gUTWjBK\Mr.\r2,,a>m=-hDaK2o(*)GN
%/jgD$+\n:WEU;o5&N6Q3dEN*F*GR#s6[!(o#3X3L$tM`Z%*fm)@AjWBKB*N441(]&LXM3Oh6Q1GH[lS5$cCCK=^'7MkFo7rQLr9,
%kri3d-Hkoa5--$Ee?G_"N++McbOg.7%LV)kHdeEJ`fOKtkE-LCgPhF[\sU6k^7H280f1VT7TL`sO-VkRB@pDIm"o@l>Fn!IX@7-"
%H*0lP"\8BVSV-61=EIA0B6KeVZ)36I"*@@A(aA[+g_F#@MCo;NB16)SDo#<MTuuE5=S1q;C$7<s@*[iZ[4h:<TV-E:l-Rd@q.uOR
%pnGm+'YGd^lj3u7q)pbElnX"19ssobpg4MY%(gt!U.4'gkOf,@!df(t7N4?M,1+=4&A/B$N>McV+eZ@`)"\X\KEFZG"7OAti?$'S
%.riuR`\>aI(b"Js?\X(?JRJrC;%F%@$A-nR2[bu'%VG;@p'o+mMpXf[MEnKXI$%=Yf;_Y&,,9GmZH0J#UNC:/NWMm\/?kCZ5f5WX
%rZgunhl!ITe'.Of<ms^nY3W7Z0mP?8&3&^U%Fo;<+j#)mT&]OrSD:#)pF?NeEB&=:B8A$5l>@^cL:p?@'b0Bs"=:O2"2s#_VEk6=
%fiBlqlKHG?4E8?)UP'?GU3-Ss8!2)Ic@0rA+VO15n7=n1Hs+Y'\6#n(3@H-$4^r+80LWG$JDeO^^nQVs(HDu"UpZgE2N"pikTCcn
%8sX7$=_,kq=BVn>_#QNFfIB7cL02A#B_plFFkFJ)nA3(FKQBJFOAgT&FKkErkm5pg3ru9!O<03"lX%Vn5fTUqkBOg>>II[taS5j*
%')P"R2)q1Ep'%6cPhn@73_)Q]6iAjDl+M>29+SFeX%<>$9B"5`mVBK-#<Y:Pd^Xls,B"M`@BS62g01/%&a]]%_tg/#N!Gj>kh&H/
%Yk;JL75rbtGJ^cRY3-<:qq-365E;%ZakCJ7crTjW/PZ%(3nNuTp>6thg?QEMM/TV-3_mE^TcHtK/QJGEOH>skLt-K_.,QdWUimnL
%ld\j-[;_it`!7>SZl5Nk)NAm(IO[p;o*:.7/N?ql=oMr%kR_]U7?[fhac\Hi6bJ`4\sB6)Y6dX8.((]rH)I$FE@Ct;K",Plpp`DH
%bm;Q.>^Ul+Z/">Pb\/K_e?SP#XO&Ljl:I]UFOW<5^`^BnJ1"VrM':S9?r=tT\lS>jFElX#>sUi])20`cENWun;imJG=tF&POVcN*
%`=CTR6c]3>ff:#rKnHgJ=CNJdZc?rj0[S:JK-WB1Rf/8@j(?f!Gi(cS)c3!tSG74teV?g7I3>YLYLCkXk0OEC:t)'>`B@5N%==qn
%"$O_=ZNV>AmGn)2Q[*a^;N3E\"alq=mr6;c^5O3QOZnNNat[uWU=LJ*(WYPl34b[/.#lf.Qtb%Z@,"s\Xhru,LEHeh#(5\Y,.r/F
%G=*3K[?[,SR;WOLF68EVd<tRO6Jh;t_6UV\R'c#us5@02P5`N_P$!jos0d5e_Mon2n/p4M<-kU)-G8Xh6FRj>pr@LiQ/67%j`]*G
%KRZ<ETk6CB1ugqbc1oX](:S]TiBO?;;!"76C(7rCWJ7UF$M[@tXa&;qk^nl\X(_R&BfP-O6Z9Au4At)/eca<o@&pp7Z1SY-GkC0"
%h^7$Mdqc#6-N",!)@#8X'cY09::1CW;f372oT"WT=M\_-D^nNO]9:pWiA[8*O&HB?s!YjhDX1C8HA'C,>[,nuSinte7u=6.P8]>=
%"D]XY%15%"cAtF-#-irj:_e'@=7PHRe.61Y:CWR"[mAJGW_t76T@9GO*!1+ppq<-,F"e2gr/:i+SSAJ<4d$b+UnBQC:Z@W\:N<#)
%=aS4Ue>F]l.gU0cSc`50;"&(F8eP:bL))s\:FIYlh2b>[9L,la4X/c'8S:_=E:#%:6ujZ,%Z)&+OanWuj?TmT[2#=]SikMs/IeQ8
%[\,)c202*3d33iY18Bj=H>W$]gbRkYMcuAAK+eRJ5f\(>GTDsH2>V>$g@@JYZhI6o=13[9M1ql]G]thd[c!-J7Vj$q#1<eXo>cE.
%3h@OcL`qP[51H4o/Z40^k!eW+[98m4p>BH#l\$J=1;)$sat8Wu:b#8`(2AH9[f.bY.D3<`)a6LtH(*MFgX#8Wbms8VOaa[dh!8(Z
%[osRBa7V!KhJ-4jh<A+Zn(Ms)IoP<#FZ(.^`eWiIn/p/k<-G<dJaYG!i-4!Mpf@7ns02L!_HRI3iH%A&[IB&4NN;hK'+=e*?//Us
%e](N\chL6[/%k.XgXctoREAldh@0A6L39](JU^p9U\)Tlp='U?D6InWdF3VQn;f*gf"%jXT"#XA^2:sKV'#a4'34jHm@n%%aS5:H
%-u)ULfE4<?oP/&U#DB&OgR3Y3B*"MkJN?RsF@8C[.(e<UW0c]:qE\YNUaK^l'mek/m)t&Teq%/5n)iA2Glt"$)['*qZQJobjeb)B
%pD;or:TORO8)]C@.KX_r^6s^s:e_e$*PEeao;7?8nK>%>:&3uI=Q5b./A)B-*(2)3E\:fE1=44=!E"EI!sM[+>L8\Ng&>o8"5\%,
%\7K6m4Fh&o`_JS,31d9dr7"o['l0agPtrJi(p"b`XdFL$+7P>.=42"IE4b+D&:/u$R?&ISNrqe?dNCJU*jKbsH%4\FNPMrsg0=-a
%I/i.VPK"JM<s8sNE=(K&A&=5L46jSS)Lj`,;cd44fFbrogqtE\7#mfh<[\&EQo8:,91edu]O^KY7cE(LI:C7`CGFd;@^m6CC,4a;
%l7MtlUMi]$-c^R2KE,e9A'd&Y+Wi?TiDCYjDY22EmPF`P>Dj@p[L]f(R;lm:Am:bfc^TT\Q2LKMj@mPa`lg8eT\"i4FhkO7$@C9!
%ph&F]_?u\0q9[(5<<N$!+qnjIT'/;R-T^/;n,6p:G.mMC>sQ15!dqI:bkA#u-nL6hM.1rQ4T'dkk4JgU.9p)g^Y-AoR!edGbkMa;
%n820;I#,J4s',I!dFjlBkhcAu=hah-#r[<s@%0p&0@f)bgX0e'1L#\]5s'c`C++JAG;L_As%)TpWr[TLOU3s5:NRZ:':j(6cB$Og
%f/oV^/&K?F_psH:-J^pE_aLUDn?QFO#h(>,0>7Tan`OW;D&%S>.Uh9ZnO2F=4:ukE<^d:ddVR)::!_9CpipP$/#6_FEegtk[J[G+
%q+PY8X+3WoY]rt!<FWt'a;`jZdXtJZ`.MQDdHYK%/-^?X\E4Vme^_^=n]84;I;5\Hl7g%A?G&8dl7q<dkT0?RUL,'FS1e3cLR61i
%cFf@dZhmo$PG=WP3fQP'R"5]qAs_ZD8<5!lMLk]KH-#BST^4q($e%3X?6Yk8HfThN`h?9Y+@lrX/LjXHH*n#lTBe;IUs-)o)Y,?a
%SZ1[d4tL(WUL7oG!-7UA52<qW@B=hpONg1NLf1')#&5oo9j9tZr=#]CZ(TT[q%Q#J`25lMAe+f]nD3?mK%Fk[h!\m)rLD3:B2;W=
%JK.^0m<BH:@#+X'0*bk:ap)V\(Be$_73CM*PmVm&*6"-19iW^u][A8R3GoCS(6MmQE8XHX+salP6k0`p@D@[W=N.UBG&fmbg"SXe
%plTV;nXLR\"lM#=+`Ch[`s1njZ[d!d`KDE5?;`=A]Fn4(Z?3WDM]:8Z8(:U8IpoC6+A@SX0j5bDcO"Ii>@Sg@*07PZUs-(&V$Kct
%6PB/sO@I<-k`4l8\>(*9d3o4&U')4,EKj*pN/@e\q9A%NSA;O/o6Rk68FVB@"*p.AapBC`%D9X7oL+MH;:Zm[)K*e]rIKb=lA2.d
%0sW6OYh'60TH0&-^#ldYpSrt&2iD/?7WI?nU38B^4lgELT4d3kio!nZCiRO8m1HWr_$1WgK+G/JZjm5H/_kIg7$"5m*8Z3:**i]>
%B:CD<UAE?s^)NJO0JWtjDSnn4m_ptKX&gF"[YK'`L:g)^G]n*FT:IY%D)3T2''t),<tYBo)6#`9k7QpP9CA@JC:+ePhBf"^9fin1
%:/ej.#bbD[HAf51e>us'B9'`aZs#allItGpYm>a"1tR6]92qD(!=$fnJl1\B9t1]f</CFu%ShcfBt+JXKCcm2O0\rcaL&3lL3s5*
%#hGLJ@qdTS[5o<sEZ0p`YN,$L_XKR.b=_h*<ZsWcC$bHQF6#@#]5*pG^At2PJcm_8Lb"KsVAt`3XcNlUZ89Hjj.7n]E;G897RX7(
%f^=G\>RPp1EY&=Nn\X"=*@`Fj_ZW*lC5qc%&NUID#.^2lN%-G=ML]3rfV-T<L>/pgSq[r,VE"(@jbRIcD;XHlOt@/O9m3>235[aX
%&T7uIh\'*c?mL*mn^,:u87lF:PhBJJPrB[S5_M!YH$6USLiV/keCrSIBQ+%t.)"F3))0457#)iK0a+LB%_'5K1%:i["*g+1WU'Y[
%(hf&sVI<=r8Wl/UmY4Jb+=[MM%8b$W/D+`laEjFbi`aTF6gg)F7DsBgLXKp;h[9H+]K/l/(R&D"U:Tq6OX:l/s$6s"&C@^$@?87X
%0fXT4FPVd=njlYtaK9X$j5:_9#<K<I$qRdOp*W0dl=1YjCjBt%<'84ZX;KcRD*1-qk>Faa&*X]^kG7=6Ytn]5Ud,puAiX<Xj_.%V
%/8DG1Ag9;.K+)d)59pTTXmg"Y#h+uNRgKH,fb.F,PhG/b^e5*E";r)+&CgC2[qKLuU`8OumAFp'k$eFn;$U^R@%mYI5)_HZII<j\
%Eh"[F%nq'SY<$i;if1W>"6'bkEi+!U"&ULR--o9jP?n;-YZ2#\%kk]2hRE%KZdioc3cTTQlod<\r4@LWaGa]Y_pKF;Y:f?_0WNkM
%lSm[_@Vlfj'WB^':'0Z>O[b.MRW(0JN<&DgK1AoQm0agC.KVeD*e*;qV@ejjL,9uX&gCYDNX0S?j1rA<!Q.ap^gK>nJfC4)4"2$"
%F"T]#&9GQF.i7qSWCHRe5KC95Ocs3Tdgue_m%&!pLr<7AN](I'7BF'$(;,;*Qpt*4C*&P1g)s-WUN+*[P-,2;(UJ`kZ7gd.31cI1
%;sVM0+ZX!ijAgM^%V'L/Qh7ahq"1lEIX'[t#lT=Q(eh&a.e#<HX^3so3>aXG]&/7u,F'2Z+."hmnuP9.egHQ'2S;7D`#0]1lt1nq
%%UT9!\0&""AAacn\^JeZMNdD1iI4C/8e,Q_O:8A"@KR#Y?a;6.J^*kfNb]Kd#EDp+oT<:?QJLK;Y+l);dM.HJCL86b/Q-d&9"l1$
%=GEDG^h+f-<Z0[n%G?kl.e-=l<Fi_R1tht2K"Pa[/`j=m-+4"hIRRL8\BhB*_))o(+.QsT:;\2\,*I"5!u?l6Cd=BaP9/^lGOTmZ
%O0Bb;P,?XKN[a-OO&"tD[auI0%kO6i)u9Y60gO!8/VL\9>J6'FOB2,1R!WL:o6F,(Z05^?f1:7o.\YUVrF\L$Dqj/*Kfs0!ljo4L
%\6J`')ht#mGEP%JNlFGH9unOm!rH[&9oTO.&(/*hLefM-;l^OI5Z'`AP+Dtrgsh6Df0=(F#1THr$`/U+1>Em9#O4/R`*e2!1qRf<
%Bc=p&ZS$Mjq/FocfSc6]BhSpL%)lF48sA<5GT\(PRi8jRA^I+>gT;iq=u2e#@D0]'nl:m&V9l97qKtj=D$RQp)l6U58H$HG`'E!P
%*2jOIGYKSKNj1,R-9)Fn6R,<X?M0IT,]>(iE3E_(4rU.O0l>qZ`EPE1ca"ocigA.FIQ>j=]*6S76$@:i2pAFGHa"7"Fu5h:?b`^o
%KoNSFmqQ9>,P$lgo3RW/hrlE*/W]IiG%gN.NZg?<L87IE)>?rXH#9KCZSQd!)q7DNk[")e)IYR(IudnqBf3k(nh4+_><pR:*bQ"u
%L%i*PQ:G=5IdLf4ZST$IYcn_+i*@ocCdd.-r]U)\]>Il5Y0/8NA$Jb20+u7#@@+eikN/[L=0:s-1o7t1^uDu45$ET`Sc"!4a'B,_
%C;dM**l&GKhmTW]roB?6rkRrno5EZ[9S/T@W2)%:3nm$Y(6l\fS_e;Y`@'H42R6Q6#YGG;-bkAI\9GO!eIN`ZpUC+j1T[;/qH_Ss
%W+LlIl.L'd)"=gR5?b#+lR9M<%=rk&q(6Z4B5H4)fW^gC4MiI$;ZuOY<poJjkeogrf<.DC@\Bq,/Qlr+E?UVhUQ*-uV>EsJ^TYY1
%)j,^?W\WO&ln/1n_ihj?V;k=^pC83be%HjsBVTN`l2FGkA#_9B7c^Nb*oTTT/cDUA:.re$g$DefZXSNW"B*T:?6nJ@KR9Kq@_"Ha
%0cCV47[7>SO:iE@@Kq\[I/Co4@iM?N%>,@XH/n1)E,<Ur'a$'&@R!b\\stVdN\#"c!#nmTH\3.Y/6GYN<",TKRju<OOk6Rd)L?8T
%9h+XF+/m*VrI7H>q"K::n(433oe1gljVJ!tn6c1m:Oi2DJ,Aj;r*OsLgY_tAJ,5Krs51S=q=@tnMQZs%s/&#/q5;"+j^8#55QC+(
%?iK/:r:BpjJjR/d+9(d(s7nnYh7rjeq*X><~>
%AI9_PrivateDataEnd
